{
  "chunks": [
    {
      "text": "CodeAid: Evaluating a Classroom Deployment of an LLM-based\nProgramming Assistant that Balances Student and Educator\nNeeds\nMajeed Kazemitabaar\nDepartment of Computer Science,\nUniversity of Toronto\nToronto, Ontario, Canada\nmajeed@dgp.toronto.eduRunlong Ye\nDepartment of Computer Science,\nUniversity of Toronto\nToronto, Ontario, Canada\nharryye@dgp.toronto.eduXiaoning Wang\nDepartment of Computer Science,\nUniversity of Toronto\nToronto, Ontario, Canada\nxiaoningwang@dgp.toronto.edu\nAustin Z. Henley\nMicrosoft Research\nRedmond, Washington, USA\naustinhenley@microsoft.comPaul Denny\nThe University of Auckland\nAuckland, New Zealand\npaul@cs.auckland.ac.nzMichelle Craig\nDepartment of Computer Science,\nUniversity of Toronto\nToronto, Ontario, Canada\nmcraig@cs.toronto.edu\nTovi Grossman\nDepartment of Computer Science,\nUniversity of Toronto\nToronto, Ontario, Canada\ntovi@dgp.toronto.edu\nABSTRACT\nTimely, personalized feedback is essential for students learning\nprogramming. LLM-powered tools like ChatGPT offer instant sup-\nport, but reveal direct answers with code, which may hinder deep\nconceptual engagement. We developed CodeAid , an LLM-powered\nprogramming assistant delivering helpful, technically correct re-\nsponses, without revealing code solutions. CodeAid answers con-\nceptual questions, generates pseudo-code with line-by-line explana-\ntions, and annotates student’s incorrect code with fix suggestions.\nWe deployed CodeAid in a programming class of 700 students for a\n12-week semester. A thematic ",
      "summary": "研究部署LLM编程助手CodeAid，平衡学生和教师需求，提供概念性反馈与代码修正。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ions.\nWe deployed CodeAid in a programming class of 700 students for a\n12-week semester. A thematic analysis of 8,000 usages of CodeAid\nwas performed, further enriched by weekly surveys, and 22 student\ninterviews. We then interviewed eight programming educators to\ngain further insights. Our findings reveal four design considerations\nfor future educational AI assistants: D1)exploiting AI’s unique ben-\nefits; D2)simplifying query formulation while promoting cognitive\nengagement; D3)avoiding direct responses while encouraging mo-\ntivated learning; and D4)maintaining transparency and control for\nstudents to asses and steer AI responses.\nPermission to make digital or hard copies of all or part of this work for personal or\nclassroom use is granted without fee provided that copies are not made or distributed\nfor profit or commercial advantage and that copies bear this notice and the full citation\non the first page. Copyrights for components of this work owned by others than the\nauthor(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or\nrepublish, to post on servers or to redistribute to lists, requires prior specific permission\nand/or a fee. Request permissions from permissions@acm.org.\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA\n©2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.\nACM ISBN 979-8-4007-0330-0/24/05. . . $15.00\nhttps://doi.org/10.1145/3613904.3642773CCS CONCEPTS\n•Human-centered computing →Interactive systems and\n",
      "summary": "一项关于CodeAid在编程教学中的使用研究，提出了未来教育AI助手的四大设计考虑。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ps://doi.org/10.1145/3613904.3642773CCS CONCEPTS\n•Human-centered computing →Interactive systems and\ntools ;•Social and professional topics →Computing educa-\ntion.\nKEYWORDS\nprogramming education, intelligent tutoring systems, large lan-\nguage models, educational technology, AI assistants, AI tutoring,\ngenerative AI, class deployment, design guidelines\nACM Reference Format:\nMajeed Kazemitabaar, Runlong Ye, Xiaoning Wang, Austin Z. Henley, Paul\nDenny, Michelle Craig, and Tovi Grossman. 2024. CodeAid: Evaluating a\nClassroom Deployment of an LLM-based Programming Assistant that Bal-\nances Student and Educator Needs. In Proceedings of the CHI Conference\non Human Factors in Computing Systems (CHI ’24), May 11–16, 2024, Hon-\nolulu, HI, USA. ACM, New York, NY, USA, 20 pages. https://doi.org/10.1145/\n3613904.3642773\n1 INTRODUCTION\nAn increasing number of students are learning to program, not just\nin traditional computer science and engineering degrees, but across\na wide range of subject areas [ 20]. Numerous successful initiatives\nhave been developed to broaden participation in computing, for\nexample, by combining computing majors with disciplines in which\nthere has traditionally been greater gender diversity [ 7]. However,\nthis surge of interest is putting pressure on resources at many insti-\ntutions and causing concern amongst administrators and educators\n[46].\nA particularly challenging aspect involves delivering on-the-spot\nassistance when students need help. Traditional approaches",
      "summary": "研究评估了一种基于LLM的编程助手在课堂上的应用，平衡学生与教师需求。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ng aspect involves delivering on-the-spot\nassistance when students need help. Traditional approaches, such\nas running scheduled office hours in which students can approach\ninstructors and teaching assistants, are often poorly utilized [ 56].arXiv:2401.11314v2  [cs.HC]  25 Feb 2024\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\nMoreover, in-person support is not equitable as not all students feel\ncomfortable seeking help from an instructor, and students who are\nbolder may receive help repeatedly while others wait [ 55]. There\nis an urgent need to develop more scalable, equitable and student-\nfriendly solutions for providing support in programming courses.\nThe recent emergence of large language models (LLMs) may of-\nfer one solution. LLM-powered AI tools such as ChatGPT [ 48] can\nact as powerful coding assistants that generate code from natural\nlanguage descriptions. However, the rapid growth and pervasive-\nness of LLMs have raised concerns about their use in educational\nsettings [ 26]. This has led to some institutions banning access to\ntools like ChatGPT [ 24]. In computing education, in particular, con-\ncerns have been voiced regarding issues of academic integrity and\nstudent over-reliance [ 3,30]. Indeed, research has shown that LLMs\ncan generate direct solutions to almost any problem typical in intro-\nductory programming courses [ 12,16]. To develop pedagogically\neffective real-time support solutions for programming courses, it\nis necessary to implement s",
      "summary": "即时编程援助需更公平、友好且有效的方法。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ically\neffective real-time support solutions for programming courses, it\nis necessary to implement suitable \"guardrails\" that restrict the\nopen-ended AI’s ability in generating direct solutions even when\nprompted. This ensures students use the AI constructively [14].\nIn this paper, we present CodeAid, an LLM-powered coding\nassistant that is designed to meet the needs of both students and\neducators: being helpful and technically correct, while not directly\nrevealing code solutions. We used an iterative design approach that\ninvolved frequent requirements elicitation and feedback from the\ncourse instructor, who taught the course in which CodeAid was\ndeployed. CodeAid allowed students to (i) ask general programming\nquestions, (ii) ask questions about the code they provide, (iii) explain\nthe code they provide, (iv) help fix the code they provide, or (v) help\nwrite code.\nWe deployed CodeAid in a large introductory C and Systems\nProgramming course, spanning a 12-week semester, with about 700\nuniversity students. During the first half of the course, we analyzed\nusage data and provided weekly reports to the course instructor.\nHalfway through the course, we made several updates to the as-\nsistant based on this feedback. Overall, during the semester-long\ndeployment, we collected data from multiple sources: (i) more than\n8,000 interactions with CodeAid along with ratings from students\nfor each generated response, (ii) ten weekly surveys about students’\nusage of CodeAid in comparison with",
      "summary": "CodeAid：一种保护学生编程能力的LLM辅助工具，通过反馈迭代优化。",
      "source": "codeAID.pdf"
    },
    {
      "text": "each generated response, (ii) ten weekly surveys about students’\nusage of CodeAid in comparison with other learning resources,\n(iii) 22 structured interviews with students discussing CodeAid’s\nfeatures, usability, and helpfulness in learning, and (iv) a final anony-\nmous survey comparing students’ usage of CodeAid with other AI\ncoding tools including ChatGPT. We then performed a thematic\nanalysis on 2,100 randomly sampled usages of the system (includ-\ning the questions that were asked, provided code, and generated\nresponses). Lastly, we presented the results of our deployment to\neight University-level programming course instructors from six\ncountries and conducted semi-structured interviews with them to\ngain further insights into how such AI assistants may be adopted\nand integrated into new courses in the future.\nTo effectively understand the implications of AI-powered tools\nin programming education, this paper is guided by the following\nresearch questions:•RQ1 - Usage Patterns: What patterns emerged in student\nusage of CodeAid, in terms of frequency, choice of features,\nusage patterns, and the nature of questions posed?\n•RQ2 - CodeAid Responses: How effective was CodeAid in\nproducing technically correct and helpful responses without\ndirectly revealing coding solutions?\n•RQ3 - Student Perspectives: How did students perceive\nCodeAid and its comparative advantages over existing tools\nincluding ChatGPT?\n•RQ4 - Educator’s Perspectives: What are the perspec-\ntives of educators reg",
      "summary": "该研究通过问卷、访谈等方法评估CodeAid在编程教育中的应用效果与学生、教师看法。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ools\nincluding ChatGPT?\n•RQ4 - Educator’s Perspectives: What are the perspec-\ntives of educators regarding learner-focused AI assistants\nlike CodeAid in terms of its integration into the curriculum,\nrecommendations for improvement, and effective pedagogy?\nBy synthesizing answers to the above research questions, this\npaper presents a critical analysis of the broader design space for AI\nassistants like CodeAid in programming education. We draw on the\nexperience of iteratively developing CodeAid and on the insights\nfrom its semester-long deployment to identify four major design\nconsiderations for tool design. We highlight the key trade-offs that\nneed to be considered, and present a set of generalizable guidelines\nfor the design of pedagogical LLM-powered coding assistants.\n2 RELATED WORK\nThe recent emergence of Large Language Models (LLMs), and their\nwide array of potential applications, has sparked enormous research\ninterest [ 5] and have generated intense debate about the opportu-\nnities and challenges they present, especially in domains such as\neducation [14, 26].\n2.1 LLMs in Computer Science Education\nAs LLMs become more widely used in practice, education researchers\nare exploring the potential of LLMs to produce educational content,\nenhance student engagement and customize learning experiences\n[26]. This is especially true in computing education, given that\ncode-generating tools are becoming widely adopted in industry\npractice. This has led to ongoing discussions about the ",
      "summary": "研究CodeAid等AI助教在编程教育中的应用与设计考量。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ols are becoming widely adopted in industry\npractice. This has led to ongoing discussions about the need to\nchange how computing is taught [ 14]. Instructor opinion on this\nmatter is currently divided. Lau and Guo [ 30] interviewed 20 in-\ntroductory programming instructors to understand how they plan\nto adapt their courses. The authors found that in the short term,\nmany educators planned to discourage \"AI-assisted cheating\" by\nbanning and increasing the weighting of invigilated exam scores,\nwhile others are more willing to embrace AI tools by integrating\nthem into their classes.\nRecent work in the computer science education community has\nstarted to explore the implications and opportunities of LLMs on\ncomputer science learning from different perspectives [ 3]. Most of\nthis recent work has focused on understanding the capabilities of\nLLMs for completing programming tasks [ 12] and on generating\ninstructional content [ 34]. For example, Finnie-Ansley et al. [ 17]\nshowed that Open AI Codex performs better than most students\non code writing questions in both CS1 and CS2 exams. Similarly,\nSavelka et al. compared the capabilities of GPT-3 and GPT-4 on 599\nprogramming exercises from three Python programming courses\nand found that the GPT models evolved from completely failing\nthe typical programming class’ assessments (the original GPT-3)\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\nto passing the cour",
      "summary": "研究探讨了大语言模型在计算机科学教育中的应用与影响。",
      "source": "codeAID.pdf"
    },
    {
      "text": "f an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\nto passing the courses with no human involvement (GPT-4) [ 54].\nIn terms of generating learning resources, early work by Sarsa et\nal. [53] analyzed the novelty, plausibility, and readiness of 120 pro-\ngramming exercises generated by OpenAI Codex and proposed the\npotential of using such models to come up with coding assignments.\nIn contrast, we explore the use of LLMs to help students complete\nprogramming exercises without providing direct code solutions.\n2.2 Question Answering\nProviding accurate and timely answers to student questions is im-\nportant for effective learning, however, this is a challenge for many\ncomputing educators given that class sizes are growing. Moreover,\nnot all students feel equally comfortable approaching an instructor\nor teaching assistant for help, which can lead to inequity in comput-\ning classrooms [ 18]. The prospect of providing LLM-based support\nfor answering student questions is therefore of great interest to\neducators [ 29]. In recent work, Liffiton et al. describe initial work\nin this direction with their CodeHelp tool which provides assis-\ntance to programming students but employs guardrails to avoid\ndirectly revealing solutions [ 37]. Students using CodeHelp can en-\nter a free-form question into a text area, along with code and an\noptional error message. They found that students using CodeHelp\nover a semester-long programming course (52 students) valued\nthe on-d",
      "summary": "LLM编程助手在课程学习和问题解答中的应用探索。",
      "source": "codeAID.pdf"
    },
    {
      "text": "d that students using CodeHelp\nover a semester-long programming course (52 students) valued\nthe on-demand availability of the tool, but mostly found it useful\nfor answering specific code-related tasks such as fixing errors. In\ncontrast, CodeAid offers a range of input templates and interactive\nresponse formats to cater to diverse student needs. Furthermore,\nwhereas CodeHelp’s evaluation centered around student usage and\nperceptions, CodeAid delves deeper, assessing response quality\nthrough thematic analysis and broadening the evaluation scope\nby involving a larger student cohort (700 students) and gathering\ninsights from course instructors.\n2.3 Explaining Code\nAccurate explanations of code are useful for students learning pro-\ngramming, and can help them improve their reasoning when writ-\ning their own code [ 45]. For example, ‘explain in plain English’\nquestions prompt students to explain their understanding of code\nat an abstract level [ 62], and provides both long-term and short-term\nlearning benefits [ 45,59]. Modelling explanations created by ex-\nperts is an effective way for students to develop this important skill,\nhowever, generating high-quality explanations for a large quantity\nof varying code fragments represents a significant workload for\ninstructors [39].\nThe generation of code explanations by LLMs is an active area of\nresearch. MacNeil et al. [ 39] reported student experience with LLM-\ngenerated code explanations in a web software development e-book.\nThey showed",
      "summary": "CodeAid和CodeHelp相比，提供更多样化的输入模板和交互式回答格式。",
      "source": "codeAID.pdf"
    },
    {
      "text": "t experience with LLM-\ngenerated code explanations in a web software development e-book.\nThey showed that most students perceived the code explanations as\nhelpful, but engagement depends on code length, code complexity\nand explanation types. Recent work by Leinonen et al. [ 33] showed\nthat LLMs can generate code explanations that are more accurate\nand easier to understand than those created by students themselves,\nthus providing a potential scalable solution when compared to peer-\ngenerated approaches. CodeAid enhances this by allowing students\nto ask questions directly from their code to gain clarity on specificconcepts, while also offering an interactive feature for line-by-line\ncode explanations.\n2.4 Writing and Debugging Code\nThe ability to write code has been a traditionally important learn-\ning outcome for novices in introductory programming courses. A\ncommon approach for the development of code writing skills has\nbeen through the use of frequent programming practice with many\nsmall problems [ 1,13]. LLMs have shown themselves capable of\nsolving introductory level programming problems with very high\naccuracy [ 16,52], and thus can provide direct support for code\nwriting when students need help. The literature on debugging also\nhas a long history, and various tools [ 21,22] and activities have\nbeen proposed to help novices and students learn debugging tech-\nniques [ 31,36,41,42]. Recent work has shown that LLMs have\nthe potential to be used to assist in many aspects of d",
      "summary": "LLM生成代码解释在Web软件开发中的应用及CodeAid的增强功能。",
      "source": "codeAID.pdf"
    },
    {
      "text": "41,42]. Recent work has shown that LLMs have\nthe potential to be used to assist in many aspects of debugging,\nincluding producing more understandable programming error mes-\nsages [ 34] and providing high-precision feedback on code for fixing\nsyntax errors [49]. CodeAid uses a similar, high-precision method\nfor feedback generation, but also tries to improve the experience by\nvisually annotating the erroneous sections of students’ code with\nsuggestions for corrections.\nKazemitabaar et al. developed Coding Steps to explore the use of\nLLM-based code generators for supporting learners in introductory\nprogramming [ 27]. Coding Steps incorporates a code generator\ninto the user interface of an online programming tool. Students can\ngenerate code by providing a natural language prompt to the tool,\nwhich is then sent to the OpenAI Codex API, and the response is\nautomatically pasted into the student’s code editor. They studied\nstudents using Coding Steps to solve a large set of Python program-\nming tasks. One key finding was that students frequently copied\nthe exercise questions as prompts and then used the AI-generated\ncode without making any alterations to it. This reliance on the code\ngenerator is suggestive of the over-dependency problem [ 9–11].\nTo address this, CodeAid integrates guardrails to restrict the open-\nended AI system from generating direct code solutions even if stu-\ndents ask for them. Additionally, it uses scaffolding techniques like\ninteractive pseudo-code and code an",
      "summary": "CodeAid 通过视觉标注提高编程辅助体验，避免学生过度依赖AI代码生成。",
      "source": "codeAID.pdf"
    },
    {
      "text": " ask for them. Additionally, it uses scaffolding techniques like\ninteractive pseudo-code and code annotations to support students\nin transitioning from understanding concepts to independently\nwriting and debugging their code.\n3 INITIAL SYSTEM DESIGN AND\nARCHITECTURE\nCodeAid is an LLM-based programming assistant which aims to\nassist with programming assignments and reinforce concepts, simi-\nlar to a teaching assistant, as outlined by Mirza et al [ 44]. CodeAid\nwas designed based on prior literature, OpenAI API capabilities, in-\nstructor consultations, and pilot studies. The platform has five main\nfeatures: Help Write Code andHelp Fix Code for hands-on coding\nsupport, General Question andExplain Code for conceptual under-\nstanding, and Question from Code as a versatile assistance covering\nboth areas. Each feature was carefully designed to produce help-\nful responses while not directly generating code solutions. In this\nsection, we focus on CodeAid’s initial design and architecture. The\nsystem went through a major update based on midterm feedback\nduring its deployment which is described later in Section 5.\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\nFigure 1: The primary input interface of CodeAid. Users select a feature from the bottom right; this choice activates the relevant\ninput fields (code or question). After inputting their query, users press ’ask’ and wait for the LLM to respond.\nThe interface consists of an input to pose questions and an out-\nputto",
      "summary": "CodeAid是一款基于LLM的编程助手，提供代码编写、调试和概念解释支持。",
      "source": "codeAID.pdf"
    },
    {
      "text": " wait for the LLM to respond.\nThe interface consists of an input to pose questions and an out-\nputto display past responses. The input section (Figure 1) features\nan input text box, a code input with syntax highlighting, and a\nradio button group to select from one of the features. A student\nfirst selects a feature, enters input (like a function-related ques-\ntion), and hits submit. CodeAid then displays the response using\nUI elements specific to the selected feature. A section on top of the\nmain input area provided pop-up videos to explain each feature. We\nalso displayed a disclaimer to make sure students understand that\nthe responses are generated by an AI language model and it might\ngenerate responses with excessive confidence or be incorrect.\n3.1 Primary CodeAid Assistance Features\nTo control the output produced by the LLM and prevent displaying\nany code solutions to students, we employed few-shot learning\nas described in [ 8]. We provided input/output example pairs to\ndefine the overarching format of the LLM’s output. This enabled\nus to confine or restrict code generation, and to add interactive\ncomponents to the response. This section introduces the design\nand behaviour of each of the main assistance features.\n3.1.1 General Question.\nGeneral Question The most basic fea-\nture in our system was generating answers to programming ques-\ntions, specifically conceptual C programming questions. When a\nuser selects General Question , the code editor will become disabled\nindicatin",
      "summary": "该接口包含输入问题和显示历史响应的功能，通过示例限制LLM输出，并提供解释视频和免责声明。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ing questions. When a\nuser selects General Question , the code editor will become disabled\nindicating that the AI will only consider the question input. For\ngenerating the response, we used few-shot learning to generate\nshort answers with informative explanations. See Figure 3a for\nmore details about the prompt design for this feature. The response,\ndisplayed in Figure 2a, was limited to natural language, although\nsometimes included inline code (such as a function prototype), but\nno multi-line code.\n3.1.2 Inline Code Exploration.\nInline Code Exploration In\neach of the primary five features, responses or explanations often\ncontain C programming keywords (such as functions). To provide\nopportunities for learning, we displayed these keywords in a dif-\nferent style. With this feature, students can hover over a keyword\nfor further exploration: generate sample code about that keyword,\ngenerate documentation, or ask a question about the keyword. In-\nvoking any of these three options, will generate an Inline Code\nExploration response which is displayed in Figure 2e.3.1.3 Question from Code.\nQuestion from Code To simulate\nan experience similar to StackOverflow’s Q&A forum, we designed\ntheQuestion from Code feature to help students with debugging\ntasks or conceptual questions in a specific context. The UI for this\nfeature looked similar to the General Question feature but with the\nadded ability to provide some code as context (Figure 2b). Both\nthe code editor and the question input bec",
      "summary": "用户选择通用问题时，代码编辑器将禁用，AI仅考虑问题输入并以自然语言生成简短回答。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ability to provide some code as context (Figure 2b). Both\nthe code editor and the question input became enabled when this\nfeature was selected.\n3.1.4 Help Fix Code.\nHelp Fix Code To help students in their\ncode debugging tasks, students could enter their buggy code in the\ncode editor and the intended behaviour or the problem of the code\nin the question input (which displayed \"Intended Behavior\" as its\ntitle when this feature was selected). The initial version of the Help\nFix Code feature (Figure 2d) performed two tasks in the backend:\nfirst, it attempted to generate the correct version of the provided\ncode based on the given description, and second, it tried to explain\nusing bullet points what was changed and why (see Figure 3b for\nmore details). The response interface (Figure 2d) only displayed the\nbullet points and not the fixed code as a way to not reveal direct\ncode solutions.\n3.1.5 Explain Code.\nExplain Code To help students in use cases\nsuch as understanding starter code used in assignments or code\ntaught during lectures, we designed the Explain Code feature (Figure\n2c). Upon selecting this feature, the code editor would be enabled\nand students could paste in code they wanted to be explained. The\ngenerated output was an interface that displayed the users’ code\nand enabled them to hover over each line to see the detailed ex-\nplanation for that line and how the line works in orchestration\nwith the rest of the code. To do this, we used a few-shot learning\napproach and condi",
      "summary": "提供代码上下文、帮助修复代码和解释代码功能，辅助学生调试和理解代码。",
      "source": "codeAID.pdf"
    },
    {
      "text": " orchestration\nwith the rest of the code. To do this, we used a few-shot learning\napproach and conditioned the model to produce a simple output\nstructure of generating the same code but with an explanation as\na specially formatted comment at the end of each line (see Figure\n3c to see the structure of the prompt). This enabled us to show the\nexplanations directly to their matching code.\n3.1.6 Help Write Code.\nHelp Write Code Prior work has shown\nLLM-based code generators to provide great starting points for\nprogrammers [ 58]. Therefore, to assist students struggling with\ncoding tasks, we wanted to provide ways to help them to write\ncode without displaying any code. For that, the Help Write Code\nfeature (Figure 2f) required users to enter the intended behaviour\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\nFigure 2: The initial interface for the responses produced by CodeAid’s five primary functions, along with the Inline Code\nExploration feature.\nof the program and generated a high-level structure of the code\nwith sub-goals [ 40] and pseudo-code in natural language. We used\nfew-shot learning to ensure that the generated output included\ninformation about C library functions (e.g. for memory allocation\nor system calls) while not including any code.\n3.2 System Architecture\nCodeAid is written in TypeScript and has a client-server archi-\ntecture that enables user authentication and storing responses,\nc",
      "summary": "CodeAid 使用 few-shot 学习帮助学生编写代码并提供解释。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ipt and has a client-server archi-\ntecture that enables user authentication and storing responses,\ncollecting feedback, and communicating with OpenAI APIs for gen-\nerating responses. The server is implemented using Node.js , specifi-\ncally: Express.js for REST API used in client-server communication,\nMongoose to interact with a cloud-based instance of MongoDB for\nstoring user data and generated responses, Passport.js for user au-\nthentication, Socket.io for streaming data from OpenAI into the\nbackend (to be stored in the database) and parsed for the client to\nbe displayed in the UI. The client-side code was developed using\ntheReact Framework .\nFor user input, we included a textbox and an instance of the\nMonaco Editor that provided syntax highlighting for C program-\nming. These two inputs were selectively enabled or disabled basedon the selected feature to indicate which one the user needs to fill\nin. After users entered the required text for a question and clicked\non the generate button, the LLM started streaming output to the\nbackend. The backend simultaneously parsed the response and\nstreamed it to the client. Once the stream finished (e.g. after reach-\ning a specified stop token in the stream), the backend stored the\nentire response in the database and signalled the client about the\nfinished stream.\nThe system was instrumented with the Hotjar [ 23] user be-\nhaviour analytics tool that provides heatmaps and anonymous\nsession recordings. We also developed an admin dashboard ",
      "summary": "基于Node.js和React的用户认证响应系统，集成OpenAI API和热图分析工具。",
      "source": "codeAID.pdf"
    },
    {
      "text": " tool that provides heatmaps and anonymous\nsession recordings. We also developed an admin dashboard for\nthe course instructor and the researchers to monitor anonymized\nstudents’ usage and the associated AI-generated responses.\n3.3 Prompt Design\nOur prompt engineering consisted of mainly few-shot training, in\nwhich at least one input/output example was provided for each\nprompt. We carefully designed prompts to ensure responses (i)\nfollow structured, and easy-to-parse templates, (ii) are technically\ncorrect, and (iii) use a style, tone, and level of technicality that is\nboth helpful and not overwhelming for students. For example, in\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\nFigure 3: The structure of LLM prompts used in the initial version of General Question ,Help Fix Code , and Explain Code .\nrefining the Help Fix Code feature, we moved from generating a sim-\nple bullet-pointed suggestions to first generating the correct code,\nfollowed by suggested fixes. This significantly improved suggestion\nquality and accuracy. Similarly, in the updated system, we adopted\na pseudo-code style that balances between not overly revealing the\ncode’s syntax and not being too close to natural language, which\nmight be too long and overwhelming. Furthermore, the initial sys-\ntem used the\ncode-davinci-002 GPT-3 model, but was updated\nto the\ngpt-3.5-turbo GPT-3.5 model in the updated system. The\nstructure of the prompts used in the General Question ,Help Fix\nCode , and Explain",
      "summary": "提供热图和匿名会话记录，开发管理员仪表板监控学生使用和AI响应。",
      "source": "codeAID.pdf"
    },
    {
      "text": "dated system. The\nstructure of the prompts used in the General Question ,Help Fix\nCode , and Explain Code features of the initial version of CodeAid is\nillustrated in the Figure 3.\n4 SEMESTER-LONG CLASS DEPLOYMENT\nTo gain a comprehensive understanding of students’ usage of CodeAid\nand the AI’s generated responses in an authentic learning envi-\nronment, we deployed CodeAid in a semester-long programming\ncourse, with over 700 students, at a large North American univer-\nsity. All students had optional access to CodeAid as an additional\nresource throughout the semester. Our study, which included the\nuse of an AI tool, interviews, and weekly surveys, was approved by\nour institute’s ethics review board prior to deployment.\n4.1 Course Structure\nThe second-year course focused heavily on C programming, and in-\ncluded topics such as shell programming, file processing, processes,\nsignals, system calls, and basic network programming. Prerequi-\nsites of the course include a software design course taught in Java\nand introductory programming using Python. To accommodate\nthe large 700-student class, the course was split into four lectures\nsegments. Students were required to watch specific videos and\ncomplete weekly preparation exercises by a set deadline before\neach lecture. The course included ten lab exercises (worth 1% each),\nfour programming assignments (A1 to A4, worth 39% in total), amidterm test (worth 10%), and a final exam (worth 40%). To incen-\ntivize responding to the weekly surve",
      "summary": "代码援助在北美大学编程课程中的半年部署与评估。",
      "source": "codeAID.pdf"
    },
    {
      "text": "term test (worth 10%), and a final exam (worth 40%). To incen-\ntivize responding to the weekly surveys about CodeAid, a 0.1%\ngrade was attributed to responding to each of the ten surveys. This\ngrade was based on completing the surveys, regardless of students’\nconsent to participate in our study. Course policies allowed the use\nof CodeAid, but explicitly forbade the use of other AI tools (such as\nChatGPT) to complete any coursework. Students were also asked\nto cite any external sources that they used for their work. Students\nin the course had access to a variety of resources beyond CodeAid:\nrecorded lecture videos, lecture notes, an online Q&A discussion\nboard moderated by the instructors, and weekly office hours with\nteaching assistants and course instructors.\n4.2 Deployment and Participants\nTo ensure ethical integrity and avoid any perceived pressure, stu-\ndents’ engagement with CodeAid, weekly surveys, and interviews\nin our study was entirely voluntary and confidential from course in-\nstructors. The researchers informed the instructors only at the end\nof the semester about who had completed the surveys, which con-\ntributed 1% to the course mark, without revealing the participants’\nconsent status. Students’ consent was obtained through the first\nweekly survey, where they selected from three options: consent to\nshare their CodeAid data for research, participate in surveys for\nthe grade without data sharing, or opt out of surveys, foregoing a\npotential 1% grade increase. Out o",
      "summary": "课程包括期中测试、期末考试和每周调查，使用CodeAid可提升成绩，但需自愿且保密。",
      "source": "codeAID.pdf"
    },
    {
      "text": "he grade without data sharing, or opt out of surveys, foregoing a\npotential 1% grade increase. Out of all, 563 (80%) students consented\nto participate and share their data for our analysis.\nOf the 563 participants, 318 (56%) reported their gender identity\nas man, 170 (30%) woman, 4 (1%) non-binary, and 71 (13%) preferred\nnot to say. In terms of English proficiency, 515 (91%) students agreed\nor strongly agreed that they are comfortable reading English. In\nterms of program of study, 418 (74%) were enrolled in a Computer\nScience major program, 81 (14%) were enrolled in a Computer Sci-\nence minor program, and 64 (12%) the rest were in other programs.\nIn terms of prior knowledge about C programming, 348 (62%) stu-\ndents disagreed or strongly disagreed about being competent in\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\nTable 1: The sub-dimensions from our thematic analysis, their associated codes, and inter-rater reliability metrics using Cohen’s\nKappa and percentage agreement. The detailed codebook is provided in Appendix A.\nSub-Dimensions Codes Inter-Rater Reliability\nWhat are students asking from CodeAid? Code and conceptual clarification ,Function-specific queries ,\nCode execution probes ,Buggy code resolution ,Problem source\nidentification ,Error message interpretation ,High-level coding\nguidance , and Direct code requests88% (𝜅=.85)\nHow much is CodeAid directly revealing\nthe solution?Specific ",
      "summary": "563学生同意分享数据参与分析，其中大部分是计算机科学专业学生。",
      "source": "codeAID.pdf"
    },
    {
      "text": " , and Direct code requests88% (𝜅=.85)\nHow much is CodeAid directly revealing\nthe solution?Specific code ,Specific pseudo-code ,Example high-level code ,\nExample high-level pseudo-code ,Steps to fix syntax issue ,Steps\nto fix semantic issue ,No-code conceptual explanation94% (𝜅=.92)\nHow technically correct is the response? Correct ,Incorrect 87% (𝜅=.62)\nHow helpful is the response if correct? Helpful ,Not helpful 82% (𝜅=.61)\nC programming before the course, while 57 (10%) students agreed\nor strongly agreed. Students were invited to use CodeAid through\nseveral email announcements throughout the semester.\n4.3 Data Sources\nTo gather a comprehensive understanding of student and educator\nexperiences and interactions with CodeAid, we employed a multifac-\neted data collection approach including CodeAid’s interaction logs,\nten weekly feedback surveys, an anonymous post-course survey\n(administered after final grade submissions), and semi-structured\ninterviews with 22 randomly sampled students.\n4.3.1 CodeAid Usage and In-situ Feedback. A primary data source\nfor understanding students’ usage patterns (RQ1) and the assis-\ntant’s response quality (RQ2), was CodeAid’s activity logs. Log data\nhas become an important data source to understand programming\nexperiences [ 6] and coding approaches [ 17,25], particularly when\ninteracting with LLMs [ 27,28]. For each question asked by students,\nwe closely examined its content and CodeAid’s generated responses\nthrough a thematic analysis described l",
      "summary": "CodeAid直接揭示解决方案的比例为88%，技术正确性为87%。",
      "source": "codeAID.pdf"
    },
    {
      "text": "osely examined its content and CodeAid’s generated responses\nthrough a thematic analysis described later in this section. To better\nunderstand the usefulness of the AI-generated responses (RQ2),\nCodeAid prompted students with a mandatory question that asked\n\"How useful was this response?\" . Students had to respond to a 5-\npoint Likert scale (displayed as a rating stars) and optionally type\na reason for their rating before they could use the system again.\nFor each feature, we analyzed the ratings and grouped the reasons\ninto positive and negative feedback to better understand students’\nperceptions.\n4.3.2 Weekly Research Surveys. To understand how students used\nCodeAid in comparison to traditional educational resources and\nChatGPT (RQ3), we conducted a weekly online survey. These types\nof surveys have aided researchers in monitoring students’ percep-\ntions towards AI agents [ 61]. Similarly, we asked students to report\ntheir comparative usage of multiple resources including lecture\nvideos, lecture notes, Q&A discussion boards, office hours, and\nCodeAid. We also asked questions about why they did or did not\nuse CodeAid, how useful they found it, what they liked or disliked\nabout the tool, and any open-ended feedback about CodeAid during\nthe last week of the course.4.3.3 Semi-structured Interviews with Students. To gain deeper in-\nsights about how students used CodeAid (RQ3), we conducted confi-\ndential interviews with 22 randomly selected participants, ensuring\ntheir privacy fro",
      "summary": "通过主题分析、调研问卷和访谈，评估CodeAid生成响应的有效性及学生使用体验。",
      "source": "codeAID.pdf"
    },
    {
      "text": "nducted confi-\ndential interviews with 22 randomly selected participants, ensuring\ntheir privacy from the instructors. Eight interviews were conducted\nhalfway through the course (after students had used CodeAid for A1\nand A2), and 14 interviews were done after the course was finished\n(after their final exams). After obtaining informed consent, our in-\nterview questions addressed productivity enhancement, shifts in\nworkflow, verifying responses and reliability, usability concerns,\nlearning moments with CodeAid, and contrasts with alternative\nresources like StackOverflow, a moderated Q&A discussion board,\nand other websites. We concluded the interviews with a short co-\ndesign activity, involving students as collaborators in envisioning\nand shaping future iterations of CodeAid. This approach effectively\ngathered their unique ideas and suggestions for features tailored to\neducational settings. Each interview lasted approximately an hour\nand every participant was compensated with a $25 gift card.\n4.3.4 Post-Course Anonymous Survey. Since course policy prohib-\nited the use of code generated from AI tools like ChatGPT to com-\nplete any course work, we conducted an anonymous survey to\ndetermine whether and why students used ChatGPT. Our goal was\nto gain a holistic view of students’ perceptions of AI assistants in\nlarge classes (RQ3). The survey further explored the frequency of\ntheir engagement with ChatGPT in comparison to CodeAid.\n4.4 Thematic Analysis\nTo gain deeper insights into ",
      "summary": "进行了22次保密访谈，了解学生使用CodeAid的心得与建议。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ngagement with ChatGPT in comparison to CodeAid.\n4.4 Thematic Analysis\nTo gain deeper insights into how students interacted with CodeAid\nand the quality of the AI-generated responses, we performed a\nthematic analysis on the usage logs. From a total of 8132 usages, we\ninitially removed those from students who did not agree to partici-\npate in the research, leaving 7003 data points. We then randomly\nsampled 2100 data points (30%) and then removed usages that were\nunrelated to the course (n=71) were excessively long (n=133), or in\nwhich CodeAid encountered a technical error (n=82). We were then\nleft with 1750 (25%) usages, on which we performed the thematic\nanalysis and report our results.\nWe created two high-level code dimensions to answer our re-\nsearch questions: (i) to understand usage patterns, choice of features,\nand the nature of questions posed (RQ1), we focused on the User\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\nQuery (including any provided code or error logs), and (ii) to eval-\nuate the quality of the AI-generated responses (RQ2), we focused\non the CodeAid Response . This enabled us to focus on relevant\ndata for each of the sub-dimensions in our thematic analysis in the\nfollowing rounds of analysis [4].\nUnder each of the two dimensions, we applied an inductive ap-\nproach where two researchers read through 100 randomly sampled\ndata points together and allowed codes to emerge during the process\n[4]. The process involved familiarizing themselves ",
      "summary": "对CodeAid使用日志进行随机抽样和主题分析，评估学生交互模式与AI响应质量。",
      "source": "codeAID.pdf"
    },
    {
      "text": "r and allowed codes to emerge during the process\n[4]. The process involved familiarizing themselves with the data,\nspecifying sub-dimensions, and then creating codes for each sub-\ndimension. The two researchers then independently coded another\n120 randomly sampled data points using the initial codebook. Next,\nthey discussed the results from the initial coding, resolved conflicts,\nand further refined the codebook. During this step, they presented\nthe codes and representative usages to the course instructor and\nincorporated their feedback. To enhance the generalizability and\nreliability of our findings, we streamlined our coding definitions.\nFor instance, responses with minor inaccuracies were labelled as\n\"incorrect\" . Similarly, if responses that were categorized as \"correct\"\nfailed to adequately address the query, were irrelevant, repetitive,\nor exceeded the scope of the course material, they were labelled as\n\"unhelpful\" .\nAfter refining the codebook 1, the two researchers independently\ncoded 200 data points and used Cohen’s Kappa and percentage\nagreement [ 43,47] to compute the inter-rater reliability for each of\nthe sub-dimensions. After removing low-quality sub-dimensions,\naddressing disagreements, and finalizing the codebook, the two\nresearchers independently coded a total of 1430 additional data\npoints selected at random from the remaining untagged data. The\nfull codebook can be found in Appendix A.\n5 MIDTERM FEEDBACK AND SYSTEM\nITERATION\nMidway through the course, follo",
      "summary": "研究人员通过多次独立编码和讨论，最终确定了高质量的代码本。",
      "source": "codeAID.pdf"
    },
    {
      "text": "can be found in Appendix A.\n5 MIDTERM FEEDBACK AND SYSTEM\nITERATION\nMidway through the course, following the completion of half the\nmajor assignments, we conducted semi-structured interviews with\neight randomly selected students and analyzed five of the weekly\nresearch surveys. This feedback was used to derive any needed\niterations to the design of the tool.\nThe feedback highlighted numerous aspects of CodeAid that\nstudents appreciated: clear explanations of code or complex top-\nics, assistance in identifying errors, constant availability, direct\nand personalized engagement compared to online searches and\ndocumentation, and the flexibility to ask diverse questions. How-\never, our analysis also pinpointed several areas where CodeAid\ncould be improved. Specifically, students felt that the responses\nthey received were often too brief and lacked in-depth informa-\ntion, example usage code, or associated documentation. There were\nalso concerns about incorrect answers or misleading suggestions\nfor fixing their code. Another common frustration was the slow\nresponse time of the platform. Students pointed out the importance\nof the \"Help Fix Code\" feature, but suggested that it should provide\nspecific line numbers where errors were detected. Furthermore,\nstudents expressed the need to ask follow-up questions beyond the\n\"General Question\" feature. Lastly, during the co-design phase of\nour interviews, students emphasized the need for seamless access\nto documentation for functions mentione",
      "summary": "中期反馈显示CodeAid在解释代码和快速响应方面有待提升。",
      "source": "codeAID.pdf"
    },
    {
      "text": "interviews, students emphasized the need for seamless access\nto documentation for functions mentioned in CodeAid’s responses.5.1 System Updates and Enhancements\nIn response to the feedback received during our initial evaluation,\nand after in-depth discussions with the course instructor, we im-\nplemented several updates to CodeAid.\n5.1.1 Pseudo-Code Integration. As a way to provide more com-\nprehensive responses and to increase engagement, we decided to\nadd pseudo-code generation to most of the features (Figure 4b).\nWe used pseudo-code as a form of scaffolding, offering a simpli-\nfied and structured outline of a program, which serves as a bridge\nto actual coding without directly revealing the code itself [ 32].\nTo enable this functionality, we updated our LLM prompts for all\nfeatures to ask the model to generate code. However, instead of\nshowing this code to the user, we sent it to a new LLM function\nthat generated the pseudo-code. For line-by-line explanations, the\nnew LLM function also included an explanation following each line\nin the form:\n[pseudo-code] /// description of details . This\nwas then parsed and only the pseudo-code was rendered, while\nthe explanation would be displayed whenever the user hovers over\nthat particular line.\n5.1.2 Displaying Function Documentation. Since the Inline Code\nExploration was underutilized, we removed it and instead updated\nall of the features to display static (non-AI generated) documenta-\ntion for functions that were relevant to the quer",
      "summary": "学生反馈需改进代码访问文档的流畅性，因此系统更新了伪代码生成和功能文档显示。",
      "source": "codeAID.pdf"
    },
    {
      "text": "es to display static (non-AI generated) documenta-\ntion for functions that were relevant to the query. Students could\nhover over the function buttons to see the detailed documentation\nwith usage descriptions and code examples (Figure 4d). We imple-\nmented this by asking the LLM to always list all relevant functions\nto the user’s query. To retrieve the documentation for each function,\nwe developed a local key-value database in which the keys were\nfunction names and values were the documentation objects scraped\nfrom the Standard C Library parsed into a JSON object.\n5.1.3 Stream Generation. To address concerns over response de-\nlays, we incorporated OpenAI’s stream generation mechanism for\nCodeAid’s responses to provide immediate feedback. To achieve\nthis, we developed a specific markup for each of the features to\nenable parsing the partially generated response as it was being\nstreamed. This enabled our system to immediately start displaying\nresponses after users clicked the generate button. For single-line\ncomponents such as generating a short summary for the provided\ncode, or responding with a single-line answer to an asked question,\nour markup used the following format:\n[output-name]: <text> .\nFor multi-line components such as code parts, we used two to-\nkens,\n[start-of-part] and\n[end-of-part] . Furthermore, in situ-\nations where the output of one LLM function was sent to another\nLLM function in series (e.g. to generate the final pseudo-code from\ncode), our API did not show t",
      "summary": "通过LLM列出相关函数并使用本地数据库存储文档，实现即时反馈机制。",
      "source": "codeAID.pdf"
    },
    {
      "text": "er\nLLM function in series (e.g. to generate the final pseudo-code from\ncode), our API did not show the generated code, but displayed (and\nupdated while streaming) the number of lines of code that were\ngenerated.\n5.1.4 Updated Prompts and OpenAI Model. We improved the Gen-\neral Question and Question from Code features to provide more\ndetailed and thorough answers by refining the few-shot prompt-\ning examples. To enhance the overall quality, accuracy, and reli-\nability of CodeAid’s responses, we upgraded the AI model from\ncode-davinci-002\nto the more advanced\ngpt-3.5-turbo model.\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\nFigure 4: The redesigned interface for the responses produced by CodeAid after the midterm update: (a) redesigned Help Fix\nCode , (b) the new interactive pseudo-code with line-by-line explanations, (c) suggested follow-ups, and (d) displaying relevant\nfunction definitions.\nWe also updated the prompts to not respond to questions that were\nnot relevant to C programming.\n5.1.5 Redesigned Help Fix Code. We redesigned the feature based\non feedback so that it would highlight the specific lines that require\nmodifications, deletions, or additions. To achieve this, we used a\ndata flow which is displayed in Figure 5. (1) Pre-processing: The\nbuggy code is stripped of any comments and is then reformatted\nwith a standard style. (2) Generating Fixed Code: An LLM func-\ntion tries to generate ",
      "summary": "CodeAid更新了API显示方式，改进了代码生成和修复功能，并升级了AI模型。",
      "source": "codeAID.pdf"
    },
    {
      "text": "n reformatted\nwith a standard style. (2) Generating Fixed Code: An LLM func-\ntion tries to generate the fixed version of the buggy code based\non the provided intended behaviour or error message. This step\nalso generates a paragraph of changes similar to the initial ver-\nsion of the feature which is immediately streamed to the client\nand displayed. (3) Matching Lines: A simple static code analyzer\nmatches each line of the fixed code to the original buggy code. (4)\nAnnotating Buggy Code: The buggy code is then annotated with\nthree labels:\n/// [changed] ,\n/// [removed] , or a new empty line\nwith\n/// [added] . (5)Explaining Annotations: The annotated\nbuggy code and the fixed code are sent to another LLM function\nthat adds explanations to each of the changed, removed, and addedlabels. Eventually, the explained changes and annotated code is\nstreamed to the client for rendering and displaying the highlighted\nlines and on-hover interactions as displayed in Figure 4a.\n5.1.6 Improved Follow-Up Questions. We redesigned the prompts\nto add the capability for users to ask follow-up questions in the\nQuestion from Code ,Explain Code , and Help Write Code features,\nthus improving the steering experience. Additionally, we integrated\nsuggested follow-up prompts (Figure 4c), inspired by the \"did you\nmean X instead?\" suggestions commonly seen in search engines.\n6 RESULTS\nIn this section, we answer the first three research questions based\non the overall usage of CodeAid throughout the entire semes",
      "summary": "代码修复流程包括标准格式化、生成固定代码、匹配行、标注代码和解释标注。",
      "source": "codeAID.pdf"
    },
    {
      "text": "the first three research questions based\non the overall usage of CodeAid throughout the entire semester.\nSpecifically, RQ1: students usage patterns of CodeAid ,RQ2: effective-\nness of CodeAid in generating correct and helpful responses without\nrevealing solutions , and RQ3: students’ perceptions of CodeAid . We\nsynthesize results from various data sources: CodeAid interactions,\nthematic analyses, interviews with 22 students (S1 - S22), and both\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\nFigure 5: Revised prompt design and system architecture illustrating the data flow of the General Question feature, highlighting\nthe process of generating pseudo-code and relevant function documentation.\nFigure 6: a) Students’ self-reported average usage of various course resources over the course (based on the weekly surveys), and\nb) CodeAid’s daily usage and unique user counts over the course of the 12-week semester highlight a spike in activity during\ndeadline periods (A 7-day average was applied to emphasize general trends).\nweekly and end-of-semester anonymous surveys. Where quota-\ntions came from student interviews we have indicated the subject\nnumber (e.g. S x). Unattributed quotations came from open-ended\nquestions on the weekly surveys.\n6.1 RQ1: Students’ Usage Patterns and Feedback\nDuring the course, 372 students engaged with CodeAid, posing 8132\noriginal and 1986 follow-up queries. From these, 300 students agreed\nthat their data could be used, which left us wit",
      "summary": "本研究基于一整个学期，探索CodeAid的学生使用模式、效果及感知。",
      "source": "codeAID.pdf"
    },
    {
      "text": " follow-up queries. From these, 300 students agreed\nthat their data could be used, which left us with 7003 original queries\nand responses for analysis. Students, on average, inquired CodeAid\n23.3 times (SD=41.2), spanning a range from 1 to a maximum of\n333 questions per student. The majority of students (n=159) asked\nbetween 1 and 9 questions, followed by 80 students who asked 10\nto 29 questions, 28 students who asked 30 to 49 questions, and 34\nstudents who asked more than 50 questions. Student engagement\nsurged approaching major assignment deadlines or exams (Figure\n6b). The dataset of queries from consented students is available as\nsupplementary material with this paper, offering a valuable resource\nfor those interested in advancing AI educational tools.\nWe analyzed the usage of CodeAid among different gender\ngroups, particularly the predominant self-reported gender cate-\ngories. On average, those identifying as women used CodeAid 33.8\ntimes, which was significantly more than those identifying as men,with an average usage of 18.4 times ( p=.004, d=.34, using an inde-\npendent samples t-test). This suggests that despite being underrep-\nresented in the course (making up only 30%), women tended to use\nCodeAid more frequently than men.\nIn terms of features, the General Question feature was used most\nfrequently, accounting for 38% (n=2682) of total usages, with 683\ninstances leading to 1412 follow-up questions. The Question from\nCode feature followed at 28% (n=1959), leading to 1",
      "summary": "CodeAid 平均每个学生使用 23.3 次，女性学生使用频率显著高于男性。",
      "source": "codeAID.pdf"
    },
    {
      "text": "g to 1412 follow-up questions. The Question from\nCode feature followed at 28% (n=1959), leading to 187 follow-ups\nfrom 108 usages. The Help Fix Code feature was used 1611 times\n(23%). The Explain Code accounted for 5.5% (n=388) of usages and re-\nsulted in 34 follow-up questions. Lastly, the Help Write Code feature\nrepresented 4% (n=283) of usages, with 36 instances prompting 48\nfollow-up questions. Refer to Table 2 for a summary of descriptive\nstatistics that compare the usage count and usefulness rating of\nfeatures before and after the midterm update. Additionally, based\non the weekly surveys, students reported similar weekly average\nusages of CodeAid and course office hours (Figure 6a).\nIn order to further explore students’ usage patterns with CodeAid,\nwe turn to our thematic analysis of the 1749 usages which revealed\nfour major types of inquiries: (i) asking programming questions , (ii)\ndebugging code , (iii) writing code , and (iv) explaining code . Students\nused a combination of different features to perform the above in-\nquiries. In the sections below we report the frequency, nature of\nquestions, and students’ choices of features.\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\n6.1.1 Asking Programming Questions. The most frequent type of\ninquiry was programming questions with 36% (n=643) instances\nfrom all thematically analyzed data. We classified student questions\ninto three categories: cod",
      "summary": "编程求助是最常见的问询类型，占36%，涉及代码编写、调试和解释。",
      "source": "codeAID.pdf"
    },
    {
      "text": "nces\nfrom all thematically analyzed data. We classified student questions\ninto three categories: code and conceptual clarification 26% (n=453),\nfunction-specification queries 5% (n=96), and code execution probes\n5% (n=94). For code and conceptual clarification , students mostly\nused the General Question feature (n=323), inquiring conceptual in-\nformation about syntax, pointers, string operations, data structures,\ninput/output operations, system calls, shell programming, and com-\npilation tools. The Question from Code feature was also used (n=124)\nto understand or clarify the role,behaviour , and details of particular\nparts in their provided code snippets. For function-specific queries ,\nstudents mostly used the General Question feature, seeking insights\ninto a specific function’s usage, behaviour, arguments, and return\ntypes. For code execution probes , students predominantly utilized\ntheQuestion from Code feature (n=83), and occasionally the General\nQuestion for shorter code snippets (n=10). They used CodeAid simi-\nlar to a compiler to verify execution, evaluate output on particular\ninputs, and check for errors.\n6.1.2 Debugging Code. The second most frequent usage of CodeAid\nwas to debug code (32%). We discovered three major types of in-\nquiries: buggy code resolution 22% (n=385), problem source identifi-\ncation 7% (n=130), and error message interpretation 3% (n=50). For\nbuggy code resolution , students predominantly used the Help Fix\nCode (n=385) by providing their erroneou",
      "summary": "学生主要将CodeAid用于代码澄清和调试，分别占26%和32%。",
      "source": "codeAID.pdf"
    },
    {
      "text": " code resolution , students predominantly used the Help Fix\nCode (n=385) by providing their erroneous code, its intended be-\nhaviour, and sometimes, the encountered error message. Students\nalso used Question from Code (n=60) by providing their erroneous\ncode and asked how to fix the error. For problem source identifica-\ntion, students used Question from Code and specifically asked about\nwhy they were getting an error (n=108). Similarly, they used the\nGeneral Question (n=16) but for smaller contexts (e.g., one line of\ncodes, or shell programming commands), or by mistake (e.g., for-\ngetting to include their code by not using Question from Code ). The\nmost common type of inquiry here was to understand functional\ninconsistencies such as unexpected outputs, behaviours, warnings,\nand specific error messages. Students were seeking explanations\nfor why their code behaved differently than expected (e.g. \"why\ndoes my truncate function not change str?\" ). Lastly, for error mes-\nsage interpretation students used Question from Code (n=34) and\nGeneral Question (n=11) to understand syntax errors, Valgrind’s\nmemory-related error summaries, and command-line errors.\n6.1.3 Writing Code. The third most common usage of CodeAid\nwas assisting with writing code (24%). Students were asking for\nhigh-level coding guidance 13% (n=237), or direct code solutions 10%\n(n=185). In the context of seeking high-level coding guidance , our\nthematic analysis reveals that students predominantly utilized the\nGenera",
      "summary": "学生主要使用Code Aid纠正错误代码、理解功能异常和解析错误信息，另有一些求助于编写代码。",
      "source": "codeAID.pdf"
    },
    {
      "text": "evel coding guidance , our\nthematic analysis reveals that students predominantly utilized the\nGeneral Question feature (n=206), followed by Question from Code\n(n=19) and Help Write Code (n=13). Typical inquiries were charac-\nterized by \"how-to\" questions, where students sought information\non appropriate functions for specific tasks, such as \"how to get the\nlength of a string?\" , or step-by-step guidance on specific behaviours,\nlike\"How do you check if a file exists?\" . When asking for direct code\nsolutions , students used General Question (n=73), followed by Help\nWrite Code , and Question from Code (n=39).6.1.4 Explaining Code. Lastly, students used CodeAid to explain\nthe starter code that was provided to them by the course staff 6%\n(n=97) using the Explain Code feature.\n6.2 RQ2: CodeAid’s Response Quality\nThis section reports results from the thematic analysis regarding\ncorrectness, helpfulness, and the extent to which responses directly\nrevealed code solutions. Additionally, we report student ratings\nregarding usefulness and their reasons corresponding to high and\nlow ratings.\n6.2.1 Overall Correctness and Helpfulness. Based on our thematic\nanalysis of 1,749 random samples, we found that the correctness\nrate was 79% (1,386 correct instances) and the helpfulness rate was\n86% (1,196 out of 1,386). Notably, after updating CodeAid, there\nwas an improvement in the quality of responses. Correctness of\nresponses increased from 74% (781 out of 1,057) to 87% (603 out of\n692), and th",
      "summary": "学生主要使用“通用问题”功能寻求代码帮助，正确率和帮助率分别为79%和86%。",
      "source": "codeAID.pdf"
    },
    {
      "text": "nses. Correctness of\nresponses increased from 74% (781 out of 1,057) to 87% (603 out of\n692), and their helpfulness rose from 83% (646 out of 781) to 91%\n(550 out of 603).\n6.2.2 Not Displaying Direct Code Solutions. The assistant succeeded\nin avoiding the display of direct code solutions. In response to 43% of\nqueries, CodeAid produced purely natural language answers which\nincluded conceptual explanations. For 24% of queries, it produced\npseudo-code, of which 16% were high-level and generic example\ncodes, while 6% were the pseudo-code that implemented a specific\nbehavior. These specific pseudo-codes, although indirect, might\nhave revealed the high-level ideas about implementing a particular\nbehavior that was required in an assignment. Furthermore, when\ndebugging code using CodeAid, it never displayed the fixed code\nand only recommended suggestions to fix minor syntax errors (16%)\nand semantic issues (8%). Similarly, the Help Fix Code never gener-\nated any code. However, the initial version of General Question and\nQuestion from Code produced generic, high-level example code in\n104 instances (6%) which did not directly implement any part of\nassignments and were similar to what students can find on websites\nlike Stack Overflow. Finally, in 37 instances (2%) these two features\ngenerated a short code solution (1-3 lines) to a specific behavior.\n6.2.3 General Question. Our thematic analysis of 733 randomly\nsampled usages of the General Question feature revealed 91% (n=668)\ncorrect ",
      "summary": "用户查询回复正确性提升至87%，帮助性提高到91%。",
      "source": "codeAID.pdf"
    },
    {
      "text": "nalysis of 733 randomly\nsampled usages of the General Question feature revealed 91% (n=668)\ncorrect and 84% (n=613) helpful responses. Based on student ratings,\nthe feature’s usefulness was rated highly at 4.04 (SD=1.30) on a 5-\npoint scale. Reasons associated with highly rated responses tended\nto report that the response was \"correct\" ,\"helpful\" ,\"concise\" , and\n\"clear\" , as evidenced by comments like \"explained my misunderstand-\ning perfectly\" . Conversely, when giving negative ratings, students\ntended to report that they were due to (i) incomplete or superfi-\ncial explanations, (ii) the absence of example code, (iii) irrelevant\nor unclear responses, or (iv) incorrect or misleading information\nespecially with more complex requests.\n6.2.4 Question from Code. Our thematic analysis of 467 randomly\nsampled Question from Code usages revealed a slightly lower accu-\nracy, with 66% (n=310) being correct and 55% (n=258) helpful. The\naverage rating for the usefulness of this feature’s responses was\n3.28 ( SD=1.57). Comments that correlated with highly-rated usages\nincluded reasons such as: (i) precisely identifying and locating er-\nrors in code, exemplified by feedback like, \"I had been staring at\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\nTable 2: Summary of usage count and average usefulness ratings for each feature, broken down by version (V1: pre-midterm\nupdate, V2: post-midterm update)\nFeature Type Count V1 Rating V1 Count V2 Rating V2\nGeneral Question 1648",
      "summary": "通用问题特征准确率为91%，帮助率为84%，总体评价高。代码提问特征准确率和帮助率分别为66%和55%，评价较低。",
      "source": "codeAID.pdf"
    },
    {
      "text": "e, V2: post-midterm update)\nFeature Type Count V1 Rating V1 Count V2 Rating V2\nGeneral Question 1648 𝑀=3.99,𝑆𝐷=1.34 1034𝑀=4.10,𝑆𝐷=1.32\nQuestion from Code 1526 𝑀=3.28,𝑆𝐷=1.57 433𝑀=3.27,𝑆𝐷=1.57\nHelp Fix Code 1348 𝑀=2.88,𝑆𝐷=1.61 263𝑀=2.38,𝑆𝐷=1.51\nExplain Code 296 𝑀=4.19,𝑆𝐷=1.26 92𝑀=4.16,𝑆𝐷=1.15\nHelp Write Code 98 𝑀=3.38,𝑆𝐷=1.62 185𝑀=3.25,𝑆𝐷=1.52\nthe code for so long. sometimes you just need an extra set of eyes.\" ,\n(ii) providing detailed and accurate answers, and (iii) confirming\nthat the code compiles correctly. Student comments associated with\nlower ratings mentioned reasons like (i) being incorrect, incomplete,\nor suggesting redundant code changes, (ii) vaguely and poorly ex-\nplaining responses, and (iii) CodeAid’s inability to understand the\ncode the student had provided.\n6.2.5 Help Fix Code. Our thematic analysis of 340 instances of Help\nFix Code indicated 63% (n=214) correct responses, with 42% (n=142)\nthat were deemed helpful. The average rating of this feature was\nlower than other features at 2.67 (SD=1.55). Looking at the in-situ\nfeedback, when students rated this feature highly, they mentioned\nreasons such as providing helpful fix suggestions, correctly explain-\ning errors (e.g., \"it did a good job of explaining what was wrong\" ),\nor confirming the absence of errors and suggesting external issues.\nHowever, the feature was occasionally deemed notuseful. Lower\nratings were often associated with feedback that pointed out inac-\ncurate or irrelevant suggestions or misinter",
      "summary": "V2版中，“帮助修复代码”功能的评分下降，从2.38提高到2.67。",
      "source": "codeAID.pdf"
    },
    {
      "text": "e often associated with feedback that pointed out inac-\ncurate or irrelevant suggestions or misinterpretations of the code’s\nintent. Several students reported in the weekly surveys and inter-\nviews that they favoured the updated visual annotations for this\nfeature and mentioned \"now I can see where to fix the code,\" and\n\"it highlights areas I can fix in red, which is visually very helpful\".\nHowever, they also reported challenges for more complex coding\ntasks introduced at the end of the course. One participant (S21)\nreported CodeAid became \"more difficult to use for longer codes\" and\ncould not understand the \"interactions between multiple files. \"\n6.2.6 Explain Code. From the thematic analysis of 95 randomly\nsampled Explain Code usages, we discovered that 95% (90 out of 95)\nof the explanations were accurate and perceived beneficial when\nthey were correct. In terms of usefulness rating, the feature was well-\nreceived by students, obtaining an average rating of 4.17 ( SD=1.21).\nHighly rated responses of this feature were linked to reasons such\nas being \"accurate\" , or providing \"a useful breakdown of the code\" as\nwell as helping them in code review and double-checking their code.\nReasons that correspond to lower ratings mentioned explanations\nbeing \"inaccurate\" ,\"too short\" , or that it \"did not tell anything new\nabout the code\"\n6.2.7 Help Write Code. From the thematic analysis of 77 instances\nofHelp Write Code , the feature predominantly produced correct\n(92%) and helpful (82%",
      "summary": "视觉标注受学生欢迎，但长代码和多文件任务使用困难。解释代码功能准确且有益，但有时解释过短或不新。帮助编写代码大多正确且有用。",
      "source": "codeAID.pdf"
    },
    {
      "text": "f 77 instances\nofHelp Write Code , the feature predominantly produced correct\n(92%) and helpful (82%) responses. In 53% of cases, CodeAid gener-\nated the exact solution of a requested behavior and in 32% (n=25)\nit generated pseudo-code for a high-level example. The feature\nreceived an average usefulness rating of 3.29 ( SD=1.56). Several\nstudents that rated the feature highly, tended to report that thefeature was useful in initiating coding tasks by breaking it into\nsmaller bits. Responses that were poorly rated included reasons\nsuch as generating incomplete or irrelevant answers.\n6.3 RQ3: Students Perspectives and Concerns\nThis section presents students’ experiences with CodeAid across its\nspectrum, and broader perspectives on AI programming assistants.\n6.3.1 Accessibility and Convenience. Many students appreciated\nCodeAid’s 24/7 availability, with one noting, \"I like that it’s always\nthere if I need any help. \" They highlighted the private space it offers\nwhere they can \"ask a lot of questions\" without \"having to talk to a\nhuman who will judge\" them. Students highlighted CodeAid’s role\nas a crucial supplementary resource to assist with coding tasks,\nwith a student commenting, \"It helped me solve issues with my code\nthat I wouldn’t have been able to figure out on my own. \"\n6.3.2 Contextual Assistance. Students appreciated CodeAid’s abil-\nity to provide \"faster access to relevant knowledge\" by offering con-\ntextually relevant assistance and \"specific solutions\" that are \"more",
      "summary": "CodeAid 提供了77%正确且有帮助的代码建议，学生认为其便于访问、提供即时辅助并保持隐私。",
      "source": "codeAID.pdf"
    },
    {
      "text": "nt knowledge\" by offering con-\ntextually relevant assistance and \"specific solutions\" that are \"more\nconcise.\" They compared CodeAid to search engines where they\n\"can’t paste code into,\" and mentioned \"I like that I can word ques-\ntions how I think about them rather than thinking about what the\nheader of the most relevant stack overflow post will be.\" Students\nfound CodeAid’s responses tailored to the context of the course\nrequirements, with S10 highlighting that \"CodeAid was more related\nto our course, ChatGPT sometimes used functions that were not used\nin the course. \" Negative experiences included when \"the AI did not\nunderstand what [they] asked\" in which they had to search online\n(S12, S13), or the limits placed on input length.\n6.3.3 Learning and Dependency. Some students expressed that\nCodeAid has deepened their understanding, noting it \"explains\nthings more deeply for someone who is trying to learn\" (S9) and of-\nfers\"a new way to learn code.\" However, some students preferred\nindirect responses to enable deeper engagement: \"I would like a\nhint rather than the answer. \" Although some students like S14 felt\nthat they \"over-relied on it too much rather than thinking\" , many\nstudents displayed signs of self-regulation. They \"never tried to get\nthe system to show the solution\" (S2), \"did not use the fix code feature\"\n(S4), or \"ask[ed] too general questions\" (S7) so they could learn.\n6.3.4 Trust and Reliability. Many students recognized CodeAid’s\nutility, comparing its accur",
      "summary": "CodeAid 提供针对性帮助，但也有理解偏差和输入限制等问题。",
      "source": "codeAID.pdf"
    },
    {
      "text": " learn.\n6.3.4 Trust and Reliability. Many students recognized CodeAid’s\nutility, comparing its accuracy to Teaching Assistants: \"80% accu-\nrate answers, similar to TA.\" Students acknowledged the utility of\nCodeAid’s assistance in specific contexts, finding it more accurate\non simple questions. Some pointed out CodeAid’s confident tone\nwhen producing wrong answers, as noted by a student: \"it can lie\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\nto you, and still sound confident.\" In terms of trust, some found it\nsuperior, noting it seemed \"like a person who knows everything,\"\nwhile others expressed that they \"don’t trust a computer to give\n[them] accurate responses. \" Of interest, S13 noted that they trusted\nCodeAid more than Google, \"just because it was part of the course\"\nand endorsed by the instructor.\n6.3.5 Reasons for Not Using CodeAid. Several themes emerged\nwhen students explained instances when they did not use CodeAid.\nThe primary reason was a perceived \"lack of need, \" as many found\nexisting course materials \"sufficient\" or the coursework easy. Some\nwere either unaware of CodeAid or forgot to use it. Students also\ncited a preference for existing resources like GDB debugger, Stack\nOverflow, and Q&A discussion boards. A few favoured ChatGPT’s\nGPT-4 version for its ease and versatility. Personal desire for self-\nreliance was also a reason, with statements like \"I enjoy finding\nsolutions by ",
      "summary": "摘要：CodeAid编程助手被学生认可，但信任度参差不齐，使用情况因个人需求和偏好而异。",
      "source": "codeAID.pdf"
    },
    {
      "text": "nal desire for self-\nreliance was also a reason, with statements like \"I enjoy finding\nsolutions by myself\" . Skepticism towards AI-generated content and\npast negative experiences also reduced trust in the tool. Some stu-\ndents preferred to consult friends, and several students mentioned\nthe mandatory feedback as a reason for not using CodeAid.\n6.3.6 Comparing CodeAid with ChatGPT. We conducted a fully\nanonymous post-course survey to ask students about their usage\nof ChatGPT during the course, despite the course policy to avoid\nits use. Of the 200 respondents, 23% exclusively used CodeAid, 38%\nused both CodeAid and ChatGPT, and 19% only used ChatGPT.\nThe number of students who used ChatGPT \"sometimes,\" \"often,\"\nor\"a lot\" was 90, compared to 66 students for CodeAid. Among\nthe reasons for not using ChatGPT were satisfaction with existing\nresources, concerns over academic integrity, and doubts about its\nreliability. Comparatively, students appreciated ChatGPT’s user-\nfriendly interface, greater character limit, and free-form editing.\nThey found it useful for handling complex inputs with \"multiple\nparts\" and\"using any format\" . ChatGPT was favoured for offering\nin-depth code reviews, generating more comprehensive answers,\nand producing code examples. When it came to learning about C\nprogramming concepts, students who used both tools reported a\nhigher learning experience with ChatGPT. However, some students\nthat used ChatGPT expressed that the direct solutions generated\nby ChatGPT",
      "summary": "CodeAid使用率低于ChatGPT，学生更偏好后者提供的深度代码审查和全面答案。",
      "source": "codeAID.pdf"
    },
    {
      "text": "T. However, some students\nthat used ChatGPT expressed that the direct solutions generated\nby ChatGPT was \"not good for learning\" (S10) or that \"ChatGPT\nsometimes does a bit too much\". Similarly, S21, \"I don’t think that\nI’m learning as much as spending time to fix [the code] myself.\"\nConversely, students felt that they learn more using CodeAid \"since\nit’s targeted towards CS students and explanations are more technical\nand they do make you think\" .\n6.3.7 Future Integration of AI Coding Tools. Most students reported\nthat they will continue using AI coding tools, expressing that AI\nhelps them \"work more efficiently, \" and understand coding concepts\nin a summarized way. Several envisioned using AI to \"create the\nskeleton code\" of their projects, \"optimize [their] code, \" and handle the\n\"tedious programming tasks that are not too complicated\" for them.\nOthers wished to have these tools integrated into their coding\nenvironment. One student was eager to take \"a class about writing\nprompts to get more accurate answers.\" However, some students\ndid not want to integrate AI coding tools in the near future. One\nmentioned limitations such as not being effective in debugging\n\"without seeing the entire program, \" and another student mentionedthat AI should not be used for learning due to its \"confident but\nincorrect answers\" and\"that it does not encourage learning. \" Lastly, a\nstudent highlighted the essence of learning as \"figuring things out\non your own by googling, manually fixing bugs,",
      "summary": "部分学生认为ChatGPT直接提供答案不利于学习，而CodeAid则有助于理解编程概念。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ghted the essence of learning as \"figuring things out\non your own by googling, manually fixing bugs, looking at tutorials,\netc. \"\n7 EDUCATOR INTERVIEWS\nTo gain further insights into how educators would use CodeAid\nin their programming classes, we conducted semi-structured inter-\nviews with eight computing educators (T1 - T8). Educators were\nfrom six countries, including Germany (T6), India (T1), Jordan (T3),\nNew Zealand (T2), the Netherlands (T8), and the USA (T4, T5, T7).\nThese educators were actively engaged in teaching undergraduate-\nlevel programming courses. Six of them (T1, T3, and T5-T8) had\nover ten years of teaching experience, one had 5-10 years (T2), and\nanother had 3 years (T4). Most were also engaged in computer\nscience education (CSEd) research. The interviews began by ex-\nploring the educators’ backgrounds and their current challenges\nand strategies, especially around students’ utilization of LLM-based\ncoding tools like ChatGPT and Github Copilot. Subsequently, we\nintroduced our pedagogical AI coding assistant, discussing its capa-\nbilities and insights gathered from our semester-long deployment\nas summarized in Section 6. The conversation then shifted to the\neducators’ opinions on our tool: what they liked and disliked, their\npedagogical and ethical considerations regarding its use, their inter-\nest and requirements for integrating it into their courses, and how\nthey perceived it relative to tools like ChatGPT. Each interview, for\nwhich informed consent was ob",
      "summary": "八位来自六个国家的教育者对CodeAid进行了评价和建议。",
      "source": "codeAID.pdf"
    },
    {
      "text": "\nthey perceived it relative to tools like ChatGPT. Each interview, for\nwhich informed consent was obtained, was conducted over Zoom\nand lasted approximately one hour.\n7.1 RQ4: Educator’s Perspectives\nEducators expressed varying degrees of concern about the impact\nof AI coding tools like ChatGPT on the classes they taught. While\nT5 didn’t see ChatGPT as a significant issue for advanced Computer\nScience courses, there was a general agreement about its potential\nthreat to introductory programming classes. Notably, T1 mentioned\n\"I would encourage students to use a tool that respects that there’s a\nlearner at the other end, not ChatGPT\" .\n7.1.1 General Impressions. Educators generally held favourable\nimpressions of CodeAid. T3 emphasized CodeAid’s pedagogical\napproach, stating that it offered an \"honest way of using ChatGPT, \" ,\nparticularly for students keen on academic integrity. Similarly, T4\nmentioned that CodeAid was \"the most sensible path\" and a safer\nalternative to \"a completely unsafe and unmoderated\" tool like Chat-\nGPT. Similarly, T5 compared CodeAid to an \"excellent TA\" that\nprompts students to think critically rather than offering direct an-\nswers. Furthermore, T2 envisioned that CodeAid can greatly assist\nstudents in a flipped classroom setting, help students arrive at class\nmore prepared, offer moments for self-reflection on lecture material,\nand support them in tackling assignments.\n7.1.2 Perceptions on Pseudo-Code Usage. Most educators appreci-\nated the design of ",
      "summary": "教育者对ChatGPT等AI编程工具看法不一，普遍认为CodeAid更有利于教学。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ing assignments.\n7.1.2 Perceptions on Pseudo-Code Usage. Most educators appreci-\nated the design of the pseudo-code feature, especially the line-by-\nline on-hover explanations. T6 liked the way it \"provides structure\"\nwithout \"giving away the difficulty of the syntax. \" Similarly, T2 and\nT4 mentioned how it reduces cognitive load by focusing on overall\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\nlogic. T4 expressed that \"hiding the syntax\" helps with students’\nmeta-cognitive skills. From an ethical standpoint, T1 claimed that\nshowing pseudo-code was even \"better than Google\" for certain\nqueries, as opposed to viewing \"precise solutions available on Stack\nOverflow\" . However, T3 expressed slight concerns, particularly for\nupper-level courses, where revealing the algorithm via pseudo-code\nwould be detrimental.\n7.1.3 Concerns about Incorrect Responses and Misuses. Despite\npositive impressions, educators expressed various concerns. After\nviewing the results from our thematic analysis, T1 pointed out\nthe risk of incorrect responses, especially for students whose fun-\ndamentals are poor. T3 raised concerns about students \"trusting\nwhatever the AI says\" . T1 suggested that these tools should \"build up\nstudents’ ability to critique\" LLM-generated responses. As a solution,\nT1 and T3 suggested including mandatory tutorials with quizzes\nbefore students can use CodeAid. T5 asked for more transparency\nby having CodeAid display recent incorrect responses for each of\nth",
      "summary": "伪代码功能受教育者好评，但存在误用和算法暴露的担忧。",
      "source": "codeAID.pdf"
    },
    {
      "text": ". T5 asked for more transparency\nby having CodeAid display recent incorrect responses for each of\nthe features. T3 mentioned that the inaccuracies of the Help Fix\nCode feature could mislead students by highlighting incorrect lines,\nand suggested the feature could instead highlight potentially in-\ncorrect lines and ask self-reflective questions from students like\n\"Are you sure this line is doing [X]?\" . Additionally, T1, T4, T6, and\nT7 voiced worries about misusing or abusing CodeAid through\nrepetitive queries and suggested throttling usage as a potential\nsolution.\n7.1.4 Keeping Students from Switching to ChatGPT. Many educa-\ntors felt that CodeAid should be designed in a way to keep students\nfrom switching to ChatGPT which \"was just a click away\" . T7 men-\ntioned that \"I can’t prevent students from using ChatGPT, but if I\ncan get more students to use this tool instead of ChatGPT, then that’s\nbetter\" . As a way to attract students, T2 suggested \"creating an\nall-encompassing tool\" . Similarly, T7 and T8 suggested including a\ncomplete code editor with code execution capabilities to make it\neasier for students to remain engaged with CodeAid rather than\ndefaulting to ChatGPT. Another recurring suggestion was revealing\ncode solutions after multiple failed attempts to prevent frustration.\nFor example, T1, T2, and T5 proposed gamifying the experience such\nas\"showing code could cost them some kind of points in the system\"\nor T7 mentioned to \"lock the system\" after showing code, asking",
      "summary": "教育者建议CodeAid增加透明度、限制滥用并提供完整代码编辑功能。",
      "source": "codeAID.pdf"
    },
    {
      "text": "m some kind of points in the system\"\nor T7 mentioned to \"lock the system\" after showing code, asking\nthe student to do something useful like explaining the answer. How-\never, T3 strongly favoured CodeAid’s pedagogical approach and\ndid not want CodeAid to reveal code solutions, asserting that \"if a\nTA is controlled to answer in an appropriate way and not show the\nsolution, then this tool should also be controlled\" . When discussing\nthe ability to customize CodeAid’s responses during a course, T4\nwas confronted with the dilemma that if they turned off a feature,\nthen students might default to ChatGPT.\n7.1.5 Pedagogical Customization. A recurrent theme centred on\nthe importance of customization by instructors. Both T3 and T4\nemphasized the need for instructors to have control over the types\nof responses generated by CodeAid for different types of questions.\nSpecifically, T3 wanted CodeAid to produce pseudo-code only for\nimplementation questions, and to merely offer hints for problem-\nsolving questions. On the other hand, T4 wanted to control when\npseudo-code was displayed and only enable it at the beginning ofthe course. T7 wanted to update CodeAid with a list of topics that\nhave been taught in class so that it would not use other complex\ntopics and functions when responding to students’ queries.\n7.1.6 Student Monitoring Dashboard. Another prevalent theme\nwas the need for instructor dashboards that monitor student in-\nteractions and track their queries. T2 highlighted that by tr",
      "summary": "教师希望定制CodeAid的回复方式，监控学生互动并跟踪查询。",
      "source": "codeAID.pdf"
    },
    {
      "text": "or dashboards that monitor student in-\nteractions and track their queries. T2 highlighted that by tracking\nstudents, we can see what type of questions they are asking, and\nwhat type of answers are being produced. This data could help\neducators in identifying gaps in their instruction, as evidenced by\nfrequently asked questions. Such insights might prompt them to\n\"step in and provide better examples\" . However, this monitoring\ncomes with its own set of challenges. While T6 suggested aggre-\ngated data could provide feedback, accessing individual data might\nbe restricted due to regulations such as the General Data Protection\nRegulation (GDPR). This poses a question on the balance between\npersonalization and privacy. Lastly, T8 mentioned a crucial point\nconcerning student anonymity and comfort. While recognizing the\npotential pedagogical benefits of understanding student queries,\nshe mentioned \"Students should not feel like someone is watching\nthem and they should feel the liberty to ask anything\" .\n8 BEYOND CODEAID: IMPLICATIONS FOR\nPEDAGOGICAL LLM-POWERED CODING\nASSISTANTS\nThe iterative development of CodeAid and insights gained from its\nsemester-long deployment enable us to propose design implications\nfor the broader design of AI assistants in educational contexts. We\nposition these implications within four main stages of a student’s\nhelp-seeking process with an AI assistant: 1) The decision to use the\nAI tool; 2) The formulation of a query; 3) The nature of response that\nis s",
      "summary": "监测学生互动可提升教学效果，但需平衡个性化与隐私。",
      "source": "codeAID.pdf"
    },
    {
      "text": " The decision to use the\nAI tool; 2) The formulation of a query; 3) The nature of response that\nis supplied; and 4) Actions needed once a response is received. Our\nresults point to four high-level design considerations, for each of\nthese stages, each with unique usability and educational trade-offs:\n•D1: Exploiting Unique Advantages of AI. For deciding\nwhen to use the tool, what is the role and unique advantages\nof an AI assistant compared to other available resources\nwithin the learning ecosystem?\n•D2: Designing the AI Querying Interface . What are the UI\nconsiderations for an AI assistant to allow users to formulate\nqueries/prompts in a way that balances user-friendliness\nwith meta-cognitive engagement?\n•D3: Balancing the Directness of AI Responses. How di-\nrect should the AI assistant’s responses be, so that it balances\ndirectness and learning engagement, and who should control\nthis balance?\n•D4: Supporting Trust, Transparency and Control. Once\na response from an AI assistant is received, what UI consid-\nerations are needed to ensure accuracy, trust, transparency,\nand control?\n8.1 D1: Exploiting Unique Advantages of AI\nAn initial stage of the help-seeking process is deciding what learn-\ning resource to use within the learning material ecosystem that\nmay be available to them. This leads to the first major design con-\nsideration of an AI coding assistant (Figure 7, D1): determining\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, Ma",
      "summary": "决定使用AI工具的时机及AI的独特优势。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ining\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\nFigure 7: Emerging design considerations and trade-offs within the design space of AI-powered assistants for educational\nsettings. Each consideration is based on a key stage in students’ help-seeking process.\nthe role, scope, and unique advantages of future educational AI\nassistants in relation to other educational resources, like TA office\nhours, discussion boards, textbooks, etc. In our study, students ap-\npreciated several features unique to AI assistants, such as the ability\nto interact with the tool in natural language, the tool’s ability to\nprovide contextual assistance, and tailored responses. More specific\nto CodeAid, students pinpointed unique advantages such as its\nstimulation of critical thinking (using pseudo-code), technical focus\non C programming (relevant to their course), and its capability\nto \"pull\" comprehensive documentation related to queries. Similar\nfeatures should be built within future tools.\nConsidering the rapidly expanding ecosystem of productivity-\nfocused AI tools, it is challenging to keep students in a learner-\ncentric AI tool. To address this issue, our results suggest designing\ncourse-specific AI assistants, for example using approaches such as\nretrieval augmented generation (RAG) to allow specific contextual\ninformation to be included in model responses [ 35]. These assistants\nshould be capable of (a) generating",
      "summary": "CodeAid研究：设计并部署基于LLM的编程助手，强调其独特优势。",
      "source": "codeAID.pdf"
    },
    {
      "text": "mation to be included in model responses [ 35]. These assistants\nshould be capable of (a) generating accurate, technically correct,\nand informative responses, including references to specific lecture\nnotes, and (b) allowing students to ask detailed questions about\ntheir course projects, assignments, and logistics. Furthermore, with\naccess to the curriculum, the AI assistants’ responses will align\nmore closely with students’ zone of proximal development [ 60],\nmaking them more relevant and beneficial for the students. Fu-\nture tools can also direct students to content on the web such as\nrelevant StackOverflow posts, similar to Bing Chat, and relevant\ndocumentation as illustrated in CodeAid, as well as providing ac-\ncess to instructor-verified practice exercises and sub-goal-labeled\nworked examples [40].\n8.2 D2: Designing the AI Querying Interface\nOnce a user has chosen to use an AI coding assistant, the next main\nstage will be to enter their query. In CodeAid this is done througha structured user interface, whereas in ChatGPT, users enter free-\nform input. In any future system, another major design considera-\ntion is how the querying interface should be designed, such that it\nbalances user-friendliness with meta-cognitive engagement (Figure\n7, D2). Some students in our study preferred the simplicity and free-\nform nature of ChatGPT, while educators appreciated CodeAid’s\nstructured design, and found that it promoted active engagement,\ncritical thinking, and thoughtful inquiry.\n",
      "summary": "AI助教应生成准确、技术正确且信息丰富的回复，同时促进学生的深层次学习。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ed design, and found that it promoted active engagement,\ncritical thinking, and thoughtful inquiry.\nFor instance, designers should decide (a) whether the assistant\nautomatically gathers context (like a plugin in an IDE) or requires\nmanual input from the user, (b) whether the assistant allows stu-\ndents to ask questions in a free-form manner, similar to interaction\nwith popular chat-based AI models, or requires input in a specific\nstructure and format, and (c) the assistant’s level of reactivity versus\nproactivity in identifying problems and facilitating help-seeking.\nThe trade-off to consider is that automatic context integration, free-\nform input methods, and proactive assistance may enhance usability\nand ease of use, but could potentially reduce opportunities for stu-\ndents to engage in meta-cognitive activities – such as self-reflection\nand asking well-formed questions that promote critical thinking\n– which are essential for success in learning programming [ 50].\nFuture research is also needed to evaluate the impact of proactive\nproblem identification and assistance, focusing on the design of\nminimally distracting assistants. Indeed, recent work by Prather\net al. revealed that students did not like being shown suggestions\nwhen they felt they did not need the help [51].\n8.3 D3: Balancing the Directness of AI\nResponses\nAfter formulating the question, the degree of control over the type\nand directness of the assistance is the next design consideration\n(Figure 7, D3). Accordin",
      "summary": "设计AI助手需平衡主动性和用户思考、自我反思的空间。",
      "source": "codeAID.pdf"
    },
    {
      "text": " the type\nand directness of the assistance is the next design consideration\n(Figure 7, D3). According to our study, students and educators had\ndiverse views and requirements regarding the level of directness\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\nand scaffolding an AI assistant should offer. Students in our study\nexhibited varying needs: some sought explicit example code, others\npreferred subtle hints, and there were instances where they simply\nwanted the AI to provide direct solutions. Furthermore, educators\nhighlighted the importance of customization options, allowing them\nto tailor the AI’s level of assistance, such as restricting the display of\npseudo-code for specific queries or during certain course segments,\nto better align with pedagogical goals. This introduces an important\ntrade-off: finding the right balance between sufficient scaffolding for\ncritical learning and minimizing frustration, while also considering\nthe degree of autonomy learners should have in personalizing their\nlevel of scaffolding.\nIf the assistant is too direct and students have high autonomy\nover selecting their desired level of scaffolding, students might\nmiss out on critical learning opportunities tailored to their zone of\nproximal development. This might negatively impact skill devel-\nopment and self-efficacy. Conversely, indirect responses can risk\ndiscouraging students if they feel overwhelmed, unsupported, and\nnot making progress.\nTo promote deeper cognitive engagem",
      "summary": "学生和教师对AI助手直接性有不同的需求和观点。",
      "source": "codeAID.pdf"
    },
    {
      "text": " if they feel overwhelmed, unsupported, and\nnot making progress.\nTo promote deeper cognitive engagement and ensure progress,\nfuture tools might, as a last resort, display generated code but\nlock the AI tool until students complete a specific learning activity.\nThis could involve the AI assistant highlighting critical sections\nof the code and prompting students to answer comprehension\nquestions about these parts. Additionally, future AI tools could\nfoster independent problem-solving using the Socratic Method [57]\nand transforming code generation requests into a series of problem-\nsolving questions. With each correct response, the tool would reveal\nthe code segment corresponding to that question.\nFurthermore, since code examples are a crucial learning resource\n[38], future AI assistants can differentiate between example code\nand direct solutions. Our thematic analysis revealed that a major-\nity of queries were asking for code and conceptual clarifications,\nfunction-specification queries, error message interpretation, and\nhigh-level coding guidance. Consequently, future tools could be\ndesigned to display example code in response to queries not directly\nrelated to course assessments.\n8.4 D4: Supporting Trust, Transparency and\nControl\nUpon receiving a response from the AI assistant, users must eval-\nuate its accuracy and helpfulness, and if necessary, provide more\ninformation to steer the AI towards a more suitable answer. Recent\nstudies highlight the challenges in user interactio",
      "summary": "AI工具未来可能锁定直到学生完成特定活动，以促进更深入的认知参与和确保进度。",
      "source": "codeAID.pdf"
    },
    {
      "text": "er the AI towards a more suitable answer. Recent\nstudies highlight the challenges in user interactions with gener-\native AI models due to their low transparency and predictability\n[2]. However, these challenges are compounded in educational AI\nassistants, which, like CodeAid, may be designed to provide scaf-\nfolded, indirect responses without directly revealing solutions. Our\nthematic analysis showed how CodeAid’s responses were some-\ntimes incorrect or unhelpful. As such, students seeking to verify\nCodeAid’s responses often had to write and test a small program\nbased on the provided suggestions. In contrast, students using a\ntool that provides direct responses, such as ChatGPT, could im-\nmediately access and run the generated code for verification. Any\nunpredictability within a learning context could erode trust in an\nAI coding assistant.This points to a fourth design consideration (Figure 7, D4): given\nthe indirect nature of responses in educational AI assistants, how\ncan we maximize user experience, efficiency, and predictability of\nobtaining a helpful response. This could involve displaying the\nAI’s assumptions on input queries, engaging students in verifying\nthem, and enabling feedback mechanisms to ensure high-quality\nresponses. While such techniques could lead to higher accuracy,\nthey may complicate user interaction and potentially overwhelm\nstudents. The best method for validating responses after generation\nis an open question, and requires targeted future work.\nOne p",
      "summary": "教育AI助手的间接响应方式可能降低用户信任与效率。",
      "source": "codeAID.pdf"
    },
    {
      "text": " validating responses after generation\nis an open question, and requires targeted future work.\nOne potential approach for improving accuracy and user trust\nis the addition of a Sufficiency Check step similar to CodeHelp\n[37] before generating the final response. This sufficiency check\nwould actively engage users in refining the AI’s understanding by\nprompting users about missing context or clarifying uncertainties.\nMoreover, future tools could enhance the validation of scaffolded\nresponses by including code execution capabilities and enabling\nusers to interact with and test the underlying code generated by the\nAI, without directly revealing it. This interaction could be facilitated\nthrough a line-by-line execution interface, similar to PythonTutor\n[19], and can use a black-box approach or represent a pseudo-code\nversion.\n9 LIMITATIONS AND FUTURE WORK\nOur findings from the deployment of CodeAid are contextualized\nwithin a second-year C programming course at a single university,\nwhich may not directly generalize to other courses and contexts.\nFurthermore, the perceived accuracy and utility of CodeAid, which\nin turn influenced students’ trust and engagement, were heavily\ntied to the OpenAI models we used. The initial release of CodeAid\nwith the\ncode-davinci-002 model from 2021 could have adversely\nshaped students’ perceptions, particularly when compared to the\nsubsequently adopted\ngpt-3.5-turbo model from 2023. This factor\nmight account for some of CodeAid’s inaccurate responses",
      "summary": "代码生成后验证是一个开放问题，需未来研究解决。通过增加必要性检查和代码执行能力改进准确性与信任度。",
      "source": "codeAID.pdf"
    },
    {
      "text": "\ngpt-3.5-turbo model from 2023. This factor\nmight account for some of CodeAid’s inaccurate responses and the\ndecline in student usage we observed over time. Additionally, the\nperformance of these models varies between different program-\nming languages [ 63], or even different code-related tasks (e.g. code\nexplanation, fixing, or generation). For future work, we plan to\nrun longitudinal studies to investigate how using pedagogical AI\ncoding assistants affects long-term learning outcomes, competency,\nself-regulation abilities, and frustration levels in educational en-\nvironments. More controlled studies could also be performed to\ndirectly compare these learning outcomes to the use of unrestricted\nLLMs like ChatGPT.\nMoreover, our results indicate that women used CodeAid more\noften than men. Future research should investigate additional demo-\ngraphic factors and examine how this finding connects to existing\nresearch on gender effects in the use of resources like TA office\nhours and online discussion Q&A forums [15].\nFinally, the design considerations for AI assistants in educational\ncontexts, as discussed in this paper, require further exploration.\nConsidering the variability of educational contexts and the evolving\nnature of AI technologies, additional dimensions and trade-offs\nmight emerge.\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\n10 CONCLUSION\nThis paper presents the iterative design of CodeA",
      "summary": "CodeAid模型设计与部署，探讨其对学生编程学习的影响。",
      "source": "codeAID.pdf"
    },
    {
      "text": ", May 11–16, 2024, Honolulu, HI, USA\n10 CONCLUSION\nThis paper presents the iterative design of CodeAid, an AI-powered\ncoding assistant equipped with guardrails to prevent it from gen-\nerating direct solutions in response to student queries. Instead,\nCodeAid provides scaffoldings, such as interactive pseudo-code, to\nfoster engaging learning experiences. To understand how students\nutilize an AI-powered tutor and the broader implications of AI in\nscaling instructional expertise, we conducted a semester-long de-\nployment of CodeAid in a programming class with 700 students. Our\ndata collection included: (i) approximately 8,000 usages, coupled\nwith students’ feedback on the responses’ usefulness; (ii) a thematic\nanalysis of 1,749 usages in terms of correctness, helpfulness, and\nthe extent of revealing direct solutions; (iii) weekly surveys and 22\nsemi-structured interviews with students; and (iv) a final anony-\nmous survey focusing on the use of ChatGPT. Additionally, we\ninterviewed eight programming educators to gather insights on\nthe future of AI-powered educational tools. By synthesizing results\nfrom these diverse sources, we identified four high-level design\nconsiderations, including key trade-offs, in the emerging design\nspace of educational AI tools. It is our hope the the results from our\nstudy, along with the broader design considerations which we have\ndiscussed, will help guide the future development of AI-powered\ncodding assistants.\nREFERENCES\n[1]Joe Michael Allen, Kelly ",
      "summary": "CodeAid：AI辅助编程学习的设计与应用研究",
      "source": "codeAID.pdf"
    },
    {
      "text": "ide the future development of AI-powered\ncodding assistants.\nREFERENCES\n[1]Joe Michael Allen, Kelly Downey, Kris Miller, Alex Daniel Edgcomb, and Frank\nVahid. 2019. Many Small Programs in CS1: Usage Analysis from Multiple Univer-\nsities. In 2019 ASEE Annual Conference & Exposition \" . ASEE Conferences, Tampa,\nFlorida, 1–13. https://peer.asee.org/33084.\n[2]Saleema Amershi, Dan Weld, Mihaela Vorvoreanu, Adam Fourney, Besmira Nushi,\nPenny Collisson, Jina Suh, Shamsi Iqbal, Paul N Bennett, Kori Inkpen, et al .2019.\nGuidelines for human-AI interaction. In Proceedings of the 2019 chi conference on\nhuman factors in computing systems . 1–13.\n[3]Brett A Becker, Paul Denny, James Finnie-Ansley, Andrew Luxton-Reilly, James\nPrather, and Eddie Antonio Santos. 2023. Programming Is Hard-Or at Least It\nUsed to Be: Educational Opportunities and Challenges of AI Code Generation. In\nProceedings of the 54th ACM Technical Symposium on Computer Science Education\nV. 1. 500–506.\n[4]Andrea J Bingham and Patricia Witkowsky. 2021. Deductive and inductive\napproaches to qualitative data analysis. Analyzing and interpreting qualitative\ndata: After the interview (2021), 133–146.\n[5]Rishi Bommasani, Drew A. Hudson, Ehsan Adeli, Russ Altman, Simran Arora,\nSydney von Arx, Michael S. Bernstein, Jeannette Bohg, Antoine Bosselut, Emma\nBrunskill, Erik Brynjolfsson, Shyamal Buch, Dallas Card, Rodrigo Castellon,\nNiladri Chatterji, Annie Chen, Kathleen Creel, Jared Quincy Davis, Dora Dem-\nszky, Chris Donahue, Moussa",
      "summary": "研究AI编程助手对未来教育的影响与挑战。",
      "source": "codeAID.pdf"
    },
    {
      "text": "dri Chatterji, Annie Chen, Kathleen Creel, Jared Quincy Davis, Dora Dem-\nszky, Chris Donahue, Moussa Doumbouya, Esin Durmus, Stefano Ermon, John\nEtchemendy, Kawin Ethayarajh, Li Fei-Fei, Chelsea Finn, Trevor Gale, Lauren\nGillespie, Karan Goel, Noah Goodman, Shelby Grossman, Neel Guha, Tatsunori\nHashimoto, Peter Henderson, John Hewitt, Daniel E. Ho, Jenny Hong, Kyle Hsu,\nJing Huang, Thomas Icard, Saahil Jain, Dan Jurafsky, Pratyusha Kalluri, Siddharth\nKaramcheti, Geoff Keeling, Fereshte Khani, Omar Khattab, Pang Wei Koh, Mark\nKrass, Ranjay Krishna, Rohith Kuditipudi, Ananya Kumar, Faisal Ladhak, Mina\nLee, Tony Lee, Jure Leskovec, Isabelle Levent, Xiang Lisa Li, Xuechen Li, Tengyu\nMa, Ali Malik, Christopher D. Manning, Suvir Mirchandani, Eric Mitchell, Zanele\nMunyikwa, Suraj Nair, Avanika Narayan, Deepak Narayanan, Ben Newman,\nAllen Nie, Juan Carlos Niebles, Hamed Nilforoshan, Julian Nyarko, Giray Ogut,\nLaurel Orr, Isabel Papadimitriou, Joon Sung Park, Chris Piech, Eva Portelance,\nChristopher Potts, Aditi Raghunathan, Rob Reich, Hongyu Ren, Frieda Rong,\nYusuf Roohani, Camilo Ruiz, Jack Ryan, Christopher Ré, Dorsa Sadigh, Shiori\nSagawa, Keshav Santhanam, Andy Shih, Krishnan Srinivasan, Alex Tamkin, Ro-\nhan Taori, Armin W. Thomas, Florian Tramèr, Rose E. Wang, William Wang,\nBohan Wu, Jiajun Wu, Yuhuai Wu, Sang Michael Xie, Michihiro Yasunaga, Ji-\naxuan You, Matei Zaharia, Michael Zhang, Tianyi Zhang, Xikun Zhang, Yuhui\nZhang, Lucia Zheng, Kaitlyn Zhou, and Percy Liang. 2021. On t",
      "summary": "2021年，多位知名学者共同发布研究报告。",
      "source": "codeAID.pdf"
    },
    {
      "text": "hang, Tianyi Zhang, Xikun Zhang, Yuhui\nZhang, Lucia Zheng, Kaitlyn Zhou, and Percy Liang. 2021. On the Opportunities\nand Risks of Foundation Models. https://doi.org/10.48550/ARXIV.2108.07258\n[6]Joel Brandt, Philip J Guo, Joel Lewenstein, Mira Dontcheva, and Scott R Klemmer.\n2009. Two studies of opportunistic programming: interleaving web foraging,\nlearning, and writing code. In Proceedings of the SIGCHI Conference on HumanFactors in Computing Systems . 1589–1598.\n[7]Carla E. Brodley, Benjamin J. Hescott, Jessica Biron, Ali Ressing, Melissa Peiken,\nSarah Maravetz, and Alan Mislove. 2022. Broadening Participation in Comput-\ning via Ubiquitous Combined Majors (CS+X). In Proceedings of the 53rd ACM\nTechnical Symposium on Computer Science Education - Volume 1 (Providence, RI,\nUSA) (SIGCSE 2022) . Association for Computing Machinery, New York, NY, USA,\n544–550. https://doi.org/10.1145/3478431.3499352\n[8]Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan,\nPrafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda\nAskell, et al .2020. Language Models are Few-shot Learners. Advances in neural\ninformation processing systems 33 (2020), 1877–1901.\n[9]Peter Brusilovsky, Barbara J Ericson, Cay S Horstmann, and Christian Servin.\n2023. The Future of Computing Education Materials. (2023).\n[10] Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira\nPinto, Jared Kaplan, Harri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman,\net al.2021",
      "summary": "基础模型机遇与风险、编程融合课程及语言模型研究综述。",
      "source": "codeAID.pdf"
    },
    {
      "text": " Oliveira\nPinto, Jared Kaplan, Harri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman,\net al.2021. Evaluating large language models trained on code. arXiv preprint\narXiv:2107.03374 (2021).\n[11] Jonathan E Collins. 2023. Policy Solutions: Policy questions for ChatGPT and\nartificial intelligence. Phi Delta Kappan 104, 7 (2023), 60–61.\n[12] Paul Denny, Viraj Kumar, and Nasser Giacaman. 2023. Conversing with copilot:\nExploring prompt engineering for solving cs1 problems using natural language. In\nProceedings of the 54th ACM Technical Symposium on Computer Science Education\nV. 1. 1136–1142.\n[13] Paul Denny, Andrew Luxton-Reilly, Ewan Tempero, and Jacob Hendrickx. 2011.\nCodeWrite: Supporting Student-Driven Practice of Java. In Proceedings of the\n42nd ACM Technical Symposium on Computer Science Education (Dallas, TX, USA)\n(SIGCSE ’11) . Association for Computing Machinery, New York, NY, USA, 471–476.\nhttps://doi.org/10.1145/1953163.1953299\n[14] Paul Denny, James Prather, Brett A Becker, James Finnie-Ansley, Arto Hellas,\nJuho Leinonen, Andrew Luxton-Reilly, Brent N Reeves, Eddie Antonio Santos,\nand Sami Sarsa. 2023. Computing Education in the Era of Generative AI. arXiv\npreprint arXiv:2306.02608 (2023).\n[15] Augie Doebling and Ayaan M Kazerouni. 2021. Patterns of academic help-seeking\nin undergraduate computing students. In Proceedings of the 21st Koli Calling\nInternational Conference on Computing Education Research . 1–10.\n[16] James Finnie-Ansley, Paul Denny, Brett A. Becker, An",
      "summary": "多篇研究探讨了大型语言模型在编程教育中的应用与影响。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ce on Computing Education Research . 1–10.\n[16] James Finnie-Ansley, Paul Denny, Brett A. Becker, Andrew Luxton-Reilly, and\nJames Prather. 2022. The Robots Are Coming: Exploring the Implications of\nOpenAI Codex on Introductory Programming. In Proceedings of the 24th Aus-\ntralasian Computing Education Conference (Virtual Event, Australia) (ACE ’22) .\nAssociation for Computing Machinery, New York, NY, USA, 10–19. https:\n//doi.org/10.1145/3511861.3511863\n[17] James Finnie-Ansley, Paul Denny, Andrew Luxton-Reilly, Eddie Antonio Santos,\nJames Prather, and Brett A Becker. 2023. My AI Wants to Know if This Will\nBe on the Exam: Testing OpenAI’s Codex on CS2 Programming Exercises. In\nProceedings of the 25th Australasian Computing Education Conference . 97–104.\n[18] Zhikai Gao, Sarah Heckman, and Collin Lynch. 2022. Who Uses Office Hours?\nA Comparison of In-Person and Virtual Office Hours Utilization. In Proceedings\nof the 53rd ACM Technical Symposium on Computer Science Education - Volume\n1(Providence, RI, USA) (SIGCSE 2022) . Association for Computing Machinery,\nNew York, NY, USA, 300–306. https://doi.org/10.1145/3478431.3499334\n[19] Philip J Guo. 2013. Online python tutor: embeddable web-based program visual-\nization for cs education. In Proceeding of the 44th ACM technical symposium on\nComputer science education . 579–584.\n[20] Mark Guzdial. 2023. Scaffolding to Support Humanities Students Programming in\na Human Language Context. In Proceedings of the 2023 Conference on Innovation\n",
      "summary": "这些论文探讨了编程教育中的工具和技术应用。",
      "source": "codeAID.pdf"
    },
    {
      "text": "udents Programming in\na Human Language Context. In Proceedings of the 2023 Conference on Innovation\nand Technology in Computer Science Education V. 2 (Turku, Finland) (ITiCSE\n2023) . Association for Computing Machinery, New York, NY, USA, 579–580.\nhttps://doi.org/10.1145/3587103.3594157\n[21] Björn Hartmann, Daniel MacDougall, Joel Brandt, and Scott R Klemmer. 2010.\nWhat would other programmers do: suggesting solutions to error messages. In\nProceedings of the SIGCHI Conference on Human Factors in Computing Systems .\n1019–1028.\n[22] Andrew Head, Elena Glassman, Gustavo Soares, Ryo Suzuki, Lucas Figueredo,\nLoris D’Antoni, and Björn Hartmann. 2017. Writing reusable code feedback at\nscale with mixed-initiative program synthesis. In Proceedings of the Fourth (2017)\nACM Conference on Learning@ Scale . 89–98.\n[23] Hotjar. 2023. Hotjar: Website Heatmaps & Behavior Analytics Tools. https:\n//www.hotjar.com/. Accessed on: 30-July-2023.\n[24] Jeremy Hsu. 2023. Should schools ban AI chatbots? New Scientist 257, 3422 (2023),\n15. https://doi.org/10.1016/S0262-4079(23)00099-4\n[25] Michelle Ichinco and Caitlin Kelleher. 2015. Exploring novice programmer ex-\nample use. In 2015 IEEE Symposium on Visual Languages and Human-Centric\nComputing (VL/HCC) . IEEE, 63–71.\n[26] Enkelejda Kasneci, Kathrin Seßler, Stefan Küchemann, Maria Bannert, Daryna\nDementieva, Frank Fischer, Urs Gasser, Georg Groh, Stephan Günnemann, Eyke\nHüllermeier, et al .2023. ChatGPT for good? On opportunities and challenges\nof lar",
      "summary": "学生编程中的自然语言处理及其教育应用研究。",
      "source": "codeAID.pdf"
    },
    {
      "text": "n Günnemann, Eyke\nHüllermeier, et al .2023. ChatGPT for good? On opportunities and challenges\nof large language models for education. Learning and Individual Differences 103\n(2023), 102274.\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\n[27] Majeed Kazemitabaar, Justin Chow, Carl Ka To Ma, Barbara J Ericson, David\nWeintrop, and Tovi Grossman. 2023. Studying the effect of AI Code Generators\non Supporting Novice Learners in Introductory Programming. In Proceedings of\nthe 2023 CHI Conference on Human Factors in Computing Systems . 1–23.\n[28] Majeed Kazemitabaar, Xinying Hou, Austin Henley, Barbara Ericson, David Wein-\ntrop, and Tovi Grossman. 2023. How Novices Use LLM-based Code Generators to\nSolve CS1 Coding Tasks in a Self-Paced Learning Environment. In Proceedings of\nthe 23rd Koli Calling International Conference on Computing Education Research .\n[29] Harsh Kumar, Ilya Musabirov, Joseph Jay Williams, and Michael Liut. 2023.\nQuickTA: Exploring the Design Space of Using Large Language Models to Pro-\nvide Support to Students. Learning Analytics and Knowledge Conference 2023\n(LAK’23).\n[30] Sam Lau and Philip J Guo. 2023. From\" Ban It Till We Understand It\" to\" Resistance\nis Futile\": How University Programming Instructors Plan to Adapt as More\nStudents Use AI Code Generation and Explanation Tools such as ChatGPT and\nGitHub Copilot. In Proceedings of the 2023 ACM Conference on International\nComputing Education Research-Volume 1 .\n[31] Michael J. Lee. 2014. Gidget:",
      "summary": "关于大型语言模型在教育中的机遇与挑战的研究论文集。",
      "source": "codeAID.pdf"
    },
    {
      "text": "nference on International\nComputing Education Research-Volume 1 .\n[31] Michael J. Lee. 2014. Gidget: An online debugging game for learning and engage-\nment in computing education. In 2014 IEEE Symposium on Visual Languages and\nHuman-Centric Computing (VL/HCC) . 193–194. https://doi.org/10.1109/VLHCC.\n2014.6883051\n[32] Michael J Lee and Amy J Ko. 2015. Comparing the effectiveness of online learning\napproaches on CS1 learning outcomes. In Proceedings of the eleventh annual\ninternational conference on international computing education research . 237–246.\n[33] Juho Leinonen, Paul Denny, Stephen MacNeil, Sami Sarsa, Seth Bernstein, Joanne\nKim, Andrew Tran, and Arto Hellas. 2023. Comparing Code Explanations Created\nby Students and Large Language Models. arXiv:2304.03938 [cs.CY]\n[34] Juho Leinonen, Arto Hellas, Sami Sarsa, Brent Reeves, Paul Denny, James Prather,\nand Brett A Becker. 2023. Using large language models to enhance programming\nerror messages. In Proceedings of the 54th ACM Technical Symposium on Computer\nScience Education V. 1 . 563–569.\n[35] Patrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin,\nNaman Goyal, Heinrich Küttler, Mike Lewis, Wen-tau Yih, Tim Rocktäschel,\nSebastian Riedel, and Douwe Kiela. 2020. Retrieval-Augmented Generation\nfor Knowledge-Intensive NLP Tasks. In Proceedings of the 34th International\nConference on Neural Information Processing Systems (Vancouver, BC, Canada)\n(NIPS’20) . Curran Associates Inc., Red Hook, NY, USA, Ar",
      "summary": "这些文献探讨了在线编程教育游戏、学习方法及语言模型在编程教育中的应用。",
      "source": "codeAID.pdf"
    },
    {
      "text": "Processing Systems (Vancouver, BC, Canada)\n(NIPS’20) . Curran Associates Inc., Red Hook, NY, USA, Article 793, 16 pages.\n[36] Chen Li, Emily Chan, Paul Denny, Andrew Luxton-Reilly, and Ewan Tempero.\n2019. Towards a Framework for Teaching Debugging. In Proceedings of the Twenty-\nFirst Australasian Computing Education Conference (Sydney, NSW, Australia)\n(ACE ’19) . Association for Computing Machinery, New York, NY, USA, 79–86.\nhttps://doi.org/10.1145/3286960.3286970\n[37] Mark Liffiton, Brad Sheese, Jaromir Savelka, and Paul Denny. 2023. CodeHelp: Us-\ning Large Language Models with Guardrails for Scalable Support in Programming\nClasses. arXiv:2308.06921 [cs.CY]\n[38] Dastyni Loksa and Amy J Ko. 2016. The role of self-regulation in programming\nproblem solving process and success. In Proceedings of the 2016 ACM conference\non international computing education research . 83–91.\n[39] Stephen MacNeil, Andrew Tran, Arto Hellas, Joanne Kim, Sami Sarsa, Paul\nDenny, Seth Bernstein, and Juho Leinonen. 2023. Experiences from using code\nexplanations generated by large language models in a web software development\ne-book. In Proceedings of the 54th ACM Technical Symposium on Computer Science\nEducation V. 1 . 931–937.\n[40] Lauren E Margulieux, Mark Guzdial, and Richard Catrambone. 2012. Subgoal-\nlabeled instructional material improves performance and transfer in learning\nto develop mobile applications. In Proceedings of the ninth annual international\nconference on International computing educat",
      "summary": "研究编程辅助工具及教学方法，提升编程教育与支持效率。",
      "source": "codeAID.pdf"
    },
    {
      "text": "tions. In Proceedings of the ninth annual international\nconference on International computing education research . 71–78.\n[41] Renee McCauley, Sue Fitzgerald, Gary Lewandowski, Laurie Murphy, Beth\nSimon, Lynda Thomas, and Carol Zander. 2008. Debugging: a review\nof the literature from an educational perspective. Computer Science Ed-\nucation 18, 2 (2008), 67–92. https://doi.org/10.1080/08993400802114581\narXiv:https://doi.org/10.1080/08993400802114581\n[42] Tilman Michaeli and Ralf Romeike. 2019. Improving Debugging Skills in the\nClassroom: The Effects of Teaching a Systematic Debugging Process. In Pro-\nceedings of the 14th Workshop in Primary and Secondary Computing Education\n(Glasgow, Scotland, Uk) (WiPSCE’19) . Association for Computing Machinery,\nNew York, NY, USA, Article 15, 7 pages. https://doi.org/10.1145/3361721.3361724\n[43] Matthew B Miles and A Michael Huberman. 1994. Qualitative data analysis: An\nexpanded sourcebook . sage.\n[44] Diba Mirza, Phillip T Conrad, Christian Lloyd, Ziad Matni, and Arthur Gatin. 2019.\nUndergraduate teaching assistants in computer science: a systematic literature\nreview. In Proceedings of the 2019 ACM Conference on International Computing\nEducation Research . 31–40.\n[45] Laurie Murphy, Sue Fitzgerald, Raymond Lister, and Renée McCauley. 2012.\nAbility to ’explain in Plain English’ Linked to Proficiency in Computer-Based\nProgramming. In Proceedings of the Ninth Annual International Conference on\nInternational Computing Education Research (Auckla",
      "summary": "关于编程调试教育的研究综述及影响分析。",
      "source": "codeAID.pdf"
    },
    {
      "text": "s of the Ninth Annual International Conference on\nInternational Computing Education Research (Auckland, New Zealand) (ICER ’12) .\nAssociation for Computing Machinery, New York, NY, USA, 111–118. https://doi.org/10.1145/2361276.2361299\n[46] Engineering National Academies of Sciences, Medicine, et al .2018. Assessing and\nresponding to the growth of computer science undergraduate enrollments . National\nAcademies Press.\n[47] Kimberly A Neuendorf. 2017. The content analysis guidebook . sage.\n[48] OpenAI. 2022. Introducing ChatGPT. https://openai.com/blog/chatgpt. Accessed\non: 30-July-2023.\n[49] Tung Phung, José Cambronero, Sumit Gulwani, Tobias Kohn, Rupak Majumdar,\nAdish Singla, and Gustavo Soares. 2023. Generating High-Precision Feedback\nfor Programming Syntax Errors using Large Language Models. arXiv preprint\narXiv:2302.04662 (2023).\n[50] James Prather, Brett A. Becker, Michelle Craig, Paul Denny, Dastyni Loksa, and\nLauren Margulieux. 2020. What Do We Think We Think We Are Doing? Metacog-\nnition and Self-Regulation in Programming. In Proceedings of the 2020 ACM\nConference on International Computing Education Research (Virtual Event, New\nZealand) (ICER ’20) . Association for Computing Machinery, New York, NY, USA,\n2–13. https://doi.org/10.1145/3372782.3406263\n[51] James Prather, Brent N. Reeves, Paul Denny, Brett A. Becker, Juho Leinonen,\nAndrew Luxton-Reilly, Garrett Powell, James Finnie-Ansley, and Eddie Antonio\nSantos. 2023. “It’s Weird That It Knows What I Want”: Usability a",
      "summary": "第九届国际计算教育研究会议论文摘要：生成高精度编程语法错误反馈的大型语言模型方法。",
      "source": "codeAID.pdf"
    },
    {
      "text": "s Finnie-Ansley, and Eddie Antonio\nSantos. 2023. “It’s Weird That It Knows What I Want”: Usability and Interactions\nwith Copilot for Novice Programmers. ACM Trans. Comput.-Hum. Interact. 31, 1,\nArticle 4 (nov 2023), 31 pages. https://doi.org/10.1145/3617367\n[52] Brent Reeves, Sami Sarsa, James Prather, Paul Denny, Brett A. Becker, Arto\nHellas, Bailey Kimmel, Garrett Powell, and Juho Leinonen. 2023. Evaluating the\nPerformance of Code Generation Models for Solving Parsons Problems With\nSmall Prompt Variations. In Proceedings of the 2023 Conference on Innovation\nand Technology in Computer Science Education V. 1 (Turku, Finland) (ITiCSE\n2023) . Association for Computing Machinery, New York, NY, USA, 299–305.\nhttps://doi.org/10.1145/3587102.3588805\n[53] Sami Sarsa, Paul Denny, Arto Hellas, and Juho Leinonen. 2022. Automatic\ngeneration of programming exercises and code explanations using large language\nmodels. In Proceedings of the 2022 ACM Conference on International Computing\nEducation Research-Volume 1 . 27–43.\n[54] Jaromir Savelka, Arav Agarwal, Marshall An, Chris Bogart, and Majd Sakr. 2023.\nThrilled by Your Progress! Large Language Models (GPT-4) No Longer Struggle to\nPass Assessments in Higher Education Programming Courses. In Proceedings of\nthe 2023 ACM Conference on International Computing Education Research-Volume\n1.\n[55] Aaron J. Smith, Kristy Elizabeth Boyer, Jeffrey Forbes, Sarah Heckman, and\nKetan Mayer-Patel. 2017. My Digital Hand: A Tool for Scaling Up One-to-One\nPe",
      "summary": "研究探讨代码辅助工具在编程教育中的使用及性能评估。",
      "source": "codeAID.pdf"
    },
    {
      "text": "es, Sarah Heckman, and\nKetan Mayer-Patel. 2017. My Digital Hand: A Tool for Scaling Up One-to-One\nPeer Teaching in Support of Computer Science Learning. In Proceedings of the\n2017 ACM SIGCSE Technical Symposium on Computer Science Education (Seattle,\nWashington, USA) (SIGCSE ’17) . Association for Computing Machinery, New\nYork, NY, USA, 549–554. https://doi.org/10.1145/3017680.3017800\n[56] Margaret Smith, Yujie Chen, Rachel Berndtson, Kristen M Burson, and Whitney\nGriffin. 2017. \"Office Hours Are Kind of Weird\": Reclaiming a Resource to Foster\nStudent-Faculty Interaction. InSight: A Journal of Scholarly Teaching 12 (2017),\n14–29.\n[57] Lasang Jimba Tamang, Zeyad Alshaikh, Nisrine Ait Khayi, Priti Oli, and Vasile\nRus. 2021. A comparative study of free self-explanations and socratic tutoring\nexplanations for source code comprehension. In Proceedings of the 52nd ACM\nTechnical Symposium on Computer Science Education . 219–225.\n[58] Priyan Vaithilingam, Tianyi Zhang, and Elena L Glassman. 2022. Expectation\nvs. experience: Evaluating the usability of code generation tools powered by\nlarge language models. In Chi conference on human factors in computing systems\nextended abstracts . 1–7.\n[59] Arto Vihavainen, Craig S Miller, and Amber Settle. 2015. Benefits of self-\nexplanation in introductory programming. In Proceedings of the 46th ACM Tech-\nnical Symposium on Computer Science Education . 284–289.\n[60] Lev Semenovich Vygotsky and Michael Cole. 1978. Mind in society: Development\nof hi",
      "summary": "这些文献探讨了计算机科学教育中的同伴教学、学生-教师互动及代码解释方法。",
      "source": "codeAID.pdf"
    },
    {
      "text": "n . 284–289.\n[60] Lev Semenovich Vygotsky and Michael Cole. 1978. Mind in society: Development\nof higher psychological processes . Harvard university press.\n[61] Qiaosi Wang, Koustuv Saha, Eric Gregori, David Joyner, and Ashok Goel. 2021.\nTowards mutual theory of mind in human-ai interaction: How language reflects\nwhat students perceive about a virtual teaching assistant. In Proceedings of the\n2021 CHI conference on human factors in computing systems . 1–14.\n[62] Jacqueline L. Whalley, Raymond Lister, Errol Thompson, Tony Clear, Phil Robbins,\nP. K. Ajith Kumar, and Christine Prasad. 2006. An Australasian Study of Reading\nand Comprehension Skills in Novice Programmers, Using the Bloom and SOLO\nTaxonomies. In Proc. of the 8th Australasian Conf. on Computing Education -\nVolume 52 . Australian Computer Society, Inc., AUS, 243–252.\n[63] Frank F Xu, Uri Alon, Graham Neubig, and Vincent Josua Hellendoorn. 2022. A\nsystematic evaluation of large language models of code. In Proceedings of the 6th\nACM SIGPLAN International Symposium on Machine Programming . 1–10.\nCodeAid: Design and Semester-Long Deployment of an LLM-based Programming Assistant CHI ’24, May 11–16, 2024, Honolulu, HI, USA\nA THEMATIC ANALYSIS CODEBOOK\nThis appendix includes the final codebook used for the thematic analysis of students’ usage of CodeAid. We analyzed each usage from two\nprimary dimensions: Query , and Response .\nTable A1: CodeAid Thematic Analysis Codebook: Query - What are students asking from CodeAid?\nDim",
      "summary": "CodeAid设计与部署：大型语言模型编程助手的使用分析摘要",
      "source": "codeAID.pdf"
    },
    {
      "text": "e .\nTable A1: CodeAid Thematic Analysis Codebook: Query - What are students asking from CodeAid?\nDimensions and Codes Code Description\nWhat is being asked? Focusing on the content of their usage, what are they asking for, or trying to do?\n1. Error Message Interpretation Students asking CodeAid about why their code is not working correctly, having errors, segmen-\ntation faults, etc.\n2. Problem Source Identification Students asking CodeAid to help them identify the cause of the problem.\n3. Buggy Code Resolution Students asking about how to resolve the error or bug within the provided code.\n4. Explain Error Message Students asking CodeAid to explain a provided error message. Students may also include code\nfor more context.\n5. Code Execution Probes Students using CodeAid as a compiler and ask for the result or potential error when the provided\ncode is executed.\n6. Code and Conceptual Clarification A general programming question that usually has the form of \"how to do [X]?\" or\"what does [X]\ndo?\"\n7. Function Specification Queries Students asking for more information about a particular function, its usage and examples.\n8. High-level Coding Guidance Students asking about the process of doing something at a high level and looking for some\nimplementation detail. For example, \"How can I tokenize a dynamically allocated string?\"\n9. Direct Code Solution Students explicitly asking for solutions for their labs or assignments (e.g., by copying part of the\ntask description).\n10. Explain Code ",
      "summary": "CodeAid 主题分析代码本，涵盖学生常见编程求助类型。",
      "source": "codeAID.pdf"
    },
    {
      "text": "ons for their labs or assignments (e.g., by copying part of the\ntask description).\n10. Explain Code Students asking CodeAid to explain their code.\nTable A2: CodeAid Thematic Analysis Codebook: Response - How much is CodeAid directly revealing the solution?\nDimensions and Codes Code Description\nHow much directly revealing the solution? How much is CodeAid directly revealing the solution?\n(The codes are sorted from most revealing to least revealing)\n1. Exact Solution Code Generated the code solution to a question.\n2. Exact Solution Pseudo-code Similar to \"Exact Solution Code\" , but in pseudo-code.\n3. Step to Fix Semantic Issue Generated the steps required to fix semantic/logical problems, which usually need additional\nlines to achieve new functionality.\n4. Step to Fix Syntax Issue Generated the steps required to fix minor syntax issues, usually needed to perform an inline fix.\n5. Step to Fix External Issue Generated the steps to fix an issue that is not within the code, but about the compilation or\nexecution.\n6. Example High-level Code Generated a generic, high-level example for a function, or a generic implementation, i.e., how to\nconstruct a linked list, often available on Stack Overflow. This includes ALL occurrences of the\nInline Code Exploration feature.\n7. Example High-level Pseudo-code Similar to \"Example High level Code\" , but in pseudocode. This includes any occurrences of\nsteps/instructions on how to complete.\n8. Conceptual Explanation Generated a response that is com",
      "summary": "CodeAid 对代码问题的回答分级表，从完全揭示解决方案到仅提供概念解释。",
      "source": "codeAID.pdf"
    },
    {
      "text": "of\nsteps/instructions on how to complete.\n8. Conceptual Explanation Generated a response that is completely in natural language. Provides conceptual explanation,\nclarifications, or the result of a code execution.\nn/a Does not apply (reserved for \"Explain Code\" ).\nCHI ’24, May 11–16, 2024, Honolulu, HI, USA Kazemitabaar, et al.\nTable A3: CodeAid Thematic Analysis Codebook: Response - How technically correct?\nDimensions and Codes Code Description\nHow technically correct? Despite the question, how correct is the response from the tool?\n1. Correct Everything including the answer and its explanation is correct.\n2. Incorrect Any part of the answer or explanation is incorrect.\nTable A4: CodeAid Thematic Analysis Codebook: Response - How helpful if correct?\nDimensions and Codes Code Description\nHow helpful if correct? Is the response helpful to students? Does it guide them the right direction based on the provided\nquery? Does it identify their potential issues? or is it completely misleading?\n1. Helpful Answer that allows the student to take one step further, even if it is not arriving at the final\nsolution.\n2. Not Helpful Answer that does not allow students to progress any further, is unrelated to their .\nn/a Does not apply (reserved for \"Incorrect\" ).\n",
      "summary": "CodeAid概念分析代码本：技术正确性与帮助程度评估标准。",
      "source": "codeAID.pdf"
    },
    {
      "text": "{\n  \"a\": {\n    \"basic\": \"HTML锚点标签，用于创建超链接或页面内跳转\",\n    \"intermediate\": \"语法为<a href='url' target='_blank'>文本</a>，href指定链接地址，target控制打开方式，可设置download属性实现文件下载\",\n    \"advanced\": \"用于页面导航、锚点跳转和文件下载。示例：<a href='#section2'>跳转第二节</a>实现页内定位；<a href='resume.pdf' download>下载简历</a>触发文件下载\",\n    \"expert\": \"底层通过浏览器URL处理机制实现导航，跨域链接受同源策略限制。现代SPA应用中常被拦截转为路由跳转，SEO优化需注意可爬取性。rel='noopener'可防止钓鱼攻击\"\n  },\n  \"abbr\": {\n    \"basic\": \"定义缩写词或首字母缩略词，通过title属性提供完整解释\",\n    \"intermediate\": \"语法：<abbr title='完整解释'>缩写</abbr>。核心用途是为屏幕阅读器和用户提供语义化解释，改善无障碍访问\",\n    \"advanced\": \"适用于技术文档中的专业术语缩写。例如：<abbr title='Cascading Style Sheets'>CSS</abbr>。SEO会提取title内容作为关联数据，hover时显示完整释义\",\n    \"expert\": \"底层通过DOM的title属性实现提示功能，屏幕阅读器会优先朗读title内容。最佳实践是保持缩写一致性，对重复出现的术语只需首次标注，避免过度使用影响阅读流畅性\"\n  },\n  \"address\": {\n    \"basic\": \"address标签定义文档作者/所有者的联系信息，通常显示为斜体\",\n    \"intermediate\": \"语法为<address>联系信息</address>，常包含电子邮件、物理地址或社交媒体链接。通常位于footer或文章末尾\",\n    \"advanced\": \"用于网页页脚标注版权信息或作者联系方式。示例：<address>作者：<a href='mailto:contact@example.com'>联系邮箱</a><br>北京市海淀区</address>\",\n    \"expert\": \"address元素具有语义化价值，帮助搜索引擎识别联系信息。浏览器默认样式为display:block+font-style:italic。应避免嵌套非联系信息内容，多个作者可使用多个address标签\"\n  },\n  \"area\": {\n    \"basic\": \"<area>定义图像映射中的可点击区域，需与<map>配合使用\",\n    \"intermediate\": \"语法：<area shape=\\\"rect/circle/poly\\\" coords=\\\"坐标\\\" href=\\\"URL\\\" alt=\\\"描述\\\">。常用属性包括shape定义形状、coords定义坐标范围、href定义链接目标\",\n    \"advanced\": \"用于创建图片热点区域，例如电商网站的商品图片分区跳转。示例：<map name=\\\"productMap\\\"><area shape=\\\"rect\\\" coords=\\\"0,0,50,50\\\" href=\\\"shoes.html\\\" alt=\\\"运动鞋\\\"><area shape=\\\"ci",
      "summary": "HTML 标签：锚点标签用于创建超链接、锚点跳转及文件下载。",
      "source": "contents.json"
    },
    {
      "text": "ductMap\\\"><area shape=\\\"rect\\\" coords=\\\"0,0,50,50\\\" href=\\\"shoes.html\\\" alt=\\\"运动鞋\\\"><area shape=\\\"circle\\\" coords=\\\"100,100,30\\\" href=\\\"hat.html\\\" alt=\\\"帽子\\\"></map>\",\n    \"expert\": \"原理上通过坐标系统建立图像与链接的映射关系，需注意：1) 坐标原点在左上角 2) 不同shape使用不同坐标格式 3) 移动端需考虑响应式适配 4) 应始终提供alt文本以满足可访问性要求\"\n  },\n  \"article\": {\n    \"basic\": \"HTML5语义化标签，用于定义文档独立内容区块\",\n    \"intermediate\": \"article标签包裹独立内容单元，支持全局属性，可嵌套使用。通常包含标题(h1-h6)和段落(p)，适用于博客、新闻等独立内容区块\",\n    \"advanced\": \"典型应用场景包括博客文章、论坛帖子或新闻故事。示例：<article><h2>文章标题</h2><p>正文内容...</p><footer>作者信息</footer></article>。支持section嵌套，可配合header/footer使用\",\n    \"expert\": \"article作为语义化容器，提升SEO和可访问性。浏览器将其识别为独立内容流，支持RSS聚合。与section的区别在于独立性：article可脱离上下文理解，而section是主题分组。最佳实践是确保每个article有明确标题，避免过度嵌套\"\n  },\n  \"aside\": {\n    \"basic\": \"<aside>是HTML5语义化标签，表示与页面主要内容间接相关的内容\",\n    \"intermediate\": \"作为侧边栏容器使用，通常包含补充信息、广告或导航。需配合CSS布局，独立于主内容流但语义关联\",\n    \"advanced\": \"适用于博客侧边栏、引用内容或辅助导航。示例：<aside><h3>相关文章</h3><ul><li>文章1</li></ul></aside>\",\n    \"expert\": \"浏览器将aside视为sectioning content，影响文档大纲结构。最佳实践是与main内容建立ARIA关联，确保屏幕阅读器能识别关系。避免嵌套在main内除非是直接相关内容补充\"\n  },\n  \"audio\": {\n    \"basic\": \"HTML5音频标签，用于在网页中嵌入声音内容\",\n    \"intermediate\": \"支持MP3/WAV/OGG格式，通过src属性指定音频源，controls属性显示播放控件\",\n    \"advanced\": \"适用于背景音乐、语音播报等场景。示例：<audio src='music.mp3' controls loop>您的浏览器不支持audio标签</audio>，可通过JavaScript的play()方法控制播放\",\n    \"expert\": \"底层使用浏览器媒体引擎解码，不同浏览器支持的编解码器不同。最佳实践应提供多种格式备用源，通过canPlayType检测兼容性。移动端需注意自动播放限制，建议用户交互后触发播放\"\n  },\n  \"b\": {\n    \"basic\": \"<b>标签用于加粗文本，是HTML中最基础的格式化元素之一\",\n    \"intermediate\": \"语法为<b>加粗内",
      "summary": "HTML5标签解释及使用注意事项",
      "source": "contents.json"
    },
    {
      "text": "户交互后触发播放\"\n  },\n  \"b\": {\n    \"basic\": \"<b>标签用于加粗文本，是HTML中最基础的格式化元素之一\",\n    \"intermediate\": \"语法为<b>加粗内容</b>，属于物理样式标签，浏览器默认渲染为粗体，但建议优先使用CSS控制样式\",\n    \"advanced\": \"适用于需要视觉强调的非重要文本，如摘要关键词。与<strong>语义不同，仅表示样式变化。示例：<p>这是<b>重点</b>内容</p>\",\n    \"expert\": \"底层通过CSS的font-weight:bold实现，现代开发中应避免滥用。与<strong>的差异在于：HTML5中<b>无语义含义，而<strong>表示重要性。性能上，过度使用可能导致重绘开销\"\n  },\n  \"base\": {\n    \"basic\": \"HTML基础元素，用于指定文档中所有相对URL的基准地址\",\n    \"intermediate\": \"放置在head标签内，通过href属性指定基准URL，target属性设置默认打开方式。影响页面所有相对链接、图片路径等资源定位\",\n    \"advanced\": \"常用于统一管理静态资源路径或设置全局链接行为。示例：<base href='https://example.com/assets/'>会使<img src='logo.png'>实际请求https://example.com/assets/logo.png\",\n    \"expert\": \"浏览器解析时会优先处理base标签，其href值会与文档URL进行拼接处理。需注意：1) 必须放在其他含URL的元素前 2) 同一文档只能存在一个base标签 3) 锚点链接不受影响 4) 可能引发资源404需谨慎使用\"\n  },\n  \"bdi\": {\n    \"basic\": \"bdi标签用于隔离可能方向性不同的文本，如混合语言内容\",\n    \"intermediate\": \"bdi(Bidirectional Isolation)标签独立设置文本方向，不继承父元素方向属性。语法：<bdi>隔离文本</bdi>，常用于用户名等不确定方向的文本\",\n    \"advanced\": \"在混合语言界面中处理用户生成内容时使用。例如阿拉伯用户名的评论系统：<div>用户<bdi>علي</bdi>说：<bdi>Hello</bdi></div>，确保双向文本正确隔离显示\",\n    \"expert\": \"bdi通过Unicode双向算法隔离文本流，创建独立的方向上下文。与dir属性不同，它不强制指定方向而是隔离潜在冲突。现代浏览器通过CSS unicode-bidi:isolate实现，需注意旧版浏览器兼容性问题\"\n  },\n  \"bdo\": {\n    \"basic\": \"bdo标签用于覆盖默认文本方向，强制指定显示方向\",\n    \"intermediate\": \"通过dir属性指定文本方向(ltr从左到右/rtl从右到左)，如<bdo dir=\\\"rtl\\\">反向文本</bdo>，常用于阿拉伯语等从右向左书写的语言\",\n    \"advanced\": \"在多语言网站中处理混合方向文本时使用，例如阿拉伯语与拉丁文字混排时保持正确方向。示例：<bdo dir=\\\"rtl\\\">مرحبا Hello</bdo>会保持阿拉伯语从右向左，而Hello仍正常显示\",\n    \"expert\": \"底层通过Unicode双向算法(Bidi)实现方向控制，dir属性",
      "summary": "HTML 标签 b、base、bdi 和 bdo 的基本用途和特性概述。",
      "source": "contents.json"
    },
    {
      "text": "=\\\"rtl\\\">مرحبا Hello</bdo>会保持阿拉伯语从右向左，而Hello仍正常显示\",\n    \"expert\": \"底层通过Unicode双向算法(Bidi)实现方向控制，dir属性会覆盖浏览器的自动方向检测。最佳实践是仅在必要时使用，避免与CSS direction属性混用，在RTL语言网站中需配合lang属性确保语义正确\"\n  },\n  \"blockquote\": {\n    \"basic\": \"HTML块级引用标签，用于标记来自其他来源的长段引用内容\",\n    \"intermediate\": \"语法为<blockquote cite=\\\"来源URL\\\">引用内容</blockquote>，cite属性可选表示引用来源，浏览器默认添加缩进样式\",\n    \"advanced\": \"适用于论文参考文献、新闻引述等场景。示例：<blockquote cite=\\\"https://example.com\\\">根据W3C规范，该标签表示从其他来源引用的内容区块</blockquote>\",\n    \"expert\": \"语义化HTML5标签，浏览器默认添加margin-inline-start/end样式实现缩进。搜索引擎会特别解析cite属性建立内容关联，应确保引用内容完整性和来源准确性\"\n  },\n  \"body\": {\n    \"basic\": \"HTML文档主体容器，包含所有可见内容\",\n    \"intermediate\": \"作为HTML根元素的内容容器，每个页面只能有一个，包含网页所有可见元素（文本/图片/链接等），支持全局属性如class/id\",\n    \"advanced\": \"典型应用场景：1)设置全局背景色<body style='background:#f0f0f0'> 2)绑定事件监听<body onload='init()'> 3)结构化内容容器。示例：<body><header></header><main></main><footer></footer></body>\",\n    \"expert\": \"浏览器渲染时构建DOM树的核心节点，默认具有margin/padding等样式属性。现代最佳实践：1)避免直接操作body样式 2)使用语义化子元素 3)通过CSS变量控制全局样式 4)性能优化需注意body内元素数量及渲染复杂度\"\n  },\n  \"br\": {\n    \"basic\": \"HTML换行标签，用于在文本中强制换行显示\",\n    \"intermediate\": \"自闭合标签<br>或<br/>，浏览器解析时会在此处插入换行符，不包含任何属性时无需闭合标签\",\n    \"advanced\": \"适用于地址分行显示、诗歌格式等需要控制换行的场景。示例：<p>第一行<br>第二行</p>\",\n    \"expert\": \"浏览器将<br>解析为CSS的'display: inline'元素并插入换行符，实际渲染高度由父元素行高决定。过度使用会导致语义化缺失，应优先使用块级元素+CSS控制布局\"\n  },\n  \"button\": {\n    \"basic\": \"button是HTML表单交互元素，用于触发用户操作\",\n    \"intermediate\": \"语法为<button type='submit|reset|button'>，支持disabled属性禁用按钮，可通过CSS样式化按钮外观\",\n    \"advanced\": \"常见于表单提交/重置操作，也用于触发JS事件。示例：<bu",
      "summary": "HTML标签概述及其基本用途和注意事项。",
      "source": "contents.json"
    },
    {
      "text": "ubmit|reset|button'>，支持disabled属性禁用按钮，可通过CSS样式化按钮外观\",\n    \"advanced\": \"常见于表单提交/重置操作，也用于触发JS事件。示例：<button onclick='handleClick()' class='primary-btn'>提交</button>，现代框架中常用组件化按钮替代原生button\",\n    \"expert\": \"底层为可聚焦的可交互元素，浏览器默认渲染为平台原生按钮样式。最佳实践包括：语义化type属性、ARIA无障碍支持、防重复点击处理。现代Web倾向使用<button>而非<input type='button'>以获得更好的样式控制和DOM操作灵活性\"\n  },\n  \"canvas\": {\n    \"basic\": \"HTML5的canvas元素用于通过JavaScript动态绘制图形，创建动画或游戏界面\",\n    \"intermediate\": \"需定义width/height属性设置画布尺寸，通过getContext('2d')获取绘图上下文，使用fillRect等API绘制基本图形\",\n    \"advanced\": \"常见于数据可视化图表绘制和游戏开发。示例：const ctx = canvas.getContext('2d'); ctx.fillStyle='red'; ctx.fillRect(10,10,100,50); 绘制红色矩形\",\n    \"expert\": \"底层基于位图渲染，所有绘制操作会立即光栅化为像素数据。性能优化关键：减少绘制调用、使用离屏canvas缓存复杂图形、合理使用requestAnimationFrame实现动画，避免频繁重绘整个画布区域\"\n  },\n  \"caption\": {\n    \"basic\": \"<caption>定义表格标题，必须作为<table>的第一个子元素\",\n    \"intermediate\": \"语法：<caption align=\\\"top|bottom\\\">标题文本</caption>。默认显示在表格上方，一个表格只能有一个标题\",\n    \"advanced\": \"应用场景：为数据表格提供语义化标题，辅助屏幕阅读器识别。示例：<table><caption>2023销售数据</caption><tr><th>月份</th><th>销售额</th></tr>\",\n    \"expert\": \"原理：caption元素通过DOM接口HTMLTableCaptionElement实现，浏览器会为其创建单独的渲染层。最佳实践是始终为数据表格添加caption以提高可访问性，并通过CSS的caption-side属性控制位置而非废弃的align属性\"\n  },\n  \"cite\": {\n    \"basic\": \"HTML引用标签，用于标明作品标题或引用来源\",\n    \"intermediate\": \"cite标签定义作品（如书籍、歌曲等）的标题，通常浏览器会以斜体显示。语法：<cite>作品名</cite>\",\n    \"advanced\": \"在学术文章或博客中标注引用来源时使用。示例：<p>出自<cite>红楼梦</cite>第五回</p>。注意与blockquote区别，cite仅标注标题而非具体内容\",\n    \"expert\": \"cite元素具有语义价值，帮助屏幕阅读器识别引用来源。HTML5规范中cite仅用于作品标题，误用于人名会导致语义错误。SEO中合理使用可增强内容可",
      "summary": "HTML 标签：button、canvas 和 caption 的基本用法及专家建议。",
      "source": "contents.json"
    },
    {
      "text": "标题而非具体内容\",\n    \"expert\": \"cite元素具有语义价值，帮助屏幕阅读器识别引用来源。HTML5规范中cite仅用于作品标题，误用于人名会导致语义错误。SEO中合理使用可增强内容可信度，应与微格式配合使用\"\n  },\n  \"code\": {\n    \"basic\": \"HTML代码容器标签，用于显示计算机代码片段\",\n    \"intermediate\": \"行内元素，默认等宽字体显示。需与<pre>配合实现多行代码块，浏览器会保留内部空白符但不解析HTML标签\",\n    \"advanced\": \"适用于技术文档展示代码示例。单行代码直接使用<code>，多行需嵌套<pre>。示例：<pre><code>function test() {\\n  return 'code block'\\n}</code></pre>\",\n    \"expert\": \"底层通过CSS的font-family: monospace实现等宽效果。与<pre>的区别在于不保留格式换行，需注意XSS防护。最佳实践是配合语法高亮库使用，避免直接渲染用户输入代码\"\n  },\n  \"col\": {\n    \"basic\": \"<col>定义表格列的样式属性，用于<colgroup>内控制单列或多列样式\",\n    \"intermediate\": \"语法：<col span='数量' style='属性'>，span指定作用列数，常用style控制宽度/背景色等样式属性\",\n    \"advanced\": \"应用场景：统一管理数据表格的列样式。示例：<colgroup><col span='2' style='width:100px'><col style='background:#eee'>控制前两列宽度和第三列背景色\",\n    \"expert\": \"原理：浏览器解析时会创建匿名表格列对象，通过CSS特异性控制样式。最佳实践：优先用CSS类替代内联样式，span需严格匹配实际列数避免布局错乱\"\n  },\n  \"colgroup\": {\n    \"basic\": \"colgroup定义表格中列组的样式属性\",\n    \"intermediate\": \"HTML表格中用于分组列，通过span属性指定列数或单独定义每列样式，常与col标签配合使用\",\n    \"advanced\": \"适用于需要统一设置多列样式的表格场景，如财务报表的高亮列。示例：<colgroup span=\\\"2\\\" style=\\\"background:yellow\\\"><col style=\\\"width:100px\\\"><col style=\\\"width:200px\\\">\",\n    \"expert\": \"浏览器渲染时会根据colgroup建立列样式映射，优先于单元格样式但低于行内样式。最佳实践是与CSS类结合使用，避免直接内联样式，以提升表格渲染性能和可维护性\"\n  },\n  \"data\": {\n    \"basic\": \"HTML的<data>标签用于将内容与机器可读的翻译关联\",\n    \"intermediate\": \"<data>标签必须包含value属性表示机器可读值，内容为人类可读文本。常与微数据或RDFa配合使用，例如<data value='ISBN123'>书籍编号</data>\",\n    \"advanced\": \"在电商网站中用于标记商品信息，既保持页面可读性又便于搜索引擎抓取。示例：<data value='product_1234' class='sku'",
      "summary": "HTML标签：cite、code、col、colgroup和data的功能及用法概述。",
      "source": "contents.json"
    },
    {
      "text": "/data>\",\n    \"advanced\": \"在电商网站中用于标记商品信息，既保持页面可读性又便于搜索引擎抓取。示例：<data value='product_1234' class='sku'>红色T恤</data>，配合JSON-LD实现结构化数据\",\n    \"expert\": \"底层通过微数据规范实现语义化，value属性会被爬虫解析为特定词汇表的实例。最佳实践是与schema.org词汇表配合，避免自定义value值。浏览器默认样式与<span>相同，需CSS定制显示效果\"\n  },\n  \"datalist\": {\n    \"basic\": \"datalist是HTML5表单元素，为input提供预定义选项列表\",\n    \"intermediate\": \"与input元素配合使用，通过list属性关联datalist的id。用户可输入或从下拉列表选择预定义选项\",\n    \"advanced\": \"适用于搜索框自动补全、表单选项提示等场景。示例：<input list='browsers'><datalist id='browsers'><option value='Chrome'><option value='Firefox'>\",\n    \"expert\": \"底层通过ARIA角色实现无障碍访问，浏览器将其渲染为组合框。与select不同，允许自由输入且支持动态更新选项。性能优化需注意大数据量时的渲染效率\"\n  },\n  \"dd\": {\n    \"basic\": \"HTML描述列表中的定义描述项，需与<dt>配对使用\",\n    \"intermediate\": \"在<dl>容器内使用，语法为<dd>描述内容</dd>，用于解释前驱<dt>术语的定义\",\n    \"advanced\": \"适用于术语解释场景，如技术文档中的名词解释。示例：<dl><dt>HTML</dt><dd>超文本标记语言</dd></dl>\",\n    \"expert\": \"作为描述列表的语义化元素，与<dt>构成关联结构。浏览器默认渲染为块级元素并添加左缩进，可通过CSS重置样式。SEO中能增强术语-定义的语义关联\"\n  },\n  \"del\": {\n    \"basic\": \"HTML删除线标签，用于表示被删除的文本内容\",\n    \"intermediate\": \"语法为<del>被删除文本</del>，与<s>标签语义不同，表示文档修订时删除的内容而非单纯样式删除线\",\n    \"advanced\": \"在版本对比、文档修订场景使用，如：<p>原价：<del>299</del> 现价：199</p>。可配合datetime属性记录删除时间：<del datetime=\\\"2023-01-01\\\">旧条款</del>\",\n    \"expert\": \"底层通过CSS text-decoration: line-through实现删除线效果，但具有语义化价值。与<s>标签的区别在于<del>表示内容已失效但需保留历史记录，属于编辑语义标签。屏幕阅读器会特别处理此类语义化标签\"\n  },\n  \"details\": {\n    \"basic\": \"<details>是HTML5原生折叠内容标签，需配合<summary>使用\",\n    \"intermediate\": \"语法：<details><summary>标题</summary>内容</details>。open属性控制默认展开，支持CSS样式定制\",\n    \"advanced\": \"适用于FAQ、",
      "summary": "HTML标签详解：data、datalist、dd、del和details及其应用场景。",
      "source": "contents.json"
    },
    {
      "text": "e\": \"语法：<details><summary>标题</summary>内容</details>。open属性控制默认展开，支持CSS样式定制\",\n    \"advanced\": \"适用于FAQ、代码折叠等场景。示例：<details><summary>查看答案</summary><p>这是被折叠的详细解释内容</p></details>。可通过details[open]选择器设置展开样式\",\n    \"expert\": \"底层通过浏览器原生实现折叠效果，无需JS。性能优于JS方案但样式受限。最佳实践：复杂交互需配合JS，简单内容优先使用原生方案。注意可访问性aria属性设置\"\n  },\n  \"dfn\": {\n    \"basic\": \"HTML定义术语标签，用于标记文档中的术语定义实例\",\n    \"intermediate\": \"语法为<dfn>术语内容</dfn>，通常与<abbr>或<title>属性配合使用，浏览器默认显示斜体样式\",\n    \"advanced\": \"适用于技术文档中的术语解释场景，如：<p><dfn title='超文本标记语言'>HTML</dfn>是网页标准语言</p>，注意需保持上下文语义关联\",\n    \"expert\": \"作为语义化标签，dfn通过建立术语与定义的关联增强可访问性。浏览器通过默认样式提示定义关系，SEO会识别其语义价值。最佳实践是与id/aria属性配合实现精确术语索引，避免孤立使用\"\n  },\n  \"dialog\": {\n    \"basic\": \"HTML5原生对话框元素，通过showModal()方法控制显示\",\n    \"intermediate\": \"使用<dialog open>属性或JS的showModal()打开对话框，包含表单时需method='dialog'提交关闭\",\n    \"advanced\": \"适合模态弹窗场景，如登录框。示例：const dialog = document.querySelector('dialog'); dialog.showModal(); 通过ESC键或dialog.close()关闭\",\n    \"expert\": \"基于顶层API实现模态层，通过::backdrop伪元素控制遮罩样式。浏览器会将其置于顶层堆栈上下文，自动处理焦点锁定和ESC键关闭行为，需注意Polyfill兼容性问题\"\n  },\n  \"div\": {\n    \"basic\": \"HTML基础容器标签，用于文档内容分组\",\n    \"intermediate\": \"语法为<div></div>，块级元素默认占满整行，常配合CSS实现布局\",\n    \"advanced\": \"用于构建页面结构，如创建卡片布局。示例：<div class='card'><h3>标题</h3><p>内容</p></div>\",\n    \"expert\": \"作为CSS布局的基础单位，现代浏览器通过盒模型渲染。最佳实践是避免过度嵌套，配合语义化标签使用。BFC特性使其成为flex/grid布局的理想容器，性能优化需注意重绘问题\"\n  },\n  \"dl\": {\n    \"basic\": \"HTML描述列表标签，包含术语和描述的组合\",\n    \"intermediate\": \"由<dl>定义列表，<dt>定义术语，<dd>定义描述。结构为<dl><dt>术语</dt><dd>描述</dd></dl>\",\n    \"advanced\": \"适用于名词解释场景，如API文档参数说明。示例：<d",
      "summary": "HTML 标签总结：details、dfn、dialog、div 和 dl 的基本用法与高级应用。",
      "source": "contents.json"
    },
    {
      "text": "表，<dt>定义术语，<dd>定义描述。结构为<dl><dt>术语</dt><dd>描述</dd></dl>\",\n    \"advanced\": \"适用于名词解释场景，如API文档参数说明。示例：<dl><dt>font-size</dt><dd>控制文字大小的CSS属性</dd><dt>margin</dt><dd>元素外边距设置属性</dd></dl>\",\n    \"expert\": \"语义化标签，辅助屏幕阅读器识别术语-描述关系。浏览器默认渲染为块级元素，dd带有左外边距。SEO优化时可用于结构化数据标记，但需避免过度嵌套影响可访问性。\"\n  },\n  \"dt\": {\n    \"basic\": \"HTML定义术语元素，用于描述定义列表中的术语\",\n    \"intermediate\": \"必须嵌套在<dl>标签内使用，与<dd>配对出现，语法：<dl><dt>术语</dt><dd>描述</dd></dl>\",\n    \"advanced\": \"适用于术语表场景，如技术文档中的名词解释。示例：<dl><dt>HTML</dt><dd>超文本标记语言</dd><dt>CSS</dt><dd>层叠样式表</dd></dl>\",\n    \"expert\": \"作为描述列表的语义化组件，浏览器默认渲染为块级元素。最佳实践是与<dd>严格配对使用，WCAG标准要求定义列表必须完整包含术语和描述，屏幕阅读器会按关联关系朗读。DOM接口为HTMLDListElement的子节点\"\n  },\n  \"em\": {\n    \"basic\": \"em标签用于定义强调文本，默认显示为斜体\",\n    \"intermediate\": \"HTML语义化标签，表示内容需要强调。语法：<em>强调文本</em>，与<i>标签视觉相同但语义不同\",\n    \"advanced\": \"适用于需要语义化强调的文本片段，如技术文档中的关键术语。示例：<p>在CSS中，<em>盒模型</em>是核心概念</p>\",\n    \"expert\": \"em标签具有语义价值，浏览器/屏幕阅读器会识别其强调含义。嵌套em会增强强调程度，CSS可覆写其斜体样式。在无障碍访问中比纯视觉的<i>标签更符合WAI-ARIA标准\"\n  },\n  \"embed\": {\n    \"basic\": \"embed标签用于嵌入外部内容，如多媒体或插件\",\n    \"intermediate\": \"语法为<embed src='资源URL' type='MIME类型' width='宽度' height='高度'>，支持PDF/Flash/SVG等格式嵌入\",\n    \"advanced\": \"常用于嵌入第三方内容：<embed src='chart.swf' type='application/x-shockwave-flash' width='400' height='300'>。现代网页逐渐被iframe替代，但在遗留系统中仍可见\",\n    \"expert\": \"底层通过浏览器插件架构实现，依赖NPAPI/PPAPI等接口。由于安全性和性能问题，HTML5推荐使用<object>或<iframe>替代。最佳实践应避免在新项目中使用，对已嵌入内容需做好降级处理\"\n  },\n  \"fieldset\": {\n    \"basic\": \"fieldset是HTML表单分组元素，用于将相关控件组合在一起\",\n    \"intermediate\": \"语法为<fieldset><legend>标题</legend>表单",
      "summary": "HTML 中的 `<dl>`、`<dt>` 和 `<dd>` 标签用于定义术语及其描述。",
      "source": "contents.json"
    },
    {
      "text": "\"basic\": \"fieldset是HTML表单分组元素，用于将相关控件组合在一起\",\n    \"intermediate\": \"语法为<fieldset><legend>标题</legend>表单控件</fieldset>，legend定义分组标题，常与表单元素配合使用增强可访问性\",\n    \"advanced\": \"典型应用是复杂表单的分区，如注册页的个人信息/支付信息分组。示例：<fieldset><legend>联系方式</legend><input type='text' name='phone'></fieldset>\",\n    \"expert\": \"底层通过创建独立格式化上下文实现视觉隔离，浏览器默认添加2px边框和padding。最佳实践是始终配合legend使用以提升屏幕阅读器识别，CSS重置时需注意保留原生可访问性特性，现代前端框架中仍推荐使用原生标签而非div模拟\"\n  },\n  \"figcaption\": {\n    \"basic\": \"figcaption是HTML5标签，用于定义figure元素的标题\",\n    \"intermediate\": \"必须嵌套在figure标签内使用，语法为<figcaption>标题内容</figcaption>，支持所有全局属性，通常显示在figure内容的上方或下方\",\n    \"advanced\": \"适用于图片组、图表、代码示例等需要说明的媒体内容。示例：<figure><img src='chart.png'><figcaption>图1：2023年销售趋势</figcaption></figure>，增强语义化和无障碍访问\",\n    \"expert\": \"作为HTML5语义化标签，figcaption通过DOM树与figure建立父子关系，浏览器会将其渲染为块级元素。最佳实践是与aria-label配合使用，确保屏幕阅读器能正确识别标题与内容的关联关系，提升可访问性\"\n  },\n  \"figure\": {\n    \"basic\": \"<figure>是HTML5语义化标签，用于包裹独立内容如图片、图表或代码示例\",\n    \"intermediate\": \"通常与<figcaption>配合使用，语法为<figure>内容<figcaption>标题</figcaption></figure>，支持CSS样式控制布局\",\n    \"advanced\": \"适用于图文混排场景，如技术文档中的代码演示：<figure><pre>const data = {id:1}</pre><figcaption>示例代码</figcaption></figure>，也可用于响应式图片组\",\n    \"expert\": \"作为文档流中的独立内容单元，与上下文形成语义隔离。浏览器会将其视为BFC(块级格式上下文)，内部元素垂直排列。最佳实践是确保<figcaption>作为首/末子元素以提升可访问性，并配合ARIA标签增强屏幕阅读器识别\"\n  },\n  \"footer\": {\n    \"basic\": \"HTML5语义化标签，定义文档或章节的页脚区域\",\n    \"intermediate\": \"通常包含版权信息、作者信息或相关链接，位于文档底部，可嵌套address等元素，支持全局属性\",\n    \"advanced\": \"适用于网页底部版权声明区块，示例：<footer><p>© 2023 公司名称</p><address>联系方式</address></footer>\",\n    ",
      "summary": "HTML标签摘要：\n1. fieldset：分组表单控件，增强可访问性。\n2. figcaption：定义figure标题，提升无障碍访问。\n3. figure：包裹独立内容，增强文档结构语义。\n4. footer：定义文档页脚，包含版权和联系信息。",
      "source": "contents.json"
    },
    {
      "text": "\n    \"advanced\": \"适用于网页底部版权声明区块，示例：<footer><p>© 2023 公司名称</p><address>联系方式</address></footer>\",\n    \"expert\": \"作为HTML5语义化标签之一，footer通过定义内容区域提升可访问性，浏览器将其识别为页脚内容区块，SEO中作为辅助信息权重较低，但能增强文档结构清晰度，一个页面可出现多次但需保持语义合理性\"\n  },\n  \"form\": {\n    \"basic\": \"HTML表单容器，用于收集用户输入数据并通过HTTP请求提交到服务器\",\n    \"intermediate\": \"基本语法包含action(提交地址)、method(GET/POST)、enctype(编码类型)等属性。可包含input/select/button等交互元素\",\n    \"advanced\": \"典型应用包括登录/注册/搜索表单。代码示例：<form action='/login' method='POST'><input name='username'><input type='password' name='pwd'><button>提交</button></form>\",\n    \"expert\": \"底层通过FormData API构建键值对数据，GET方法将参数编码在URL中，POST通过请求体发送。现代SPA应用中常被fetch API替代，但仍是SEO友好且无JS环境下的回退方案。注意CSRF防护和表单验证最佳实践\"\n  },\n  \"h1\": {\n    \"basic\": \"HTML顶级标题标签，定义文档主标题，默认显示为最大字号\",\n    \"intermediate\": \"语法为<h1>标题内容</h1>，一个页面建议只使用一次，用于标明页面核心主题，具有最高语义权重\",\n    \"advanced\": \"SEO优化关键元素，通常用于页面主标题。示例：<h1>商品详情页</h1>配合<h2>商品参数</h2>等次级标题构成文档结构\",\n    \"expert\": \"浏览器默认赋予2em字号和bold样式，通过document.querySelector('h1')可访问DOM节点。HTML5规范要求其反映当前页面/章节主题，不应滥用。搜索引擎将其作为页面主题重要指标，应与<title>标签内容保持语义关联\"\n  },\n  \"h2\": {\n    \"basic\": \"HTML二级标题标签，用于定义文档中的次级章节标题\",\n    \"intermediate\": \"语法为<h2>标题内容</h2>，在HTML文档中按语义化层级排列，应位于<h1>之后且层级高于<h3>，默认显示为加粗的中等字号文本\",\n    \"advanced\": \"典型应用包括文章子章节、侧边栏模块标题等场景。示例：<h2>产品特点</h2>后跟随段落文本，或<h2 class='sidebar-title'>相关推荐</h2>配合CSS样式\",\n    \"expert\": \"作为HTML5大纲算法的关键元素，h2参与构建文档结构树。浏览器默认样式通过user-agent stylesheet定义，SEO中权重仅次于h1。最佳实践要求保持层级连续性(不跳过h2直接使用h3)，并避免过度嵌套\"\n  },\n  \"h3\": {\n    \"basic\": \"HTML标题标签，定义第三级标题，具有语义化层级结构\",\n    \"intermediate\": \"语法为<h3>标题内容</",
      "summary": "HTML标题标签，定义第三级标题，用于次级内容分层。",
      "source": "contents.json"
    },
    {
      "text": "避免过度嵌套\"\n  },\n  \"h3\": {\n    \"basic\": \"HTML标题标签，定义第三级标题，具有语义化层级结构\",\n    \"intermediate\": \"语法为<h3>标题内容</h3>，默认显示为加粗文本，字号介于h2和h4之间，会创建新的块级上下文\",\n    \"advanced\": \"用于文章子章节/侧边栏标题等场景，应与h1-h2保持逻辑层级关系。示例：<h3>用户评论</h3>配合<section>使用，形成文档大纲结构\",\n    \"expert\": \"作为heading content元素参与文档大纲算法，影响SEO和可访问性。浏览器默认样式可通过CSS重置，但应保持视觉层级。屏幕阅读器会将其识别为三级导航节点，滥用会导致文档结构混乱\"\n  },\n  \"h4\": {\n    \"basic\": \"HTML4级标题标签，用于定义文档中的次级标题\",\n    \"intermediate\": \"语法为<h4>标题内容</h4>，在HTML文档中表示第四层级标题，默认显示为加粗的中等字号文本\",\n    \"advanced\": \"适用于内容结构中的第四级分类，如文章子章节的小标题。示例：<h4>3.1.2 性能优化</h4>，常与CSS配合实现层级样式\",\n    \"expert\": \"作为HTML标题元素(h1-h6)中的第四级，具有语义化价值，影响SEO和可访问性。浏览器默认样式为font-size:1em/margin-top:1.33em，可通过CSS重置。应保持标题层级逻辑性，避免跳过h4直接使用h5\"\n  },\n  \"h5\": {\n    \"basic\": \"HTML5标题标签，定义第五级标题\",\n    \"intermediate\": \"语义化标签，用于文档层级结构，默认字号小于h4大于h6，支持全局属性\",\n    \"advanced\": \"适用于副标题或章节小标题，常与section/article嵌套使用。示例：<section><h5>性能优化</h5><p>缓存策略...</p></section>\",\n    \"expert\": \"作为HTML标题元素层级的一部分，h5在文档大纲算法中生成第五级节点。浏览器默认样式表定义其font-size为0.83em，margin-top/bottom为1.67em。SEO权重低于h1但高于普通文本，应与heading层次结构配合使用\"\n  },\n  \"h6\": {\n    \"basic\": \"HTML第六级标题标签，用于定义文档中最小的标题层级\",\n    \"intermediate\": \"语法为<h6>标题内容</h6>，默认显示为最小字号标题，通常用于版权信息或辅助性小标题\",\n    \"advanced\": \"适用于页面底部次要信息展示，如版权声明：<h6>© 2023 公司名称 保留所有权利</h6>，常配合CSS降低视觉权重\",\n    \"expert\": \"作为HTML标题层级体系的末端，h6的语义权重最低但仍是文档结构的重要组成部分。浏览器默认样式为font-size:0.67em，现代开发中应通过CSS重置其样式以保持设计系统一致性，同时确保屏幕阅读器能正确识别其语义角色\"\n  },\n  \"head\": {\n    \"basic\": \"HTML文档头部容器，包含元数据、标题和外部资源链接\",\n    \"intermediate\": \"位于<html>标签内，包含<meta>、<title>、<link>等子元素，用于定义文档属性、引入CSS/",
      "summary": "HTML标题标签用于定义不同层级的标题，影响文档结构和可访问性。",
      "source": "contents.json"
    },
    {
      "text": "档头部容器，包含元数据、标题和外部资源链接\",\n    \"intermediate\": \"位于<html>标签内，包含<meta>、<title>、<link>等子元素，用于定义文档属性、引入CSS/JS和设置视口\",\n    \"advanced\": \"SEO优化关键区域，包含字符集声明、视口设置和预加载资源。示例：<meta charset='UTF-8'><meta name='viewport' content='width=device-width'><link rel='stylesheet' href='style.css'>\",\n    \"expert\": \"浏览器解析时优先处理<head>内容，其中<meta http-equiv>可模拟HTTP头，预加载资源通过rel=preload提升性能，搜索引擎主要抓取此区域的标题、描述和关键词元数据\"\n  },\n  \"header\": {\n    \"basic\": \"HTML5语义化标签，表示页面或章节的头部内容区域\",\n    \"intermediate\": \"包裹导航链接、LOGO、搜索框等头部元素，替代div实现语义化。可包含h1-h6、nav等标签，每个页面建议只使用一个\",\n    \"advanced\": \"典型应用场景：网页顶部导航区。与main、footer配合构建页面结构。示例：<header><h1>网站标题</h1><nav><a href='/'>首页</a></nav></header>\",\n    \"expert\": \"作为文档大纲算法的关键节点，帮助屏幕阅读器识别内容结构。HTML5新增的语义化标签之一，与section/article等配合使用需注意嵌套关系。SEO中权重仅次于title，应包含关键词但避免堆砌\"\n  },\n  \"hr\": {\n    \"basic\": \"HTML水平分隔线标签，用于在页面中创建一条水平线\",\n    \"intermediate\": \"空标签语法为<hr>，可通过CSS样式控制线条粗细/颜色/边距等视觉表现，默认显示为1px灰色实线\",\n    \"advanced\": \"常用于文章章节分隔或表单区域划分。示例：<hr style='border: 2px dashed #ccc; margin: 20px 0'>创建虚线分隔线\",\n    \"expert\": \"浏览器将<hr>渲染为带阴影边框的块级元素，实际表现为border-style: inset的双边框效果。现代开发建议用CSS border替代以实现更精细控制，但语义上仍适合表示主题分隔\"\n  },\n  \"html\": {\n    \"basic\": \"HTML文档的根元素，包含所有其他HTML元素\",\n    \"intermediate\": \"作为文档容器，必须包含<head>和<body>子元素，lang属性声明文档语言。基本结构：<html><head></head><body></body></html>\",\n    \"advanced\": \"多语言网站开发时，通过<html lang='zh-CN'>指定中文内容。SPA应用中常与<!DOCTYPE>配合确保标准模式渲染。示例：<html lang='en'><head><meta charset='UTF-8'></head><body></body></html>\",\n    \"expert\": \"浏览器将<html>作为文档对象模型(DOM)的根节点，其解析触发DOMContentLoaded事件。现代浏",
      "summary": "HTML文档的根元素，包含<head>和<body>，指定文档语言。",
      "source": "contents.json"
    },
    {
      "text": "</head><body></body></html>\",\n    \"expert\": \"浏览器将<html>作为文档对象模型(DOM)的根节点，其解析触发DOMContentLoaded事件。现代浏览器通过文档类型声明决定渲染模式，quirks模式下<html>的盒模型处理存在差异。性能优化中应避免在<html>上直接绑定事件\"\n  },\n  \"i\": {\n    \"basic\": \"<i>标签用于表示斜体文本样式\",\n    \"intermediate\": \"HTML5中<i>标签语义上表示不同语气/声音的文本，通常浏览器会渲染为斜体。语法：<i>斜体内容</i>\",\n    \"advanced\": \"适用于技术术语/外语短语/角色内心独白等场景。示例：<p>在CSS中，<i>font-style</i>属性控制斜体显示</p>\",\n    \"expert\": \"现代Web开发中建议优先使用CSS的font-style:italic实现样式，而<i>应保留语义化用途。浏览器默认样式表包含i{font-style:italic}规则，但可通过CSS覆盖。与<em>的区别在于后者强调语义重要性，而<i>仅表示样式变化\"\n  },\n  \"iframe\": {\n    \"basic\": \"iframe是HTML内联框架元素，用于在当前文档中嵌入另一个网页\",\n    \"intermediate\": \"通过src属性指定嵌入内容URL，常用属性包括width/height控制尺寸，sandbox增强安全性，allow设置权限策略如摄像头访问\",\n    \"advanced\": \"常用于第三方内容嵌入(如地图/广告)、跨域隔离通信(postMessage)、微前端架构。示例：<iframe src='https://example.com' sandbox='allow-scripts' style='border:none'/>\",\n    \"expert\": \"底层通过浏览器进程隔离实现安全沙箱，每个iframe创建独立渲染上下文。性能优化需注意懒加载、资源预连接、动态尺寸调整。跨域限制遵循同源策略，CORS头部控制资源访问\"\n  },\n  \"img\": {\n    \"basic\": \"HTML图像标签，用于在网页中嵌入图片\",\n    \"intermediate\": \"通过src属性指定图片URL，alt属性提供替代文本。支持width/height设置尺寸，loading控制懒加载行为。\",\n    \"advanced\": \"常见于商品展示、相册等场景。响应式设计中配合srcset实现适配不同分辨率。示例：<img src='logo.png' alt='公司标志' width='200' loading='lazy' srcset='logo-2x.png 2x'>\",\n    \"expert\": \"浏览器解析时会发起独立HTTP请求获取图片资源。现代浏览器支持解码延迟(lazy loading)优化性能。srcset配合sizes属性可实现艺术方向切换(art direction)。注意跨域图片需配置CORS，WebP等新格式需考虑兼容性。\"\n  },\n  \"input\": {\n    \"basic\": \"HTML输入元素，用于创建交互式表单控件\",\n    \"intermediate\": \"通过type属性定义输入类型(text/password/checkbox等)，支持name/value/placeholder等属性，需配合form标",
      "summary": "HTML标签摘要：\n1. `<html>`：触发DOMContentLoaded事件，注意性能优化。\n2. `<i>`：表示斜体文本，建议语义化使用。\n3. `<iframe>`：嵌入外部网页，注意安全和性能优化。\n4. `<img>`：嵌入图片，支持懒加载和响应式设计。\n5. `<input>`：创建表单控件，支持多种输入类型。",
      "source": "contents.json"
    },
    {
      "text": "\",\n    \"intermediate\": \"通过type属性定义输入类型(text/password/checkbox等)，支持name/value/placeholder等属性，需配合form标签使用\",\n    \"advanced\": \"用于登录表单、搜索框、文件上传等场景。示例：<input type='email' name='user-email' placeholder='输入邮箱' required>，支持HTML5新增类型(date/color/number)和验证属性\",\n    \"expert\": \"底层映射为浏览器原生表单控件，不同type对应不同DOM接口(如HTMLInputElement/HTMLTextAreaElement)。现代浏览器通过Shadow DOM实现样式隔离，建议使用label关联提高可访问性，注意XSS防护避免直接输出用户输入\"\n  },\n  \"ins\": {\n    \"basic\": \"<ins>标签用于定义插入到文档中的文本，通常显示为带下划线的内容\",\n    \"intermediate\": \"语法为<ins>被插入文本</ins>，与<del>标签对应表示文档修改。datetime属性可记录修改时间，cite属性可引用修改原因\",\n    \"advanced\": \"适用于版本对比场景，如论文修订或代码变更记录。示例：<ins datetime='2023-01-01' cite='fix-typo'>修正拼写错误</ins>，常配合CSS设置特殊背景色\",\n    \"expert\": \"底层表现为行内元素，默认样式为text-decoration: underline。SEO中表示内容更新权重，应与<del>配对使用以保持文档语义完整性。datetime需符合ISO 8601格式，cite的URL应指向变更说明文档\"\n  },\n  \"kbd\": {\n    \"basic\": \"HTML键盘输入标签，用于表示用户键盘输入内容\",\n    \"intermediate\": \"语义化标签，默认显示等宽字体。语法：<kbd>内容</kbd>，常与<code>标签配合使用表示键盘快捷键组合\",\n    \"advanced\": \"主要用于技术文档中标注快捷键操作，如：按<kbd>Ctrl</kbd>+<kbd>S</kbd>保存。浏览器默认添加monospace字体和浅灰色背景样式，可通过CSS覆盖\",\n    \"expert\": \"作为语义化标签，其样式与<code>标签相似但语义不同。W3C规范建议仅用于实际键盘输入场景。现代前端框架中仍保留原生语义，但需注意与ARIA角色的配合使用以确保无障碍访问。底层渲染采用行内元素特性，默认user-select:none防止误选\"\n  },\n  \"label\": {\n    \"basic\": \"HTML label标签用于关联表单控件，提升可访问性和用户体验\",\n    \"intermediate\": \"通过for属性绑定对应控件的id，或直接包裹表单元素。点击label可聚焦关联控件，适用于checkbox/radio等场景\",\n    \"advanced\": \"典型应用是表单输入项标注。代码示例：<label for='username'>用户名</label><input id='username'>。移动端适配时建议使用包裹式label确保点击区域\",\n    \"expert\": \"底层通过DOM的focus()事件委托实现控件聚焦。WAI-ARI",
      "summary": "HTML标签“label”用于关联表单控件，提升交互体验。",
      "source": "contents.json"
    },
    {
      "text": "el><input id='username'>。移动端适配时建议使用包裹式label确保点击区域\",\n    \"expert\": \"底层通过DOM的focus()事件委托实现控件聚焦。WAI-ARIA规范要求必须显式关联，屏幕阅读器依赖这种关联读取标签文本。最佳实践是始终使用for/id绑定而非嵌套，避免表单组件结构变化导致关联失效\"\n  },\n  \"legend\": {\n    \"basic\": \"legend标签用于定义fieldset元素的标题，显示在边框顶部\",\n    \"intermediate\": \"语法为<legend>标题文本</legend>，必须作为fieldset的第一个子元素，支持全局属性，默认显示在左上角边框线处\",\n    \"advanced\": \"用于表单分组时提供视觉区分，常见于复杂表单的区块划分。示例：<fieldset><legend>用户信息</legend>姓名：<input type='text'></fieldset>\",\n    \"expert\": \"底层通过CSS伪元素实现定位，浏览器默认添加display:block和padding样式。最佳实践是保持简短标题，避免嵌套，可通过CSS修改位置和样式，但需注意跨浏览器兼容性问题\"\n  },\n  \"li\": {\n    \"basic\": \"HTML列表项标签，用于定义有序或无序列表中的单个项目\",\n    \"intermediate\": \"必须嵌套在<ul>或<ol>中使用，可包含文本/图片/链接等内联元素，支持全局属性如class/id\",\n    \"advanced\": \"典型应用：导航菜单/商品列表/步骤说明。示例：<ul><li>首页</li><li>产品</li><li>关于</li></ul>\",\n    \"expert\": \"浏览器默认添加list-style-type和margin样式，可通过CSS重置。在无障碍访问中，屏幕阅读器会播报列表项数量。DOM接口为HTMLLIElement，支持value属性控制有序列表序号\"\n  },\n  \"link\": {\n    \"basic\": \"HTML link标签用于链接外部资源到文档，通常用于CSS样式表或网站图标。\",\n    \"intermediate\": \"link标签必须放在head内，通过rel属性指定关系类型，href指定资源路径。常用属性包括rel、href、type、media等，支持预加载和DNS预解析。\",\n    \"advanced\": \"主要应用场景：1)引入CSS文件：<link rel='stylesheet' href='style.css'> 2)设置favicon：<link rel='icon' href='favicon.ico'> 3)预加载关键资源：<link rel='preload' href='font.woff2' as='font'>\",\n    \"expert\": \"浏览器解析link标签时会建立新的网络请求，rel=preload可强制提前加载关键资源。现代浏览器会对link资源进行优先级排序，preconnect可提前建立TCP连接。多属性组合使用时需注意资源加载顺序对页面性能的影响，如media查询适配不同设备的样式加载策略。\"\n  },\n  \"main\": {\n    \"basic\": \"<main>是HTML5语义化标签，表示文档主要内容区域\",\n    \"intermediate\": \"一个文档应只有一个<main>，通常包",
      "summary": "HTML标签总结：`el`、`legend`、`li`、`link`和`main`的功能与最佳实践。",
      "source": "contents.json"
    },
    {
      "text": "},\n  \"main\": {\n    \"basic\": \"<main>是HTML5语义化标签，表示文档主要内容区域\",\n    \"intermediate\": \"一个文档应只有一个<main>，通常包含页面的核心内容。需配合<header>/<footer>使用，不能作为后代元素出现在这些标签内\",\n    \"advanced\": \"典型场景：博客文章主体/电商商品详情。结构示例：<main><article><h1>标题</h1><p>正文内容...</p></article></main>\",\n    \"expert\": \"WAI-ARIA规范中main角色默认对应此标签，浏览器会建立可访问性树。SEO优化时，搜索引擎会优先抓取<main>内内容。应避免嵌套多个<main>导致语义混乱，现代SPA应用需动态更新时保持单例\"\n  },\n  \"map\": {\n    \"basic\": \"HTML <map>标签定义客户端图像映射，与<area>配合创建可点击区域\",\n    \"intermediate\": \"<map>需配合<img>使用，通过name属性关联。包含多个<area>定义形状(coords)和链接(href)，支持矩形/圆形/多边形三种区域类型\",\n    \"advanced\": \"用于图片热区导航，如电商网站商品图分区跳转。示例：<img src='planets.jpg' usemap='#planetmap'><map name='planetmap'><area shape='rect' coords='0,0,82,126' href='sun.htm'></map>\",\n    \"expert\": \"底层通过坐标映射实现，浏览器将点击事件坐标与<area>的coords进行几何匹配。性能优化需注意：复杂多边形计算开销大，移动端需考虑触控精度。现代开发更倾向使用SVG或CSS+JS方案实现类似效果\"\n  },\n  \"mark\": {\n    \"basic\": \"mark标签用于高亮显示文本中的特定内容\",\n    \"intermediate\": \"HTML5语义化标签，默认黄色背景。语法：<mark>高亮文本</mark>，适用于需要视觉强调的场景\",\n    \"advanced\": \"在搜索结果显示关键词高亮时使用。示例：<p>搜索结果：这是<mark>关键词</mark>的匹配内容</p>。CSS可覆盖默认样式\",\n    \"expert\": \"底层通过CSS伪元素实现高亮效果，默认应用background-color: yellow。最佳实践是与aria-label配合增强可访问性，避免滥用影响阅读流畅性。浏览器兼容性良好，但IE9以下需polyfill\"\n  },\n  \"menu\": {\n    \"basic\": \"<menu>定义上下文菜单或工具栏命令列表的容器元素\",\n    \"intermediate\": \"HTML5废弃元素，原用于创建弹出式菜单。现代替代方案应使用<ul>+CSS或自定义组件实现类似功能。语法为<menu><li>命令1</li></menu>\",\n    \"advanced\": \"历史用法中配合type='context'创建右键菜单，现已被废弃。示例：<menu type='context' id='filemenu'><menuitem label='新建'></menuitem></menu>。现代开发推荐使用自定义UI组件实现类似交互\",\n    \"expert\": \"该标签因缺",
      "summary": "HTML5标签：<main>、<map>、<mark>和<menu>的功能简介及使用注意事项。",
      "source": "contents.json"
    },
    {
      "text": "' id='filemenu'><menuitem label='新建'></menuitem></menu>。现代开发推荐使用自定义UI组件实现类似交互\",\n    \"expert\": \"该标签因缺乏标准化实现和可访问性问题被HTML5废弃。浏览器支持度差且存在替代方案。底层原理是通过DOM事件触发菜单显示，但现代框架更倾向使用语义化结构+ARIA角色实现可访问菜单。最佳实践是改用role='menu'的div结构配合JavaScript控制\"\n  },\n  \"meta\": {\n    \"basic\": \"HTML元数据标签，用于定义文档的元信息和配置\",\n    \"intermediate\": \"位于<head>内，通过name/content或http-equiv/content属性组合定义字符集、视口、关键词等元信息，如<meta charset='UTF-8'>\",\n    \"advanced\": \"SEO优化设置关键词和描述，移动端适配控制视口缩放。示例：<meta name='viewport' content='width=device-width, initial-scale=1.0'><meta name='description' content='页面描述文本'>\",\n    \"expert\": \"浏览器通过解析meta标签构建文档初始渲染上下文，charset定义优先于HTTP头部的编码声明。视口meta控制布局视口与可视视口的缩放比例，移动端开发必须配置。搜索引擎会缓存description内容用于摘要展示，但权重已降低。\"\n  },\n  \"meter\": {\n    \"basic\": \"HTML5进度条标签，用于显示标量值在已知范围内的度量值\",\n    \"intermediate\": \"语法为<meter value='当前值' min='最小值' max='最大值'>，支持low/high/optimum属性控制颜色阈值\",\n    \"advanced\": \"适用于磁盘用量、投票结果等可视化场景。示例：<meter value='65' min='0' max='100' low='30' high='80' optimum='60'>65%</meter>\",\n    \"expert\": \"底层通过CSS伪元素::-webkit-meter-*实现样式定制，实际测量值通过ARIA属性暴露给无障碍工具。最佳实践是始终提供fallback文本内容，并与progress标签区分使用场景\"\n  },\n  \"nav\": {\n    \"basic\": \"HTML导航链接容器标签，用于定义页面主导航区域\",\n    \"intermediate\": \"语义化标签，包含一组导航链接，通常位于页眉/页脚。语法：<nav>包含<a>等链接元素，可配合ul/li使用提升可访问性\",\n    \"advanced\": \"用于页面主要导航菜单、面包屑、分页等场景。示例：<nav><ul><li><a href='/'>首页</a></li><li><a href='/about'>关于</a></li></ul></nav>\",\n    \"expert\": \"作为HTML5语义化标签，帮助屏幕阅读器识别导航区域。浏览器会赋予默认ARIA role='navigation'。最佳实践应确保导航结构清晰，避免嵌套过多层级，移动端需考虑响应式设计\"\n  },\n  \"noscript\": {\n    \"basic\": \"<noscript>定义当浏",
      "summary": "HTML标签：用于定义文档元信息、导航区域及无脚本环境的备选内容。",
      "source": "contents.json"
    },
    {
      "text": "e='navigation'。最佳实践应确保导航结构清晰，避免嵌套过多层级，移动端需考虑响应式设计\"\n  },\n  \"noscript\": {\n    \"basic\": \"<noscript>定义当浏览器不支持或禁用JavaScript时显示的替代内容\",\n    \"intermediate\": \"语法为<noscript>替代内容</noscript>，必须放在<body>内。当JS被禁用时显示其内容，否则忽略\",\n    \"advanced\": \"常用于优雅降级场景，例如显示JS依赖提示或基础功能替代方案。示例：<noscript><p>请启用JS以获得完整功能</p></noscript>\",\n    \"expert\": \"底层通过解析器特殊标记实现，浏览器在JS引擎初始化前预解析该标签。现代SPA中可用于SSR兼容方案，但需注意SEO可能将其视为真实内容。最佳实践是仅包含必要提示而非完整UI\"\n  },\n  \"object\": {\n    \"basic\": \"<object>标签用于嵌入外部资源如PDF或Flash\",\n    \"intermediate\": \"通过data属性指定资源URL，type定义MIME类型，可包含替代内容。基本语法：<object data='file.pdf' type='application/pdf'>替代文本</object>\",\n    \"advanced\": \"常用于嵌入PDF文档或旧版Flash内容。示例：<object data='presentation.swf' type='application/x-shockwave-flash' width='600' height='400'><param name='movie' value='presentation.swf'/>浏览器不支持Flash</object>\",\n    \"expert\": \"底层通过浏览器插件架构实现资源渲染，现代开发中逐渐被<iframe>和<embed>替代。安全考虑需验证资源来源，性能上建议预加载大文件，并始终提供fallback内容以增强可访问性\"\n  },\n  \"ol\": {\n    \"basic\": \"有序列表标签，用于展示带编号的项目序列\",\n    \"intermediate\": \"语法为<ol><li>项目1</li><li>项目2</li></ol>，支持type属性设置编号类型(1/a/A/i/I)，start属性设置起始值\",\n    \"advanced\": \"适用于步骤说明、排名展示等场景。示例：<ol type='a' start='3'><li>第三步</li><li>第四步</li></ol>表示从c开始的小写字母编号\",\n    \"expert\": \"浏览器默认通过CSS list-style-type实现编号样式，现代浏览器会为每个li生成伪元素::marker。建议优先使用CSS控制样式而非HTML属性，以保持样式与结构分离。反向列表可通过reversed属性实现，但兼容性需注意\"\n  },\n  \"optgroup\": {\n    \"basic\": \"<optgroup>用于在<select>中创建选项分组，通过label属性设置分组名称\",\n    \"intermediate\": \"必须嵌套在<select>中使用，包含一个label属性和多个<option>。语法：<optgroup label='分组名'><option>选项1</option></optgroup>\",\n",
      "summary": "HTML标签摘要：\n1. navigation：确保移动端响应式，导航清晰。\n2. noscript：定义无JavaScript时的替代内容。\n3. object：嵌入外部资源，如PDF或Flash。\n4. ol：有序列表，支持自定义编号类型和起始值。\n5. optgroup：在select中分组选项，便于选择管理。",
      "source": "contents.json"
    },
    {
      "text": "\"必须嵌套在<select>中使用，包含一个label属性和多个<option>。语法：<optgroup label='分组名'><option>选项1</option></optgroup>\",\n    \"advanced\": \"适用于需要分类展示的下拉选项，如按地区分类的城市选择。示例：<select><optgroup label='北方'><option>北京</option></optgroup><optgroup label='南方'><option>广州</option></optgroup></select>\",\n    \"expert\": \"底层通过fieldset/legend的ARIA角色实现可访问性分组。最佳实践：分组不宜超过3层，移动端需注意触控区域。浏览器会为optgroup添加默认样式并禁用点击，但可通过CSS修改外观\"\n  },\n  \"option\": {\n    \"basic\": \"HTML select元素的下拉选项项，用于定义可选列表项\",\n    \"intermediate\": \"必须嵌套在select或datalist元素内，value属性表示提交值，selected属性设置默认选中\",\n    \"advanced\": \"表单下拉选择场景，常与label配合使用。示例：<select><option value='1'>选项1</option><option value='2' selected>选项2</option></select>\",\n    \"expert\": \"底层通过浏览器原生控件实现，value不设置时默认使用文本内容。性能优化需避免动态生成大量option，推荐虚拟滚动方案。与datalist配合可实现自动补全功能，但样式定制受浏览器限制较大\"\n  },\n  \"output\": {\n    \"basic\": \"HTML文档根元素，包含整个页面内容\",\n    \"intermediate\": \"作为文档容器，必须包含<head>和<body>，lang属性声明页面语言。DOCTYPE声明必须位于其前\",\n    \"advanced\": \"多语言网站开发时，通过lang属性实现SEO优化和屏幕阅读器适配。示例：<html lang='zh-CN'>。配合manifest属性可实现PWA离线缓存\",\n    \"expert\": \"浏览器解析时会将<html>作为DOM树的根节点。HTML5规范要求其作为文档唯一根元素，与XML不同。在Shadow DOM中仍保持最高层级，但可能包含多个影子DOM树。现代框架仍依赖其作为挂载点\"\n  },\n  \"p\": {\n    \"basic\": \"HTML段落标签，用于定义文本段落\",\n    \"intermediate\": \"双标签结构<p>内容</p>，浏览器会自动添加上下边距，支持全局属性如class/id\",\n    \"advanced\": \"文章排版场景：<p>这是第一段</p><p>这是第二段</p>。配合CSS可实现首行缩进：p { text-indent: 2em }\",\n    \"expert\": \"浏览器渲染时会将<p>转换为块级盒模型，默认带有16px上下margin。语义上表示逻辑段落，屏幕阅读器会识别为段落停顿。HTML5规范要求<p>不能嵌套，且不能包含块级元素\"\n  },\n  \"picture\": {\n    \"basic\": \"HTML5的<picture>元素用于响应式图片加载，根据设备条件选择不同图像源\",\n    \"i",
      "summary": "HTML `<picture>` 元素用于响应式图片加载，支持多种图像源选择。",
      "source": "contents.json"
    },
    {
      "text": ">不能嵌套，且不能包含块级元素\"\n  },\n  \"picture\": {\n    \"basic\": \"HTML5的<picture>元素用于响应式图片加载，根据设备条件选择不同图像源\",\n    \"intermediate\": \"语法结构包含<source>子元素和必选的<img>后备标签，通过media/sizes/srcset属性匹配条件，浏览器自动选择最佳图像源\",\n    \"advanced\": \"适用于艺术方向(art direction)和分辨率切换场景，如不同视口显示裁切版本，高清屏加载2x图片。示例：<picture><source media='(min-width: 800px)' srcset='large.jpg'><source media='(min-width: 400px)' srcset='medium.jpg'><img src='small.jpg'></picture>\",\n    \"expert\": \"底层实现基于浏览器环境检测和资源预加载机制，解析时会先检查<source>条件，匹配则中断后续请求。最佳实践需配合现代图像格式(WebP/AVIF)和懒加载，注意与srcset属性的区别：picture处理完全不同的图像(art direction)，而srcset处理同一图像的不同分辨率版本\"\n  },\n  \"pre\": {\n    \"basic\": \"HTML预格式化标签，保留文本中的空格和换行\",\n    \"intermediate\": \"使用<pre>标签包裹需要保持原始格式的文本，浏览器会以等宽字体显示并保留所有空白字符\",\n    \"advanced\": \"常用于显示代码片段、ASCII艺术或需要精确对齐的文本。示例：<pre>function test() {\\n  console.log('Hello');\\n}</pre>\",\n    \"expert\": \"浏览器会将<pre>内容视为预格式化文本，不进行HTML解析和空白折叠。CSS默认设置white-space:pre，需注意内容溢出时需手动处理，建议配合<code>标签使用增强语义\"\n  },\n  \"progress\": {\n    \"basic\": \"progress标签用于显示任务的完成进度，是HTML5新增的元素。\",\n    \"intermediate\": \"progress标签包含value(当前值)和max(最大值)两个属性，默认显示为进度条样式。基本语法：<progress value='70' max='100'></progress>\",\n    \"advanced\": \"常用于文件上传、表单填写等需要显示进度的场景。示例：文件上传时动态更新进度：document.getElementById('uploadProgress').value = loadedBytes / totalBytes * 100\",\n    \"expert\": \"底层通过浏览器原生UI组件实现，不同浏览器渲染样式可能不同。最佳实践是配合JS动态更新value值，并添加ARIA属性增强可访问性。现代前端框架中应避免直接操作DOM，而是通过状态管理更新进度值。\"\n  },\n  \"q\": {\n    \"basic\": \"<q>标签用于定义短的行内引用，浏览器通常会自动添加引号\",\n    \"intermediate\": \"语法为<q cite=\\\"来源URL\\\">引用内容</q>，cite属性可选用于标明引用来源。与<blockquote>的区别",
      "summary": "HTML5中<progress>元素用于显示任务进度，支持value和max属性。",
      "source": "contents.json"
    },
    {
      "text": "，浏览器通常会自动添加引号\",\n    \"intermediate\": \"语法为<q cite=\\\"来源URL\\\">引用内容</q>，cite属性可选用于标明引用来源。与<blockquote>的区别在于它是行内元素而非块级元素\",\n    \"advanced\": \"适用于文章中的短句引用场景，如论文中的文献引用。示例：<p>正如<q cite=\\\"https://example.com\\\">前端开发需要语义化</q>这句话所述</p>\",\n    \"expert\": \"底层通过CSS伪元素::before和::after自动添加引号，不同语言环境引号样式不同。最佳实践是重要引用应配合<cite>标签说明来源，对于长引用建议使用<blockquote>以保证可访问性\"\n  },\n  \"rp\": {\n    \"basic\": \"<rp>标签用于在不支持ruby注释的浏览器中显示替代内容\",\n    \"intermediate\": \"<rp>必须作为<ruby>的子元素，与<rt>配合使用，语法：<ruby>基字<rp>(</rp><rt>注音</rt><rp>)</rp></ruby>\",\n    \"advanced\": \"主要用于东亚文字注音场景，当浏览器不支持ruby时显示括号包裹的注音。示例：<ruby>漢<rp>(</rp><rt>han</rt><rp>)</rp></ruby>会显示为'漢(han)'\",\n    \"expert\": \"作为ruby注解的降级方案，其设计遵循HTML5的渐进增强原则。现代浏览器会忽略<rp>内容，而旧版浏览器会将其作为fallback显示。最佳实践是始终包含<rp>以确保兼容性，特别是在多语言场景中\"\n  },\n  \"rt\": {\n    \"basic\": \"<rt>标签用于在<ruby>中定义字符的发音注解\",\n    \"intermediate\": \"必须作为<ruby>的子元素使用，位于<rp>或文本后，语法：<ruby>汉<rt>hàn</rt>字</ruby>\",\n    \"advanced\": \"主要用于东亚文字注音场景，如日文假名或中文拼音标注。示例：<ruby>東京<rt>とうきょう</rt></ruby>会显示汉字上方有小字号假名注音\",\n    \"expert\": \"浏览器通过CSS ruby-position属性控制<rt>显示位置，默认在上方。现代浏览器采用CSS Ruby Layout Module规范实现，需注意旧版IE兼容性问题。最佳实践是始终包含<rp>标签作为回退方案\"\n  },\n  \"ruby\": {\n    \"basic\": \"HTML5的<ruby>标签用于为东亚文字添加注音或注释\",\n    \"intermediate\": \"<ruby>标签需配合<rt>使用，<rt>包含注音内容，可选的<rp>为不支持ruby的浏览器提供后备显示\",\n    \"advanced\": \"主要用于汉字注音场景，如日文汉字标注假名或中文生僻字注音。示例：<ruby>漢<rt>かん</rt>字<rt>じ</rt></ruby>会显示汉字上方有小字假名标注\",\n    \"expert\": \"通过CSS伪元素实现注音上标效果，现代浏览器已原生支持。最佳实践应始终包含<rp>兼容旧浏览器，注音文本需保持语义化且与主文本关联，WCAG建议注音字号应为基准字号的50%-70%\"\n  },\n  \"s\": {\n    \"basic\": \"<s>是HTML中的删除线标签，用于表示已删除的文本内容\",\n",
      "summary": "HTML中用于引用的<q>标签及其实用场景和注意事项。",
      "source": "contents.json"
    },
    {
      "text": "本需保持语义化且与主文本关联，WCAG建议注音字号应为基准字号的50%-70%\"\n  },\n  \"s\": {\n    \"basic\": \"<s>是HTML中的删除线标签，用于表示已删除的文本内容\",\n    \"intermediate\": \"<s>标签在HTML5中定义，用于呈现不再准确或相关的文本。语法为<s>被删除文本</s>，浏览器默认会添加删除线样式\",\n    \"advanced\": \"适用于电商网站显示原价、文档修订记录等场景。示例：<p>现价：299 <s>原价：599</s></p>。注意HTML5推荐用<del>表示文档删除，<s>仅用于样式删除\",\n    \"expert\": \"<s>标签的删除线效果通过浏览器默认CSS text-decoration: line-through实现。与<del>不同，<s>不携带语义信息，仅表示视觉删除。在无障碍访问中，屏幕阅读器不会特别处理<s>内容，因此重要删除信息应配合aria-label使用\"\n  },\n  \"samp\": {\n    \"basic\": \"<samp>标签用于表示计算机程序输出样本，是HTML内联语义元素\",\n    \"intermediate\": \"语法为<samp>示例文本</samp>，默认显示为等宽字体。常与<code>配合使用，表示程序运行输出结果而非源代码\",\n    \"advanced\": \"主要应用在技术文档中展示命令行输出或程序运行结果。例如：<samp>Error 404: File not found</samp>。与<kbd>标签组合可构建交互式教程：用户<kbd>输入</kbd> → 系统<samp>响应</samp>\",\n    \"expert\": \"底层通过CSS的font-family: monospace实现等宽效果。语义上区别于<code>（表示源代码）和<pre>（保留格式的块级元素）。SEO中会被识别为技术内容标记，现代浏览器默认样式为user-agent stylesheet定义的monospace字体，可通过CSS自定义外观但需保持可读性\"\n  },\n  \"script\": {\n    \"basic\": \"HTML script标签用于嵌入或引用可执行脚本，通常为JavaScript代码\",\n    \"intermediate\": \"script标签可放在head或body中，通过src属性引用外部脚本，或直接在标签内编写代码。type属性默认为text/javascript，async/defer控制加载行为\",\n    \"advanced\": \"用于页面交互逻辑、动态内容加载和第三方库引入。示例：<script src='app.js'></script> 或 <script>alert('Hello')</script>。现代开发常配合模块化使用\",\n    \"expert\": \"浏览器解析遇到script会暂停HTML解析执行脚本。defer使脚本在DOM解析后执行，async允许异步加载。现代SPA框架利用script动态加载实现路由和组件懒加载，需注意跨域安全和性能优化\"\n  },\n  \"section\": {\n    \"basic\": \"HTML5语义化标签，用于定义文档中的章节内容\",\n    \"intermediate\": \"语法为<section>内容</section>，通常包含标题(h1-h6)和段落，表示文档中独立的内容区块\",\n    \"advanced\": \"适用于文章章节、标签页内容区等场景。",
      "summary": "WCAG建议注音字号应为基准字号的50%-70%，以保持语义化和关联性。",
      "source": "contents.json"
    },
    {
      "text": "iate\": \"语法为<section>内容</section>，通常包含标题(h1-h6)和段落，表示文档中独立的内容区块\",\n    \"advanced\": \"适用于文章章节、标签页内容区等场景。示例：<section><h2>章节标题</h2><p>这是章节正文内容</p></section>\",\n    \"expert\": \"section元素在文档大纲算法中会创建新的章节节点，需配合heading元素使用。与article的区别在于：section是主题性分组，article是独立可分发内容。WAI-ARIA中默认role='region'，应确保每个section都有可访问的名称\"\n  },\n  \"select\": {\n    \"basic\": \"HTML select元素创建下拉选择列表，允许用户从预定义选项中选择一个或多个值。\",\n    \"intermediate\": \"select标签需配合option子元素使用，name属性指定表单字段名，multiple属性允许多选。disabled属性可禁用整个选择框。\",\n    \"advanced\": \"常用于表单中的分类选择、地区选择等场景。基础代码结构：<select name='city'><option value='1'>北京</option><option value='2'>上海</option></select>。可通过size属性控制可见行数。\",\n    \"expert\": \"浏览器将select渲染为复合控件，包含按钮和下拉面板。多选时采用Ctrl/Shift键组合选择。性能优化建议：超过100个选项时应使用虚拟滚动。与datalist不同，select要求预定义所有选项而非动态建议。现代框架通常封装为可控组件处理值变更事件。\"\n  },\n  \"small\": {\n    \"basic\": \"small标签用于定义小号字体文本，通常用于免责声明或注释内容\",\n    \"intermediate\": \"HTML5语义化标签，默认显示为更小字号。语法为<small>内容</small>，可嵌套在其他元素内表示附属信息\",\n    \"advanced\": \"适用于版权声明、法律条款等次要信息。示例：<footer><small>© 2023 公司名称 保留所有权利</small></footer>。注意不要滥用，重要内容不应使用\",\n    \"expert\": \"底层通过CSS font-size属性实现(通常为父元素的80%)。现代开发中建议优先使用CSS控制样式，仅在语义需要时使用。SEO中会被识别为次要内容，不影响主要关键词权重\"\n  },\n  \"source\": {\n    \"basic\": \"HTML的<source>标签用于为<audio>/<video>元素指定多个媒体资源\",\n    \"intermediate\": \"必须嵌套在<audio>或<video>中，通过src属性指定资源路径，type属性声明MIME类型，支持多源回退机制\",\n    \"advanced\": \"实现跨浏览器兼容时常用：<video><source src='video.mp4' type='video/mp4'><source src='video.webm' type='video/webm'></video>。现代浏览器会优先加载第一个支持的格式\",\n    \"expert\": \"底层通过canPlayType()方法检测格式支持，遵循HTTP内容协商机制。最佳实践应包",
      "summary": "HTML 中的 `<section>`、`<select>` 和 `<small>` 标签各有用途，用于结构化文档、表单选择和次要文本。",
      "source": "contents.json"
    },
    {
      "text": "deo/webm'></video>。现代浏览器会优先加载第一个支持的格式\",\n    \"expert\": \"底层通过canPlayType()方法检测格式支持，遵循HTTP内容协商机制。最佳实践应包含MP4(通用)+WebM(高效)双格式，type属性可减少不必要的网络请求。移动端需注意编码格式兼容性\"\n  },\n  \"span\": {\n    \"basic\": \"HTML行内容器标签，用于包裹文本或内联元素进行样式或脚本控制\",\n    \"intermediate\": \"语法为<span>内容</span>，作为通用行内容器，常配合class/id属性实现CSS样式控制或JavaScript操作，不产生额外换行\",\n    \"advanced\": \"典型应用包括：1)文本局部样式控制<span class='highlight'>高亮文字</span>；2)配合伪元素实现图标<span class='icon'></span>；3)JS动态操作DOM节点document.querySelector('span').style.color='red'\",\n    \"expert\": \"作为行内元素默认display:inline，不形成独立BFC。浏览器渲染时会创建匿名行内盒子包裹文本节点，其盒模型只包含content+padding+border，margin垂直方向无效。性能优化建议避免深层嵌套，大数据量时考虑虚拟滚动减少DOM节点\"\n  },\n  \"strong\": {\n    \"basic\": \"HTML强调文本标签，浏览器默认以加粗样式呈现\",\n    \"intermediate\": \"语义化标签表示重要内容，可嵌套使用但不建议替代CSS样式控制。语法：<strong>强调文本</strong>\",\n    \"advanced\": \"适用于需要语义化强调的关键词/警告信息。与em标签区别：strong表示重要性，em表示语气强调。示例：<p>操作前请<strong>备份</strong>数据</p>\",\n    \"expert\": \"底层通过加粗样式实现视觉强调，但本质是语义化标签。SEO中权重高于普通文本，但滥用会被搜索引擎惩罚。最佳实践：仅对真正重要的短语使用，避免嵌套多层strong标签影响可访问性\"\n  },\n  \"style\": {\n    \"basic\": \"<style>标签用于在HTML文档中定义内部CSS样式\",\n    \"intermediate\": \"需放在<head>内，通过type='text/css'指定样式类型，支持媒体查询属性media，可包含选择器和样式声明\",\n    \"advanced\": \"适用于页面定制样式或小规模项目，避免外部文件请求。示例：<style>body{background:#fff}@media print{.no-print{display:none}}</style>\",\n    \"expert\": \"浏览器解析时创建CSSOM树，与DOM树合并形成渲染树。内联样式会阻塞渲染，建议关键CSS内联。Scoped属性已被废弃，现用CSS Modules或Shadow DOM实现样式隔离。性能优化需注意选择器复杂度和避免@import\"\n  },\n  \"sub\": {\n    \"basic\": \"<sub>标签定义下标文本，用于化学式或数学表达式\",\n    \"intermediate\": \"语法：<sub>下标内容</sub>。与<sup>上标对应，默认样式为基线下方小字号显示",
      "summary": "HTML标签用于文本强调、容器样式定义等。",
      "source": "contents.json"
    },
    {
      "text": "sic\": \"<sub>标签定义下标文本，用于化学式或数学表达式\",\n    \"intermediate\": \"语法：<sub>下标内容</sub>。与<sup>上标对应，默认样式为基线下方小字号显示，可通过CSS覆盖样式\",\n    \"advanced\": \"应用场景：1.化学式如H<sub>2</sub>O 2.数学变量如x<sub>n</sub> 3.脚注编号。代码示例：<p>二氧化碳化学式: CO<sub>2</sub></p>\",\n    \"expert\": \"原理：<sub>是语义化标签，浏览器默认添加vertical-align: sub样式。最佳实践：1.优先使用语义化标签而非CSS模拟 2.复杂排版需配合vertical-align调整 3.屏幕阅读器会识别为下标角色。与MathML公式标签的区别在于仅适用于简单下标场景\"\n  },\n  \"summary\": {\n    \"basic\": \"<summary>是HTML5的详情摘要标签，用于包裹<details>的可视标题\",\n    \"intermediate\": \"必须与<details>配合使用，点击summary内容可切换details的展开/折叠状态。语法：<details><summary>标题</summary>内容</details>\",\n    \"advanced\": \"常见于FAQ、折叠菜单等场景。示例：<details><summary>点击查看答案</summary><p>这里是隐藏的详细解答内容</p></details>。支持CSS样式定制箭头图标\",\n    \"expert\": \"底层通过open属性控制状态，默认使用disclosure-triangle系统图标。现代浏览器通过伪元素::-webkit-details-marker实现箭头，可通过display:none隐藏后自定义样式。注意无障碍需保持键盘操作支持\"\n  },\n  \"sup\": {\n    \"basic\": \"<sup>标签定义上标文本，常用于脚注或数学公式\",\n    \"intermediate\": \"语法为<sup>上标内容</sup>，是行内元素。默认样式为vertical-align: super和较小字号，可通过CSS覆盖\",\n    \"advanced\": \"典型场景：化学式H<sub>2</sub>O<sup>TM</sup>、数学幂次x<sup>2</sup>、版权符号®<sup>1</sup>。代码示例：<p>Einstein公式E=mc<sup>2</sup></p>\",\n    \"expert\": \"底层通过改变基线位置和字号实现上标效果。与CSS的vertical-align: super等效，但语义更明确。注意：不应滥用样式替代，在数学/科学场景优先使用MathML。浏览器默认样式可能包含position: relative和top: -0.5em等属性\"\n  },\n  \"table\": {\n    \"basic\": \"HTML表格容器标签，用于结构化展示行列数据\",\n    \"intermediate\": \"由<table>包裹<tr>行、<td>单元格组成，支持<thead>/<tbody>分组，常用border/cellpadding属性控制样式\",\n    \"advanced\": \"适用于数据报表、价格对比等场景。示例：<table><tr><td>姓名</td><td>年龄</td></tr><tr><td>张三</td><td>25</td><",
      "summary": "HTML 标签用于定义下标、上标及表格，分别用于化学式、数学表达式、脚注和数据展示。",
      "source": "contents.json"
    },
    {
      "text": "   \"advanced\": \"适用于数据报表、价格对比等场景。示例：<table><tr><td>姓名</td><td>年龄</td></tr><tr><td>张三</td><td>25</td></tr></table>\",\n    \"expert\": \"浏览器解析时会构建表格布局上下文，默认display:table触发特定渲染模式。现代开发建议用CSS Grid替代复杂表格布局，但基础数据展示仍依赖原生<table>语义化结构\"\n  },\n  \"tbody\": {\n    \"basic\": \"HTML表格主体容器，用于包裹表格数据行\",\n    \"intermediate\": \"必须作为table的子元素，与thead/tfoot配合使用。包含一个或多个tr元素，每个tr代表一行数据\",\n    \"advanced\": \"适用于动态生成表格数据的场景。示例：<tbody><tr><td>数据1</td></tr><tr><td>数据2</td></tr></tbody>\",\n    \"expert\": \"浏览器渲染时会为tbody创建独立的渲染层，与thead分开处理。大数据量时建议分多个tbody优化渲染性能，避免重排。DOM操作时tbody比直接操作table有更好的性能表现\"\n  },\n  \"td\": {\n    \"basic\": \"HTML表格数据单元格标签，用于定义表格中的标准数据单元\",\n    \"intermediate\": \"必须嵌套在<tr>标签内使用，可包含文本/图像等任意内容，常用属性有colspan/rowspan控制单元格合并\",\n    \"advanced\": \"典型应用场景：数据报表展示。示例：<table><tr><td>姓名</td><td>年龄</td></tr><tr><td>张三</td><td>25</td></tr></table>\",\n    \"expert\": \"底层渲染为CSS display:table-cell元素，浏览器会自动计算单元格尺寸。最佳实践：避免嵌套复杂结构，大数据量时建议使用虚拟滚动技术优化性能，合并单元格时需注意跨行跨列计算的性能损耗\"\n  },\n  \"template\": {\n    \"basic\": \"HTML5的<template>标签用于声明可复用的HTML模板片段，内容不会立即渲染\",\n    \"intermediate\": \"通过DOM操作可克隆模板内容，语法为<template id='tpl'>...</template>，配合document.importNode()或cloneNode()使用\",\n    \"advanced\": \"适用于动态生成重复结构的场景，如列表项。示例：const template = document.querySelector('#itemTpl'); const clone = template.content.cloneNode(true); list.appendChild(clone);\",\n    \"expert\": \"模板内容存储在DocumentFragment中，解析但不渲染。浏览器会预处理但延迟执行脚本，通过content属性访问片段。性能优于字符串拼接，与Shadow DOM配合可实现组件化\"\n  },\n  \"textarea\": {\n    \"basic\": \"HTML文本输入区域标签，支持多行纯文本输入\",\n    \"intermediate\": \"语法：<textarea rows='4' col",
      "summary": "HTML标签总结：`<template>` 存储可复用片段，`<tbody>` 动态生成数据行，`<td>` 定义表格数据单元格，`<textarea>` 支持多行文本输入。",
      "source": "contents.json"
    },
    {
      "text": " \"textarea\": {\n    \"basic\": \"HTML文本输入区域标签，支持多行纯文本输入\",\n    \"intermediate\": \"语法：<textarea rows='4' cols='50'>默认文本</textarea>，常用属性包括rows(行数)、cols(列数)、placeholder(提示文本)和disabled(禁用)\",\n    \"advanced\": \"适用于表单中的长文本输入场景，如评论框、地址栏等。示例：<form><textarea name='feedback' rows='5' placeholder='请输入反馈意见'></textarea><button>提交</button></form>\",\n    \"expert\": \"底层实现为可替换元素(replaced element)，浏览器会创建独立渲染层。最佳实践包括：使用CSS控制resize行为，配合maxlength限制输入长度，移动端需注意虚拟键盘适配问题。与contenteditable的区别在于仅支持纯文本且更易控制输入格式\"\n  },\n  \"tfoot\": {\n    \"basic\": \"HTML表格页脚容器，用于包含表格的汇总行或脚注内容\",\n    \"intermediate\": \"必须作为<table>的直接子元素，位于<tbody>之后，可包含<tr>定义汇总行。支持全局属性，与<thead>形成语义化结构\",\n    \"advanced\": \"适用于财务表格总计行、数据报表统计栏等场景。示例：<table><thead>...</thead><tbody>...</tbody><tfoot><tr><td colspan='3'>合计</td><td>1000</td></tr></tfoot></table>\",\n    \"expert\": \"浏览器渲染时会优先处理<tfoot>以保证在内容过长时页脚可见，与<thead>形成固定区域。W3C规范要求其位置可位于<tbody>前但显示在底部，CSS样式继承自<table>但允许单独定制，在打印时能实现每页重复显示表脚功能\"\n  },\n  \"th\": {\n    \"basic\": \"HTML表格表头单元格标签，用于定义表格中的标题单元格\",\n    \"intermediate\": \"th标签必须包含在tr标签内，默认加粗居中显示。可通过scope属性指定关联范围(row/col/rowgroup/colgroup)\",\n    \"advanced\": \"用于数据表格的列/行标题，增强可访问性。示例：<table><tr><th scope='col'>姓名</th><th scope='col'>年龄</th></tr><tr><td>张三</td><td>25</td></tr></table>\",\n    \"expert\": \"th元素在DOM中表现为HTMLTableCellElement对象，与td共享相同接口但具有语义差异。屏幕阅读器会识别th作为标题单元格，W3C规范要求数据表格必须使用th提供上下文信息。最佳实践是始终配合scope/headers属性明确关联关系\"\n  },\n  \"thead\": {\n    \"basic\": \"HTML表格头部容器标签，用于包裹表头行(<tr>)元素\",\n    \"intermediate\": \"必须作为<table>的直接子元素，位于<tbody>之前。包含一个或多个<tr>，通常配合<th>定义列标题。支持全局属性，无",
      "summary": "HTML `<textarea>` 标签用于文本输入区域，`<thead>` 用于表格头部，`<th>` 用于表头单元格。",
      "source": "contents.json"
    },
    {
      "text": "裹表头行(<tr>)元素\",\n    \"intermediate\": \"必须作为<table>的直接子元素，位于<tbody>之前。包含一个或多个<tr>，通常配合<th>定义列标题。支持全局属性，无特有属性。\",\n    \"advanced\": \"用于数据表格的列标题区域，提升可访问性和语义化。示例：<table><thead><tr><th>姓名</th><th>年龄</th></tr></thead><tbody>...</tbody></table>\",\n    \"expert\": \"浏览器会优先渲染thead内容，与tbody分块解析提升性能。打印时自动重复显示在多页表格顶部。ARIA角色默认为rowgroup，需确保包含至少一个tr/th组合以维持语义完整性。与colgroup配合可实现复杂表头样式控制。\"\n  },\n  \"time\": {\n    \"basic\": \"HTML5时间语义化标签，用于表示日期/时间信息\",\n    \"intermediate\": \"语法为<time datetime=\\\"YYYY-MM-DD\\\">显示文本</time>，datetime属性提供机器可读格式，内容为人类可读格式\",\n    \"advanced\": \"用于博客发布时间、活动日期等场景。示例：<time datetime=\\\"2023-10-05T14:30\\\">10月5日下午2:30</time>，支持带时区的ISO8601格式\",\n    \"expert\": \"底层通过datetime属性实现机器可读(time元素本身无特殊样式)，搜索引擎和辅助技术可识别。最佳实践是始终包含datetime属性，复杂日期使用ISO8601格式，简单日期可直接写在标签内容中。与微格式兼容，可增强SEO\"\n  },\n  \"title\": {\n    \"basic\": \"HTML文档标题标签，定义浏览器标签页显示的标题内容\",\n    \"intermediate\": \"位于<head>内且必须包含文本内容，SEO关键元素。语法：<title>网页标题</title>，每个页面应唯一\",\n    \"advanced\": \"用于浏览器历史记录/书签命名，搜索引擎结果展示。示例：<title>京东-正品低价、品质保障</title>。移动端会截断过长的标题\",\n    \"expert\": \"浏览器解析时创建DOM树中的HTMLTitleElement对象，通过document.title可动态修改。搜索引擎将标题作为重要排名因素，建议长度30-60字符，包含关键词但避免堆砌\"\n  },\n  \"tr\": {\n    \"basic\": \"HTML表格行标签，用于定义表格中的一行数据\",\n    \"intermediate\": \"必须包含在<table>标签内，可嵌套<th>或<td>单元格。常用属性包括align/valign控制对齐方式，bgcolor设置背景色（已废弃）\",\n    \"advanced\": \"典型应用场景：数据表格展示。示例：<tr><td>姓名</td><td>年龄</td></tr>。现代开发中建议用CSS替代bgcolor等样式属性，通过:nth-child()伪类实现斑马纹效果\",\n    \"expert\": \"浏览器渲染时会创建匿名表格对象确保结构完整。DOM接口为HTMLTableRowElement，具有rowIndex/cells等属性。性能优化：避免嵌套过深，大数据量时考虑虚拟滚动。与Web组件结合时需注意shadow DOM内的样",
      "summary": "HTML `<tr>` 标签用于定义表格中的一行数据，必须在 `<table>` 内。",
      "source": "contents.json"
    },
    {
      "text": "结构完整。DOM接口为HTMLTableRowElement，具有rowIndex/cells等属性。性能优化：避免嵌套过深，大数据量时考虑虚拟滚动。与Web组件结合时需注意shadow DOM内的样式隔离问题\"\n  },\n  \"track\": {\n    \"basic\": \"<track>是HTML5媒体元素的字幕轨道容器，用于指定定时文本轨道\",\n    \"intermediate\": \"作为<audio>/<video>的子元素，通过src属性指定.vtt字幕文件，kind属性定义轨道类型(subtitles/captions等)，srclang设置语言\",\n    \"advanced\": \"用于视频字幕/章节导航：<video><track kind='subtitles' src='cn.vtt' srclang='zh' label='中文'>。WebVTT格式示例：WEBVTT\\n00:00:01.000 --> 00:00:05.000\\n这是第一行字幕文本\",\n    \"expert\": \"底层通过TextTrack API实现，浏览器会创建对应的TextTrack对象。最佳实践包括：1) 提供默认轨道 2) 多语言轨道需设置srclang 3) 动态加载轨道需监听cuechange事件 4) 性能优化需注意VTT文件大小和分段加载\"\n  },\n  \"u\": {\n    \"basic\": \"<u>标签用于为文本添加下划线效果\",\n    \"intermediate\": \"HTML语义化标签，语法为<u>被标注文本</u>。在HTML5中表示非文本注释（如拼写错误），替代了纯样式的<strike>标签\",\n    \"advanced\": \"适用于标注需要特别关注的文本或拼写错误。示例：<p>这段包含<u>下划线</u>的文字需要特别注意</p>。现代开发建议用CSS的text-decoration:underline替代\",\n    \"expert\": \"底层通过浏览器默认样式实现，具有user agent stylesheet定义的text-decoration:underline。在可访问性方面，屏幕阅读器可能不会特别提示，建议配合aria-label使用。HTML5规范明确其语义为标注非常规文本（如中文专名线），而非纯视觉修饰\"\n  },\n  \"ul\": {\n    \"basic\": \"ul是无序列表的HTML标签，用于包裹多个li列表项\",\n    \"intermediate\": \"ul标签必须与li标签配合使用，默认显示为带项目符号的列表。可通过CSS修改列表样式，语法：<ul><li>项目1</li><li>项目2</li></ul>\",\n    \"advanced\": \"常用于导航菜单、商品列表等场景。示例：<ul class='menu'><li><a href='/'>首页</a></li><li><a href='/about'>关于</a></li></ul> 可通过CSS设置横向排列或自定义符号\",\n    \"expert\": \"ul在浏览器中默认生成block级框，带有margin和padding。现代浏览器将其渲染为display:block; list-style-type:disc。性能优化建议：避免深层嵌套，大数据列表应使用虚拟滚动。ARIA角色默认为list，li为listitem，对屏幕阅读器友好\"\n  },\n  \"var\": {\n    \"basic\": \"HTML变量标记，表示数学表达式或",
      "summary": "HTML 标签介绍及使用注意事项。",
      "source": "contents.json"
    },
    {
      "text": "层嵌套，大数据列表应使用虚拟滚动。ARIA角色默认为list，li为listitem，对屏幕阅读器友好\"\n  },\n  \"var\": {\n    \"basic\": \"HTML变量标记，表示数学表达式或程序中的变量名\",\n    \"intermediate\": \"语义化标签，用于标识变量或占位符内容，默认斜体显示。语法：<var>变量名</var>，常与<code>配合使用\",\n    \"advanced\": \"在技术文档中标记变量名或数学符号。示例：方程中的变量<var>x</var> = <var>y</var> + 2。与CSS配合可自定义样式：var { font-style: normal; color: blue; }\",\n    \"expert\": \"作为语义化标签，不直接提供样式功能，其斜体效果由浏览器默认样式表定义。与<em>不同，<var>专门表示计算机上下文中的变量概念。SEO中会被识别为技术术语标记，建议在公式推导、代码注释等场景使用\"\n  },\n  \"video\": {\n    \"basic\": \"HTML5视频嵌入标签，支持MP4/WebM/Ogg格式\",\n    \"intermediate\": \"通过src属性指定视频源，controls属性显示播放控件，支持width/height设置尺寸。常用属性包括autoplay、loop和muted\",\n    \"advanced\": \"用于网页视频播放、背景视频等场景。示例：<video src='demo.mp4' controls width='600' poster='preview.jpg'>您的浏览器不支持video标签</video>。可通过JS API实现自定义控制\",\n    \"expert\": \"底层使用浏览器媒体引擎解码，MP4采用H.264编码需专利授权。最佳实践应提供多格式兼容方案，移动端需考虑流量优化。预加载策略涉及buffered属性监控，性能优化需注意解码器兼容性和硬件加速支持\"\n  },\n  \"wbr\": {\n    \"basic\": \"<wbr>是HTML中的可选换行机会标签，用于指定单词内可换行位置\",\n    \"intermediate\": \"在长单词或URL中插入<wbr>标签，浏览器会在该位置优先换行。无视觉表现，仅作为排版提示。语法：<span>example<wbr>domain.com</span>\",\n    \"advanced\": \"适用于长URL、复合词等场景。当容器宽度不足时，浏览器会在<wbr>处换行。示例：<p>https://<wbr>example<wbr>.com/<wbr>path</p> 渲染时可能分成多行显示\",\n    \"expert\": \"<wbr>创建软换行机会(Word Break Opportunity)，不影响文本语义。与&shy;不同，它不添加连字符。现代浏览器将其视为零宽度空格，在CSS中可通过word-break: break-all强制换行，但<wbr>提供更精确控制。对SEO无影响，属于纯展示性标签\"\n  }\n}",
      "summary": "虚拟滚动、ARIA角色、HTML变量标记、HTML5视频标签和软换行标签的功能简介。",
      "source": "contents.json"
    },
    {
      "text": "莫言：一个人最顶级的自律，不是早起，不是攒钱，而是做好以下这三件事\n唯有自己养成自律，方能赢得可期的未来，收获满是趣味的人生。\n莫言曾在诺贝尔文学奖颁奖典礼中，谈到自己笔名的由来。\n\n他说自己小时候，总是管不住自己，时常管闲事、说闲话。得到教训后，才明白，人生在世，首先要做的，是管好自己。为此，他特地给自己起了一个笔名“莫言”，叮嘱自己常自律，少说话。《沉思录》中写：“做事不可迟缓，言谈不可杂乱，灵魂不可焦躁不安，生活才能平稳无忧。”一个人最顶级的自律，不是早起，不是攒钱，而是体勤、少言、心安。\n\n 01 \n\n体勤：迈开腿，收获健康\n\n宋代范仲淹有云：“活动有方，五脏自和。”运动，是治愈一切的良药，是最养生的自律。作家白岩松曾因压力过大，身患抑郁症。一度头脑混沌，常常被恐惧笼罩，甚至出现幻听。在抑郁症的折磨下，没日没夜的难以入眠，痛不欲生，三度有自杀的念头。幸好被好心人救下，但体重却急剧下跌，整个人看起来骨瘦如柴，憔悴不堪。为了摆脱煎熬，白岩松求助过心理医生，尝试过各种抗抑郁的药物，但都收效甚微。后来，白岩松强迫自己去运动。初时，只是在室内进行简单的锻炼，慢慢地，又外出去快走，跑步。虽说极为艰难，但他每每都咬紧牙关坚持着。在日积月累下，竟脱离了抑郁症的困扰，身心也逐渐恢复健康。最终，白岩松重新回归了正常生活，事业也蒸蒸日上。在这世上，健康在于运动，而生命在于锻炼。若想身体康健，就要从迈开腿开始。运动，不但可以塑形健身，还可以改变自身在状态和面貌。长期运动的人，体内好似一汪清泉；而久坐不动的人，体内则是一潭死水。正如著名作家所说：“你所有想要的样子，都能靠自己雕刻出来。”不管生活有多沉闷，动起来就会有风来。花在运动上的每分每秒，都是对未来的投资。所流的每一滴汗水，所运动的每一步，皆不会被辜负，都会化作通向晚年幸福的底气。迈开腿，多运动，身体自然会给予最好的馈赠，方能邂逅崭新的生活，遇见全新的自己。\n\n\n天助你之前，先渡你\n天助你之前，先渡你\n 02 \n\n少言：管住嘴，福气自来\n\n《鬼谷子》里写道：“口可以食，不可以言者，有讳忌也。”嘴，是一个人最危险的敌人。管住自己的嘴，才能掌控自己的人生。唐朝时期，大诗人刘禹锡出生于普通官员之家。个性较为张扬，但却才华横溢，年纪轻轻，就位极人臣。后来，因二王八司马事件被贬谪至人烟稀少的偏远之地。生活了十余载后，他有幸再度被朝廷启用。辗转间，回到了长安，在与好友们结伴游览玄都观时，有感而发，一首诗脱口而出。诗中极力讽刺了皇帝与朝中权贵众臣。未过几日，此诗就被有心人传到了皇帝耳中，皇帝勃然大怒。最终，刘禹锡屁股还没坐热，就再次被贬黜到更为遥远的边陲之地。世间的诸多是非福祸，都出在嘴上。口既可吐玫瑰，也可吐蒺藜；既能积福修德，也漏掉福报。一旦话不过脑，脱口而出，就犹如泼出去的水，再难收回。到头来，只会惹祸上身，轻则后悔不迭，重则伤人伤己。与人往来，能言善辩是本领，但懂闭口不语却是修养。与其因一时的多言，自食恶果，不如学会适当的缄默，兜住福气。凡事以慎言为先，守嘴不惹祸，在给别人留有余地的同时，也是在给自己留下体面。\n\n\n请人吃饭，对方说“不去了，临时有事”，别说“好，下次约”，高情商回应来了\n请人吃饭，对方说“不去了，临时有事”，别说“好，下次约”，高情商回应来了\n 03 \n\n心安：放宽心，精神丰盈\n\n俗话说：“物随心转，境由心造。”在这世界上，所有的烦恼，都由心而生。古时，有一寺庙，院里草地一片枯黄。小和尚说：“师父，快撒些点草种子。”师父却摆摆手道：“随时可以撒。”后来，秋日来临，师父买来草籽，让小和尚播种。秋风瑟",
      "summary": "自律不仅是早起和攒钱，更是体勤、少言、心安。",
      "source": "一则感悟.txt"
    },
    {
      "text": "境由心造。”在这世界上，所有的烦恼，都由心而生。古时，有一寺庙，院里草地一片枯黄。小和尚说：“师父，快撒些点草种子。”师父却摆摆手道：“随时可以撒。”后来，秋日来临，师父买来草籽，让小和尚播种。秋风瑟瑟，草籽边撒边飘。小和尚急道：“怎么办？不少草籽都被吹走了。”师父捋捋胡须道：“吹走的大多是空的，撒下去也不会发芽。”撒罢草籽，又飞来几只鸟啄食。小和尚急得直跺脚：“草籽都被鸟给吃光了。”师父不紧不慢地说：“草籽很多，吃不完的。”一日夜里，骤雨疾风，次日清晨，小和尚便冲进禅房，喊道：“雨把草籽都冲走了！”师父捻着佛珠说：“一切随缘，冲至何处，就在何处发芽。”转眼间，数日而过，原本光秃秃的地上，长出了数不尽的青葱草苗。最终，小和尚未曾播种的角落，也泛起了绿意。人这一辈子，生活总不能叫人处处满意。有人鲜花着锦，却过得黯淡无光；有人身陷泥淖，却处处是芬芳。很多时候，能决定一个人生活的，不是别人，而是自己。选择烦忧，就会身心疲惫，郁郁寡欢；选择放宽，才有盈余时间，做想做的事，过想过的生活。把心放宽，把事看淡，才能积蓄力量，应对眼前的千难万险。纵使日子波涛起伏，亦能信步闲庭；就算前路崎岖难行，也能步履不停。正所谓“身安不如心安，屋宽不如心宽。”真正的富有，不是物质上的殷实，而是内心的丰盈。懂得凡事放宽心，人生方能海阔天空，活得自在安闲。\n\n\n搞好社交关系，聚餐、送礼已经过时了，需要“新三样”\n搞好社交关系，聚餐、送礼已经过时了，需要“新三样”\n▽\n\n生活从不辜负任何一个默默扎根向上的自律之人。一个人越是自律，越会获得由内而外的蜕变。但所有的蜕变都要时间和过程，多些耐心，坚持不懈，时间自会给出答案。就像荀子在《劝学》里写的：“锲而舍之，朽木不折；锲而不舍，金石可镂。”自律并非是仰赖他人的提醒，而是自我的博弈。唯有自己养成自律，方能赢得可期的未来，收获满是趣味的人生。余生漫漫，愿你在岁月的长河里破茧成蝶，成就闪闪发光的自己，活出最爱的模样。",
      "summary": "心造境，放宽心，生活自然美好。",
      "source": "一则感悟.txt"
    }
  ],
  "chunk_ids": [
    "codeAID.pdf_0_0",
    "codeAID.pdf_0_1",
    "codeAID.pdf_0_2",
    "codeAID.pdf_0_3",
    "codeAID.pdf_0_4",
    "codeAID.pdf_0_5",
    "codeAID.pdf_0_6",
    "codeAID.pdf_0_7",
    "codeAID.pdf_0_8",
    "codeAID.pdf_0_9",
    "codeAID.pdf_0_10",
    "codeAID.pdf_0_11",
    "codeAID.pdf_0_12",
    "codeAID.pdf_0_13",
    "codeAID.pdf_0_14",
    "codeAID.pdf_0_15",
    "codeAID.pdf_0_16",
    "codeAID.pdf_0_17",
    "codeAID.pdf_0_18",
    "codeAID.pdf_0_19",
    "codeAID.pdf_0_20",
    "codeAID.pdf_0_21",
    "codeAID.pdf_0_22",
    "codeAID.pdf_0_23",
    "codeAID.pdf_0_24",
    "codeAID.pdf_0_25",
    "codeAID.pdf_0_26",
    "codeAID.pdf_0_27",
    "codeAID.pdf_0_28",
    "codeAID.pdf_0_29",
    "codeAID.pdf_0_30",
    "codeAID.pdf_0_31",
    "codeAID.pdf_0_32",
    "codeAID.pdf_0_33",
    "codeAID.pdf_0_34",
    "codeAID.pdf_0_35",
    "codeAID.pdf_0_36",
    "codeAID.pdf_0_37",
    "codeAID.pdf_0_38",
    "codeAID.pdf_0_39",
    "codeAID.pdf_0_40",
    "codeAID.pdf_0_41",
    "codeAID.pdf_0_42",
    "codeAID.pdf_0_43",
    "codeAID.pdf_0_44",
    "codeAID.pdf_0_45",
    "codeAID.pdf_0_46",
    "codeAID.pdf_0_47",
    "codeAID.pdf_0_48",
    "codeAID.pdf_0_49",
    "codeAID.pdf_0_50",
    "codeAID.pdf_0_51",
    "codeAID.pdf_0_52",
    "codeAID.pdf_0_53",
    "codeAID.pdf_0_54",
    "codeAID.pdf_0_55",
    "codeAID.pdf_0_56",
    "codeAID.pdf_0_57",
    "codeAID.pdf_0_58",
    "codeAID.pdf_0_59",
    "codeAID.pdf_0_60",
    "codeAID.pdf_0_61",
    "codeAID.pdf_0_62",
    "codeAID.pdf_0_63",
    "codeAID.pdf_0_64",
    "codeAID.pdf_0_65",
    "codeAID.pdf_0_66",
    "codeAID.pdf_0_67",
    "codeAID.pdf_0_68",
    "codeAID.pdf_0_69",
    "codeAID.pdf_0_70",
    "codeAID.pdf_0_71",
    "codeAID.pdf_0_72",
    "codeAID.pdf_0_73",
    "codeAID.pdf_0_74",
    "codeAID.pdf_0_75",
    "codeAID.pdf_0_76",
    "codeAID.pdf_0_77",
    "codeAID.pdf_0_78",
    "codeAID.pdf_0_79",
    "contents.json_1_0",
    "contents.json_1_1",
    "contents.json_1_2",
    "contents.json_1_3",
    "contents.json_1_4",
    "contents.json_1_5",
    "contents.json_1_6",
    "contents.json_1_7",
    "contents.json_1_8",
    "contents.json_1_9",
    "contents.json_1_10",
    "contents.json_1_11",
    "contents.json_1_12",
    "contents.json_1_13",
    "contents.json_1_14",
    "contents.json_1_15",
    "contents.json_1_16",
    "contents.json_1_17",
    "contents.json_1_18",
    "contents.json_1_19",
    "contents.json_1_20",
    "contents.json_1_21",
    "contents.json_1_22",
    "contents.json_1_23",
    "contents.json_1_24",
    "contents.json_1_25",
    "contents.json_1_26",
    "contents.json_1_27",
    "contents.json_1_28",
    "contents.json_1_29",
    "contents.json_1_30",
    "一则感悟.txt_2_0",
    "一则感悟.txt_2_1"
  ]
}