{
    "topic_id": "5_2",
    "title": "5_2 引入音频文件",
   "levels": [
            {
                "level": 1,
                "description": "在网页中添加声音效果可以显著提升用户体验，比如播放背景音乐、语音提示或动物叫声。HTML 提供了专门的标签来实现音频的嵌入，这就是 `<audio>` 标签。它是一个内联元素，用于定义音频内容，支持多种音频格式，如 MP3、WAV 和 OGG。最基本的用法是将 `<audio>` 标签放入页面中，并通过 `src` 属性指定音频文件的路径。但更推荐的做法是使用 `<source>` 标签来定义音频源，这样可以在不同浏览器不支持某一格式时提供备选方案。此外，如果浏览器完全不支持音频播放功能，我们还可以在 `<audio>` 标签内部写一段提示文字，作为回退内容，让用户知道当前环境无法播放声音。为了让用户能控制播放过程，通常会添加 `controls` 属性，这样浏览器就会显示播放、暂停、音量等按钮。整个结构不需要 JavaScript 就能运行，非常适合初学者理解 HTML 是如何与多媒体资源交互的。掌握这一基础概念是学习网页音视频处理的第一步。"
            },
            {
                "level": 2,
                "description": "在实际开发中，仅仅插入一个音频文件往往不够，我们需要考虑兼容性、可访问性和用户体验。不同浏览器对音频格式的支持存在差异，例如某些浏览器可能不支持 MP3，但支持 OGG。因此，使用多个 `<source>` 标签并列提供不同格式的音频文件是一种常见做法，浏览器会自动选择第一个它能播放的格式。`<source>` 标签的 `type` 属性非常重要，它告诉浏览器该音频文件的 MIME 类型，例如 `audio/mpeg` 表示 MP3 文件，`audio/ogg` 表示 OGG 文件。这样可以避免浏览器下载不支持的文件，提高加载效率。同时，`controls` 属性的使用让非技术用户也能轻松操作音频播放，提升交互性。我们还可以设置 `autoplay` 让音频自动播放（注意现代浏览器通常禁止无声环境下的自动播放），或使用 `loop` 实现循环播放。更重要的是，回退文本的作用不可忽视，它为不支持音频的旧浏览器或辅助设备提供了必要的信息，体现了网页的包容性设计原则。这些组合用法共同构成了一个健壮的音频嵌入方案。"
            },
            {
                "level": 3,
                "description": "深入理解 `<audio>` 标签的工作机制有助于优化性能和提升可维护性。当浏览器解析到 `<audio>` 标签时，会根据 `src` 或 `<source>` 列表发起网络请求获取音频资源。默认情况下，音频文件是延迟加载的（lazy loading），除非设置了 `preload` 属性。`preload` 可以取值为 `none`（不预加载）、`metadata`（只加载元数据，如时长）或 `auto`（尽可能预加载），合理设置可以平衡用户体验与带宽消耗。从性能角度看，过大的音频文件会导致页面加载变慢，因此建议对音频进行压缩，并优先使用广泛支持的格式以减少 `<source>` 数量。此外，`<audio>` 元素实际上是一个 DOM 对象，可以通过 JavaScript 获取并调用其方法，如 `play()`、`pause()` 和监听 `onloadeddata` 等事件，这为后续实现自定义播放器打下基础。值得注意的是，现代浏览器对自动播放有严格限制，通常要求用户先与页面交互才能触发播放，这是为了防止干扰用户。理解这些底层机制和限制，能帮助开发者构建更高效、更符合规范的音频功能。"
            },
            {
                "level": 4,
                "description": "现在我们来完成一个综合练习：在网页中插入一段鸟鸣声音频，要求支持多种格式、显示控制条，并提供浏览器不支持时的提示。请使用 `<audio>` 标签，包含两个 `<source>`：一个 MP3 格式，类型为 `audio/mpeg`；另一个 OGG 格式，类型为 `audio/ogg`。同时添加 `controls` 属性以便用户操作，并在标签内部写上“您的浏览器不支持音频播放”作为回退文本。以下是一个完整示例代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>自然之声</title>\n</head>\n<body>\n  <h1>聆听大自然</h1>\n  <p>点击播放按钮，享受清晨的鸟鸣声。</p>\n  \n  <audio controls>\n    <source src=\"birdsong.mp3\" type=\"audio/mpeg\" />\n    <source src=\"birdsong.ogg\" type=\"audio/ogg\" />\n    您的浏览器不支持音频播放。\n  </audio>\n</body>\n</html>\n```\n\n这个例子涵盖了测试题中的所有关键点：`<audio>` 的使用、`controls` 的启用、`<source>` 的正确配置以及回退文本的添加。你可以将此代码保存为 HTML 文件并在浏览器中运行，验证音频是否正常播放，并尝试移除 `controls` 看看界面变化，加深理解。"
            }
        ],
    "sc_all": [
        {"topic_id": "1_1", "select_element": ["h1", "h2", "h3", "h4", "h5", "h6", "p","span"]},
        {"topic_id": "1_2", "select_element": []},
        {"topic_id": "1_3", "select_element": ["<!DOCTYPE>", "html", "head", "body","meta", "title","footer"]},
        {"topic_id": "2_1", "select_element": ["div"]},
        {"topic_id": "2_2", "select_element": ["ol","li"]},
        {"topic_id": "2_3", "select_element": ["ul"]},
        {"topic_id": "3_1", "select_element": ["input", "button"]},
        {"topic_id": "3_2", "select_element": ["label"]},
        {"topic_id": "3_3", "select_element": ["form"]},
        {"topic_id": "4_1", "select_element": []},
        {"topic_id": "4_2", "select_element": []},
        {"topic_id": "4_3", "select_element": []},
        {"topic_id": "5_1", "select_element": ["img"]},
        {"topic_id": "5_2", "select_element": ["audio","source"]},
        {"topic_id": "5_3", "select_element": ["video"]},
        {"topic_id": "6_1", "select_element": []},
        {"topic_id": "6_2", "select_element": []},
        {"topic_id": "6_3", "select_element": []}
    ]
}