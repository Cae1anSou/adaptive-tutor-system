{
    "topic_id": "5_2",
    "title": "5_2 引入音频文件",
   "levels": [
            {
                "level": 1,
                "description": "在网页中添加声音效果可以让用户获得更丰富的体验，比如播放背景音乐、语音讲解或动物叫声。HTML 提供了专门的标签来实现音频的嵌入，这就是 `<audio>` 标签。这个标签本身不会显示任何内容，但它是一个容器，用来加载和控制音频文件的播放。为了让用户能够操作音频，我们需要给 `<audio>` 标签加上 `controls` 属性，这样浏览器就会自动显示播放、暂停、音量等控制按钮。音频文件通常不会直接写在 `<audio>` 标签里，而是通过内部的 `<source>` 标签来指定。`<source>` 可以设置 `src` 属性指向音频文件的路径，同时用 `type` 属性说明文件类型，例如 `audio/mpeg` 表示 MP3 文件。如果用户的浏览器不支持 `<audio>` 功能，页面将无法播放声音，因此我们需要在 `<audio>` 标签内部写一段提示文字，比如‘您的浏览器不支持音频播放’，这段文字只会在不支持的情况下显示，帮助用户理解发生了什么。整个结构是层次化的：`<audio>` 是外层容器，`<source>` 定义资源，内部文本作为回退内容。"
            },
            {
                "level": 2,
                "description": "在实际开发中，我们常常需要兼容不同浏览器对音频格式的支持差异。虽然 MP3 格式最为常见，使用 `audio/mpeg` 类型即可，但为了增强兼容性，可以提供多个 `<source>` 标签，分别指向不同格式的音频文件，如 OGG 或 WAV。浏览器会按顺序尝试加载这些资源，一旦找到支持的格式就会停止搜索。此外，`<audio>` 标签还支持其他属性，比如 `autoplay` 可以让音频自动播放，`loop` 使音频循环播放，`muted` 初始静音等，但这些属性需谨慎使用，以免影响用户体验。例如自动播放可能被浏览器阻止，尤其是在移动设备上。关于回退文本，它不仅是对老版本浏览器的友好提示，也是一种无障碍设计的体现，确保所有用户都能获得必要的信息。我们还可以结合 CSS 对音频控件的容器进行样式美化，比如设置边距、背景或边框，使其更好地融入页面整体风格。需要注意的是，尽管可以对 `<audio>` 元素本身添加样式，但其内部的播放控件由浏览器原生渲染，通常不能直接用 CSS 修改外观。"
            },
            {
                "level": 3,
                "description": "深入理解 `<audio>` 标签的工作机制有助于优化性能和提升可维护性。当浏览器解析到 `<audio>` 标签时，会根据 `src` 或 `<source>` 列表发起网络请求获取音频元数据，这个过程称为预加载。通过 `preload` 属性可以控制预加载行为：设置为 'none' 表示不预加载，节省带宽；'metadata' 仅加载音频信息如时长；'auto' 则尽可能提前加载全部内容。合理选择预加载策略对移动端用户体验至关重要。另外，使用 JavaScript 可以动态控制音频播放状态，例如通过 `document.querySelector('audio')` 获取音频元素，调用 `.play()` 或 `.pause()` 方法实现程序化控制。这为交互设计提供了更多可能性，比如点击按钮播放提示音。浏览器的安全策略要求音频播放必须由用户操作触发，因此自动播放功能受限。从语义化角度出发，`<audio>` 应该放在与其内容相关的上下文中，比如在文章段落中插入一段语音解说，而不是随意放置。同时，为 `<audio>` 添加 `aria-label` 或使用 `<figure>` 和 `<figcaption>` 包裹，可以进一步提升可访问性。"
            },
            {
                "level": 4,
                "description": "现在我们来完成一个综合练习：创建一个关于鸟类知识的网页，在其中插入一段鸟鸣音频。要求使用 `<audio>` 标签并启用 controls，添加一个 `<source>` 指向名为 'bird-sound.mp3' 的文件，类型设置为 'audio/mpeg'，并在标签内部写上‘您的浏览器不支持音频播放’作为回退提示。示例代码如下：`<audio controls><source src='bird-sound.mp3' type='audio/mpeg'>您的浏览器不支持音频播放</audio>`。你可以将这段代码插入到页面的任意合适位置，例如在介绍某种鸟类的段落下方。完成后，打开浏览器预览，确认是否出现播放控件，并尝试播放声音。如果使用本地文件测试，请确保音频文件路径正确，且服务器环境支持该 MIME 类型。接下来可以尝试扩展功能：添加 `preload='metadata'` 以优化加载性能，或者用 JavaScript 写一个按钮，点击后触发播放。这不仅能巩固对 HTML 音频标签的理解，还能衔接后续的 JavaScript 交互学习。"
            }
        ],
    "sc_all": [
        {"topic_id": "1_1", "select_element": ["h1", "h2", "h3", "h4", "h5", "h6", "p","span"]},
        {"topic_id": "1_2", "select_element": []},
        {"topic_id": "1_3", "select_element": ["<!DOCTYPE>", "html", "head", "body","meta", "title","footer"]},
        {"topic_id": "2_1", "select_element": ["div"]},
        {"topic_id": "2_2", "select_element": ["ol","li"]},
        {"topic_id": "2_3", "select_element": ["ul"]},
        {"topic_id": "3_1", "select_element": ["input", "button"]},
        {"topic_id": "3_2", "select_element": ["label"]},
        {"topic_id": "3_3", "select_element": ["form"]},
        {"topic_id": "4_1", "select_element": []},
        {"topic_id": "4_2", "select_element": []},
        {"topic_id": "4_3", "select_element": []},
        {"topic_id": "5_1", "select_element": ["img"]},
        {"topic_id": "5_2", "select_element": ["audio","source"]},
        {"topic_id": "5_3", "select_element": ["video"]},
        {"topic_id": "6_1", "select_element": []},
        {"topic_id": "6_2", "select_element": []},
        {"topic_id": "6_3", "select_element": []}
    ]
}