{
    "topic_id": "6_2",
    "title": "6_2 获取用户输入",
    "levels": [
            {
                "level": 1,
                "description": "在网页开发中，我们经常需要与用户进行互动，比如让用户填写信息、做出选择或提交内容。实现这种交互的第一步就是能够获取用户的输入。JavaScript 是前端开发中用来处理这类动态行为的核心语言。当我们想获取用户在输入框中填写的内容时，最常用的方法是使用 `document.getElementById()` 方法来选中页面中的某个输入元素，然后通过 `.value` 属性读取它的当前值。例如，如果页面上有一个 id 为 'username' 的输入框，我们可以通过 `document.getElementById('username').value` 来获取用户输入的文字。这个过程就像是去一个特定的信箱里取出里面装的信件内容一样。需要注意的是，只有当元素确实存在于页面上，并且具有指定的 id，这个方法才能成功获取到元素。此外，输入框的 value 值会随着用户每一次的键盘输入而实时变化，因此我们可以随时读取最新的内容。这是构建交互式网页的基础技能之一，几乎所有涉及表单或用户操作的功能都会用到它。掌握这一基本语法结构，是迈向动态网页开发的重要一步。"
            },
            {
                "level": 2,
                "description": "在实际开发中，获取用户输入往往不是孤立的操作，而是与其他功能组合使用的。最常见的场景是结合按钮点击事件来触发对输入内容的处理。例如，当用户在搜索框中输入关键词后，点击‘搜索’按钮，这时我们希望程序能捕获输入框中的文字并执行后续逻辑，比如显示提示、发起网络请求或过滤数据。为了实现这一点，我们需要为按钮绑定一个点击事件监听器，使用 `addEventListener('click', function(){...})` 方法。在这个回调函数内部，再调用 `document.getElementById('inputId').value` 获取输入值。这样就形成了‘用户操作 → 触发事件 → 获取输入 → 执行逻辑’的完整流程。同时，还需要注意一些常见问题：比如输入框为空时是否要提醒用户？输入的内容是否包含敏感字符？这些都可以在获取 value 后通过条件判断进一步处理。另外，除了 text 类型的 input，这种方法也适用于 password、email、number 等各种输入类型，只要它们有 value 属性即可。理解这种事件驱动的编程模式，有助于构建更加灵活和响应式的用户界面。"
            },
            {
                "level": 3,
                "description": "深入来看，`document.getElementById()` 虽然简单易用，但在大型项目中也有其局限性。首先，它依赖于唯一的 id，如果页面结构复杂或动态生成元素，容易出现 id 冲突或找不到元素的问题。其次，频繁地通过 DOM 查询获取元素会影响性能，尤其是在循环或高频触发的事件中。现代开发中更推荐使用变量缓存元素引用，例如将 `const input = document.getElementById('searchInput')` 提前定义，避免重复查询。此外，还可以使用更现代的选择器方法如 `querySelector()`，它支持 CSS 选择器语法，更加灵活。从机制上看，`.value` 属性反映的是输入框的当前状态，它是可读可写的，意味着我们不仅能读取还能修改它的值，这在重置表单或预填充内容时非常有用。浏览器在处理 input 元素时还会触发其他事件，如 `input`、`change`、`keydown` 等，它们适用于不同的交互需求。例如，`input` 事件会在用户每次输入时立即触发，适合做实时搜索提示；而 `change` 事件则在失去焦点且值发生变化时才触发。理解这些细节有助于写出更高效、更健壮的代码。"
            },
            {
                "level": 4,
                "description": "现在我们来完成一个综合练习，模拟一个简单的欢迎系统。页面上有一个输入框和一个按钮，用户输入名字后点击按钮，会弹出一个包含该名字的欢迎消息。这个练习涵盖了获取输入、事件绑定和消息展示三个关键点。以下是示例代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>欢迎系统</title>\n</head>\n<body>\n  <h2>请输入您的姓名：</h2>\n  <input type=\"text\" id=\"nameInput\" placeholder=\"例如：小明\" />\n  <button id=\"greetBtn\">打招呼</button>\n\n  <script>\n    const input = document.getElementById('nameInput');\n    const button = document.getElementById('greetBtn');\n\n    button.addEventListener('click', function() {\n      const name = input.value.trim();\n      if (name) {\n        alert(`你好，${name}！欢迎来到前端世界！`);\n      } else {\n        alert('请输入您的姓名哦～');\n      }\n    });\n  </script>\n</body>\n</html>\n```\n\n这段代码首先获取了输入框和按钮的引用，然后为按钮添加了点击事件监听。当用户点击时，程序读取输入框的值并去除首尾空格，若不为空则弹出个性化欢迎语。你可以尝试修改提示内容或增加验证逻辑，比如限制只能输入中文姓名，从而进一步提升实践能力。"
            }
        ],
    "sc_all": [
        {"topic_id": "1_1", "select_element": ["h1", "h2", "h3", "h4", "h5", "h6", "p","span"]},
        {"topic_id": "1_2", "select_element": []},
        {"topic_id": "1_3", "select_element": ["<!DOCTYPE>", "html", "head", "body","meta", "title","footer"]},
        {"topic_id": "2_1", "select_element": ["div"]},
        {"topic_id": "2_2", "select_element": ["ol","li"]},
        {"topic_id": "2_3", "select_element": ["ul"]},
        {"topic_id": "3_1", "select_element": ["input", "button"]},
        {"topic_id": "3_2", "select_element": ["label"]},
        {"topic_id": "3_3", "select_element": ["form"]},
        {"topic_id": "4_1", "select_element": []},
        {"topic_id": "4_2", "select_element": []},
        {"topic_id": "4_3", "select_element": []},
        {"topic_id": "5_1", "select_element": ["img"]},
        {"topic_id": "5_2", "select_element": ["audio","source"]},
        {"topic_id": "5_3", "select_element": ["video"]},
        {"topic_id": "6_1", "select_element": []},
        {"topic_id": "6_2", "select_element": []},
        {"topic_id": "6_3", "select_element": []}
    ]
}