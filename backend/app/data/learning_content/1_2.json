{
    "topic_id": "1_2",
    "title": "1_2 应用文本格式（加粗、斜体）",
    "levels": [
            {
                "level": 1,
                "description": "在网页开发中，为了让文字具有更强的表现力，我们经常需要对文本进行样式上的修饰，比如让某些文字变粗或变斜。这可以通过CSS（层叠样式表）来实现。CSS是一种专门用来控制网页外观的编程语言，它能够决定HTML元素的颜色、大小、位置以及字体样式等视觉效果。其中，font-weight属性用于控制文字的粗细程度，最常见的取值是normal（正常）和bold（加粗）。当我们将一个元素的font-weight设置为bold时，浏览器就会以更粗的笔画渲染该文字，使其更加醒目。而font-style属性则用来控制文字是否倾斜，它的常用值包括normal（不倾斜）和italic（斜体）。italic并不是简单地把文字向右倾斜，而是使用字体中专门设计的斜体字形，因此看起来更加自然美观。这两个属性都可以直接写在CSS规则中，作用于指定的HTML标签，例如p标签或h1标签。初学者需要理解的是，HTML负责结构，CSS负责样式，两者分工明确，通过选择器将样式应用到对应的元素上，就能实现丰富的视觉效果。掌握这些基础的文本样式设置方法，是学习前端开发的重要第一步。"
            },
            {
                "level": 2,
                "description": "在实际开发过程中，font-weight和font-style的应用非常广泛，不仅仅局限于标题或段落的基本加粗和斜体需求。例如，在强调某个关键词时，我们可以使用strong标签配合CSS中的font-weight:bold来突出显示；而在引用他人话语或表达特殊语气时，则可以使用em标签结合font-style:italic来呈现斜体效果。这种语义化标签与CSS样式的结合，不仅提升了页面的可读性，也增强了网页的可访问性，使得屏幕阅读器能够正确识别并朗读出强调内容。此外，font-weight还支持数值形式的取值，如100到900之间的整百数，数字越大表示越粗，500及以上通常被视为粗体。这种方式适用于那些提供了多种字重的现代网络字体，让我们能更精细地控制字体粗细。而font-style除了italic外，还有oblique值，表示机械倾斜，适用于没有真正斜体字形的字体。在组合使用时，我们可以同时设置这两个属性，使文字既加粗又斜体，常用于广告语或重要提示信息。需要注意的是，样式的优先级可能会受到继承、特异性或!important声明的影响，因此了解CSS层叠机制对于准确控制文本样式至关重要。通过合理运用这些属性，开发者可以在不影响结构的前提下，灵活调整页面的视觉层次。"
            },
            {
                "level": 3,
                "description": "深入理解font-weight和font-style的工作机制，有助于我们更好地优化网页性能和用户体验。首先，font-weight的渲染依赖于字体文件本身是否包含对应字重的字形数据。如果使用的字体未提供特定粗细的版本，浏览器会尝试通过算法模拟加粗效果，这种合成粗体（synthetic bolding）可能导致文字模糊或失真，影响显示质量。为了避免这种情况，开发者应在引入网络字体时明确加载所需字重，例如通过@font-face规则预定义多个weight值。同样，italic样式也需要字体支持真正的斜体字形，否则浏览器也会进行倾斜处理，效果不如原生斜体自然。从性能角度看，不必要的字体变体加载会增加页面资源体积和加载时间，因此应按需引入。另外，CSS变量的引入使得样式管理更加高效，我们可以将常用的字体粗细和风格定义为自定义属性，便于全局统一调整。同时，响应式设计中也可能根据屏幕尺寸动态切换文本样式，例如在小屏幕上使用较轻的字重提升可读性。理解这些底层机制不仅能帮助我们写出更高质量的代码，还能避免常见的样式异常问题，从而构建出更加专业和稳定的用户界面。"
            },
            {
                "level": 4,
                "description": "为了巩固对font-weight和font-style的理解，下面我们来看一个综合性的练习示例。假设我们要设计一个宠物展览的宣传页，其中包含不同类型的动物介绍，我们需要用不同的文本样式来区分重点信息。以下是一个完整的HTML与CSS代码示例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>萌宠世界展览</title>\n  <style>\n    .pet-name {\n      font-weight: 700;\n      font-style: normal;\n      color: #d35400;\n    }\n    .pet-desc {\n      font-weight: normal;\n      font-style: italic;\n      color: #2c3e50;\n    }\n    .highlight {\n      font-weight: bold;\n      font-style: italic;\n      color: #c0392b;\n    }\n  </style>\n</head>\n<body>\n  <h2><span class=\"pet-name\">布偶猫</span> —— 温柔的天使</h2>\n  <p class=\"pet-desc\">拥有湛蓝的眼睛和柔软的长毛，是最受欢迎的家猫之一。</p>\n  <p>本次展览特别推荐：<span class=\"highlight\">限量版互动体验区</span>，欢迎前来参与！</p>\n</body>\n</html>\n```\n在这个例子中，我们分别使用了不同的类名来控制文本样式，实现了加粗、斜体以及两者结合的效果。你可以尝试修改这些属性值，观察页面变化，进一步掌握其用法。接下来的任务将要求你使用类似的方法完成指定样式的设置。"
            }
        ],
    "sc_all": [
        {"topic_id": "1_1", "select_element": ["h1", "h2", "h3", "h4", "h5", "h6", "p","span"]},
        {"topic_id": "1_2", "select_element": []},
        {"topic_id": "1_3", "select_element": ["<!DOCTYPE>", "html", "head", "body","meta", "title","footer"]},
        {"topic_id": "2_1", "select_element": ["div"]},
        {"topic_id": "2_2", "select_element": ["ol","li"]},
        {"topic_id": "2_3", "select_element": ["ul"]},
        {"topic_id": "3_1", "select_element": ["input", "button"]},
        {"topic_id": "3_2", "select_element": ["label"]},
        {"topic_id": "3_3", "select_element": ["form"]},
        {"topic_id": "4_1", "select_element": []},
        {"topic_id": "4_2", "select_element": []},
        {"topic_id": "4_3", "select_element": []},
        {"topic_id": "5_1", "select_element": ["img"]},
        {"topic_id": "5_2", "select_element": ["audio","source"]},
        {"topic_id": "5_3", "select_element": ["video"]},
        {"topic_id": "6_1", "select_element": []},
        {"topic_id": "6_2", "select_element": []},
        {"topic_id": "6_3", "select_element": []}
    ]
}