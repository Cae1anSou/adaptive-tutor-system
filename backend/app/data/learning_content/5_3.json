{
    "topic_id": "5_3",
    "title": "嵌入视频内容",
    "levels": [
            {
                "level": 1,
                "description": "在网页开发中，我们经常需要向页面中添加多媒体内容，比如视频。HTML 提供了一个专门的标签 `<video>` 来实现这一功能。这个标签就像一个容器，用来包裹我们要展示的视频文件。最基本的用法是使用 `<video>` 开始标签和 `</video>` 结束标签，并在它们之间放置视频源文件的信息。为了让用户能够控制视频的播放，例如开始、暂停或调节音量，我们需要添加 `controls` 属性。这个属性会自动在视频下方显示一排操作按钮。视频本身不会直接写在 `<video>` 标签里，而是通过一个叫 `<source>` 的标签引入。`<source>` 标签使用 `src` 属性指定视频文件的路径，比如一个 `.mp4` 文件。此外，为了告诉浏览器这个视频的格式类型，我们需要设置 `type=\"video/mp4\"`。这样浏览器就能正确识别并加载视频。如果用户的浏览器不支持 `<video>` 标签，我们可以在这对标签内部写一段提示文字，比如‘您的浏览器不支持视频播放’，这段文字将作为备用内容显示，确保用户不会看到空白区域。这种方式保证了网页的兼容性和用户体验。"
            },
            {
                "level": 2,
                "description": "在实际项目中，嵌入视频不仅仅是让其显示出来，还需要考虑不同设备和网络环境下的表现。一个常见的做法是为同一个视频提供多种格式，比如同时提供 `.mp4` 和 `.webm` 格式，以兼容不同浏览器。我们可以通过添加多个 `<source>` 标签来实现这一点，浏览器会按顺序尝试加载，直到找到它支持的格式为止。此外，设置视频的尺寸非常重要，尤其是在响应式设计中。虽然可以使用 `width` 和 `height` 属性来设定视频的宽高，但更推荐的做法是通过 CSS 来控制，这样可以更灵活地适应不同的屏幕尺寸。例如，将视频的宽度设为 `100%`，可以让它自动填满父容器，避免在小屏幕上出现横向滚动条。同时，我们还可以使用 `autoplay`、`loop` 和 `muted` 等属性来增强用户体验，比如让背景视频自动循环播放且静音。需要注意的是，现代浏览器出于用户体验考虑，通常禁止自动播放带有声音的视频，因此如果需要自动播放，必须配合 `muted` 属性。这些属性的组合使用可以让视频更好地融入网页整体设计。"
            },
            {
                "level": 3,
                "description": "深入理解 `<video>` 标签的工作机制有助于我们优化性能和提升可访问性。当浏览器解析到 `<video>` 标签时，它并不会立即下载整个视频文件，而是先请求视频的元数据，比如时长、分辨率等，这称为‘预加载’。我们可以通过 `preload` 属性来控制这一行为，可选值有 `none`（不预加载）、`metadata`（只加载元数据）和 `auto`（尽可能预加载）。合理设置 `preload` 可以节省用户流量并加快页面响应速度。另外，视频的编码格式和压缩方式也会影响加载速度和画质，选择合适的编码参数至关重要。从可访问性角度看，仅靠视觉和声音传达信息是不够的，我们应为视频添加字幕或描述性文本，使用 `<track>` 标签引入 WebVTT 字幕文件，帮助听障或视障用户理解内容。JavaScript 也可以与 `<video>` 标签结合，通过监听播放事件、获取当前播放时间等方式实现自定义控制条或播放分析功能。这些机制共同构成了现代网页视频播放的技术基础。"
            },
            {
                "level": 4,
                "description": "为了巩固对视频嵌入的理解，我们来实现一个带有多个格式支持和响应式布局的视频播放器。假设我们要展示一段公园风景视频，文件名为 `scenery.mp4` 和 `scenery.webm`。首先，在 HTML 中使用 `<video>` 标签，并添加 `controls` 属性。接着，插入两个 `<source>` 标签，分别指向 `.mp4` 和 `.webm` 文件，并设置 `type` 为 `video/mp4` 和 `video/webm`。为了确保视频在不同设备上都能良好显示，我们在 CSS 中设置 `video { width: 100%; height: auto; }`，这样视频会根据容器宽度自动缩放。同时，为防止页面布局被破坏，可以将视频放在一个设置了 `max-width` 的容器中。最后，在 `<video>` 标签内部添加一段回退文本：‘您的浏览器不支持视频播放，请升级浏览器或下载视频查看。’ 这样即使浏览器不支持，用户也能获得明确提示。完整的示例代码如下：HTML 部分 `<video controls><source src=\"scenery.mp4\" type=\"video/mp4\"><source src=\"scenery.webm\" type=\"video/webm\">您的浏览器不支持视频播放，请升级浏览器或下载视频查看。</video>`，CSS 部分 `video { width: 100%; height: auto; }`。这个例子涵盖了格式兼容、响应式设计和可访问性三个关键点。"
            }
        ],
    "sc_all": [
        {"topic_id": "1_1", "select_element": ["h1", "h2", "h3", "h4", "h5", "h6", "p","span"]},
        {"topic_id": "1_2", "select_element": []},
        {"topic_id": "1_3", "select_element": ["<!DOCTYPE>", "html", "head", "body","meta", "title","footer"]},
        {"topic_id": "2_1", "select_element": ["div"]},
        {"topic_id": "2_2", "select_element": ["ol","li"]},
        {"topic_id": "2_3", "select_element": ["ul"]},
        {"topic_id": "3_1", "select_element": ["input", "button"]},
        {"topic_id": "3_2", "select_element": ["label"]},
        {"topic_id": "3_3", "select_element": ["form"]},
        {"topic_id": "4_1", "select_element": []},
        {"topic_id": "4_2", "select_element": []},
        {"topic_id": "4_3", "select_element": []},
        {"topic_id": "5_1", "select_element": ["img"]},
        {"topic_id": "5_2", "select_element": ["audio","source"]},
        {"topic_id": "5_3", "select_element": ["video"]},
        {"topic_id": "6_1", "select_element": []},
        {"topic_id": "6_2", "select_element": []},
        {"topic_id": "6_3", "select_element": []}
    ],
    "example_code_snippets": [
        {
            "element": "视频插入设置 (video)",
            "code": "<video id=\"media_video_video\" controls>\n    <source src=\"https://www.w3schools.com/html/mov_bbb.mp4\" type=\"video/mp4\">\n    Your browser does not support the video element.\n</video>"
        },
        {
            "element": "视频源设置 (source)",
            "code": "<source src=\"https://www.w3schools.com/html/mov_bbb.mp4\" type=\"video/mp4\">"
        }
    ]
}